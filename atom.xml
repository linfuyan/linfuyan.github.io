<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悠城札记 - 关注但不限于 Android/iOS/nodejs 的 hexo 博客</title>
  <subtitle>关注但不限于 Android、iOS、nodejs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linfuyan.com/"/>
  <updated>2017-03-06T14:08:38.000Z</updated>
  <id>http://linfuyan.com/</id>
  
  <author>
    <name>linfuyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树莓派折腾记之第一天</title>
    <link href="http://linfuyan.com/raspberrypi-day1/"/>
    <id>http://linfuyan.com/raspberrypi-day1/</id>
    <published>2017-03-06T14:08:00.000Z</published>
    <updated>2017-03-06T14:08:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>周五晚上开箱晒图以后，直到周日才有时间开始折腾我的树莓派。</p>
<p>今天第一个小目标，就是点亮树莓派。</p>
<p>先说一下我自己拥有的设备。</p>
<ol>
<li>mac 电脑，没有 windows 系统。</li>
<li>没有键盘，有一个无线鼠标。</li>
<li>一台有 HDMI 接口的电视机。</li>
<li>网线一根</li>
</ol>
<p>另外就是我之前买回来的树莓派及配件了。</p>
<h2 id="Mac-上给树莓派安装-Raspbian"><a href="#Mac-上给树莓派安装-Raspbian" class="headerlink" title="Mac 上给树莓派安装 Raspbian"></a>Mac 上给树莓派安装 Raspbian</h2><p>树莓派支持的系统有很多，官方推荐的是 Raspbian。</p>
<h3 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h3><p>到<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="external">树莓派官网</a>下载 raspbian 的镜像文件。我的是 2017-03-02-raspbian-jessie.zip，1.57 G。解压出来成 2017-03-02-raspbian-jessie.img，有 4.39 G。</p>
<h3 id="格式化-SD-卡"><a href="#格式化-SD-卡" class="headerlink" title="格式化 SD 卡"></a>格式化 SD 卡</h3><p>使用 Mac 自带的磁盘工具，左侧选中对应的 SD 卡，点击右侧的“抹掉”标签，格式选择“MS-DOS(FAT)”，名称根据自己需要填写。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-format-sdcard.png" alt="格式化 SD 卡"></p>
<h3 id="命令行查看挂载的卷"><a href="#命令行查看挂载的卷" class="headerlink" title="命令行查看挂载的卷"></a>命令行查看挂载的卷</h3><p>打开 Mac 终端，在命令行中输入 <code>df -h</code></p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-df-h.png" alt="查看挂载的卷"></p>
<p>在这里可以看到挂载的 SD 卡，类似 <code>/dev/disk3s1</code>。</p>
<h3 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h3><p>在磁盘工具中，同样选中对应的 SD 卡，点击右侧标签上的卸载。</p>
<p>或者使用命令行工具：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil unmount <span class="regexp">/dev/</span>disk3s1</div></pre></td></tr></table></figure>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-unmount.png" alt="卸载分区"></p>
<h3 id="确认-SD-卡设备的标识"><a href="#确认-SD-卡设备的标识" class="headerlink" title="确认 SD 卡设备的标识"></a>确认 SD 卡设备的标识</h3><p>在命令行中输入 <code>diskutil list</code></p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-diskutil-list.png" alt="确认SD卡标识"></p>
<p>其中，<code>/dev/disk3</code> 就是我们要安装系统的设备。记住这个标识，非常的重要。</p>
<h3 id="将-Raspbian-镜像写入-SD-卡"><a href="#将-Raspbian-镜像写入-SD-卡" class="headerlink" title="将 Raspbian 镜像写入 SD 卡"></a>将 Raspbian 镜像写入 SD 卡</h3><p>Mac 下使用 dd 命令来将系统镜像写入设备。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="selector-tag">dd</span> bs=<span class="number">4</span>m <span class="keyword">if</span>=<span class="number">2017</span>-<span class="number">03</span>-<span class="number">02</span>-raspbian-jessie<span class="selector-class">.img</span> of=/dev/disk3</div></pre></td></tr></table></figure>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-write-img.png" alt="写入系统镜像"></p>
<p>if 后面的参数标识镜像文件路径<br>of 后面的参数则是写入设备的标识</p>
<h3 id="卸载设备"><a href="#卸载设备" class="headerlink" title="卸载设备"></a>卸载设备</h3><p>写完以后，在通过 <code>diskutil unmountDisk</code> 命令卸载 SD 卡。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-unmount2.png" alt="卸载设备"></p>
<p>这样，安装有 Raspbian 系统的 SD 卡就准备好了。</p>
<blockquote>
<p>以上图示和我实际情况略有出入。是因为我直接使用了其他网友的图片。具体见后面的参考。</p>
</blockquote>
<h2 id="点亮树莓派，进入系统"><a href="#点亮树莓派，进入系统" class="headerlink" title="点亮树莓派，进入系统"></a>点亮树莓派，进入系统</h2><p>接下来，把 SD 卡装入树莓派，接上电源，用 HDMI 线连接电视机。打开电源开关，不出意外，一会儿电视机屏幕上就看到树莓派系统的画面了。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/raspberrypi-boot.gif" alt="树莓派开机启动"></p>
<p>之前看过的很多资料都说点亮系统以后，需要对树莓派进行各种配置。这时候系统却大大出乎我的意料了。因为系统出现树莓派欢迎画面以后，还在继续玩下进行，直到最后直接进入到桌面。这个过程我没有做任何操作。</p>
<p>就这样，很顺利的进入了系统。后来发现新版的系统默认会用 pi/raspberry 的账户自动登录系统。这个真的很方便，对于树莓派小白来讲，门槛降低了很多。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/raspberrypi-logon.jpeg" alt="自动登录树莓派"></p>
<p>然而接下来，我一下子不知道还能干什么。</p>
<ol>
<li>毕竟没有键盘，只有鼠标，系统里面也没有软键盘，根本无法输入。</li>
<li>原来想着及时没有屏幕，也可以通过 ssh 来操作树莓派系统，做很多事情。而新版的树莓派系统是默认关闭 ssh 的。</li>
<li>想要 ssh 我也不知道树莓派系统的 ip。</li>
</ol>
<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>我插上无线鼠标，插上网线，随意点击的过程中，发现右上角的网卡配置上，是可以显示 ip 地址的。这样， ip 就有了。一阵欣喜。</p>
<p>而后，在系统的“首选项”中“树莓派配置”，我发现可以配置 ssh， vnc 等服务的开关。我在这里把 ssh 和 vnc 都打开了。</p>
<p>于是，我在 Mac 的终端里，输入</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">pi</span>@<span class="keyword">192</span>.<span class="keyword">168</span>.<span class="keyword">0</span>.<span class="keyword">5</span> // 这是我的树莓派 ip 地址，你的根据自己情况而定</div></pre></td></tr></table></figure>
<p>顺利地登录了。</p>
<p>此外，只用鼠标，我还配置了系统的语言，时区等，这些配置都有图形化的界面。</p>
<h2 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h2><p>Raspbian 是基于 debian 的，软件包管理工具是强大的 <code>apt</code>。为了能够快速的查找、安装各种软件，需要更新一下软件安装源。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vi</span> /etc/apt/sources.<span class="keyword">list</span></div></pre></td></tr></table></figure>
<p>从这个列表<a href="http://shumeipai.nxez.com/2013/08/31/raspbian-chinese-software-source.html" target="_blank" rel="external">Raspbian 中国软件源</a>中选择一两个源，按照 sources.list 的格式写入。然后执行下面的命令更新。注意：每次修改 <code>sources.list</code>，要使更新生效都必须执行此命令。</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure>
<h2 id="通过-VNC-控制树莓派桌面"><a href="#通过-VNC-控制树莓派桌面" class="headerlink" title="通过 VNC 控制树莓派桌面"></a>通过 VNC 控制树莓派桌面</h2><p>在网上看到很多篇关于远程控制树莓派桌面的文章，都是说需要安装 <code>tightvncserver</code>。其实是不需要的，新版的系统上已经内置了 vnc 服务 <code>RealVNC</code>，我们上面的设置中开启 vnc 就可以了。</p>
<p>而 <a href="https://www.realvnc.com/download/viewer/" target="_blank" rel="external">RealVNC</a> 在很多平台下都有客户端，包括 Mac，iOS，Android。我在 Mac 和 iOS 里都下载了 VNC Viewer 客户端，简单配置以后，就可以对树莓派进行远程桌面控制了。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/nvc-on-mac.jpeg" alt="mac vnc 客户端"></p>
<div align="center">mac 上的 VNC Viewer</div>

<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/vnc-on-ios.png" alt="ios vnc 客户端"></p>
<div align="center">iOS 上的 VNC Viewer</div>

<h2 id="安装-kodi，打造多媒体控制中心"><a href="#安装-kodi，打造多媒体控制中心" class="headerlink" title="安装 kodi，打造多媒体控制中心"></a>安装 kodi，打造多媒体控制中心</h2><p>网上大多数的教程都是说可以通过安装 <code>xbmc</code> 来将树莓派打造成多媒体控制中心。简单说就类似一个电视盒子。</p>
<p>其实 <code>xbmc</code> 已经是过去时了。现在叫 <code>kodi</code>, 我是通过命令行安装 <code>xbmc</code> 是才发现的，系统提醒我 <code>xbmc</code> 的包已经过时了。</p>
<p>等我缓过神来，发现树莓派系统的影音菜单里面包含有 <code>Kodi Media Center</code>。所以我不清楚是系统预装的，还是我通过命令行安装的。如果是命令行安装，大家执行如下命令就可以了。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install kodi</div></pre></td></tr></table></figure>
<p>安装完成以后，通过菜单可以打开 kodi。如果你在 VNC Viewer 上远程操作，是看不到 kodi 的界面的。<strong>只能在 HDMI 设备上看到</strong>。</p>
<h3 id="kodi-中文化及安装中文节目插件"><a href="#kodi-中文化及安装中文节目插件" class="headerlink" title="kodi 中文化及安装中文节目插件"></a>kodi 中文化及安装中文节目插件</h3><p>打开 kodi，默认是英文界面。如果想看自己需要的界面，则需要安装对应的插件。下面是插件项目地址：</p>
<p><a href="https://github.com/taxigps/xbmc-addons-chinese" target="_blank" rel="external">Addon scripts, plugins, and skins for XBMC Media Center. Special for chinese laguage.</a></p>
<p>具体安装步骤：</p>
<ol>
<li>下载<a href="https://github.com/taxigps/xbmc-addons-chinese/raw/master/repo/repository.xbmc-addons-chinese/repository.xbmc-addons-chinese-1.2.1.zip" target="_blank" rel="external">插件仓库</a>。</li>
<li>打开 kodi，导航到 系统(System) | 设置(Setting) | 插件(Add-ons)</li>
<li>选择 “从 zip 文件安装”</li>
<li>找到下载的 zip 所在路径，选择确认。</li>
</ol>
<p>以上插件仓库就添加完成了。具体的插件，在需要的时候选择安装就可以了。如点开视频-&gt;插件-&gt;获取更多-&gt;PPTV 等。</p>
<p>kodi 中文化步骤：</p>
<ol>
<li>导航到 系统(System) | 设置(Setting) | 外观(Appearance) | 皮肤(Skin)</li>
<li>修改皮肤的字体设置为 “基于 Arial(Arial based)”</li>
</ol>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/launch-kodi.jpeg" alt="kodi启动"></p>
<h3 id="通过安装-kodi-的客户端，在手机上控制-kodi"><a href="#通过安装-kodi-的客户端，在手机上控制-kodi" class="headerlink" title="通过安装 kodi 的客户端，在手机上控制 kodi"></a>通过安装 kodi 的客户端，在手机上控制 kodi</h3><p>可以在手机上下载 kodi 客户端来实现屏幕的控制。比如 iphone 在 AppStore 上搜索 kodi 就可以了。</p>
<p>要打开 kodi 的客户端控制，需要在 kodi 上进行配置。</p>
<p>1. 配置 Web 服务器</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-setting1.jpg" alt="配置 Web 服务器"></p>
<p>2. 开启 Zeroconf 协议</p>
<p>同样在 kodi 客户端上进行连接服务器的配置。 </p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-on-iphone.jpeg" alt="kodi客户端iphone"> <img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-operator-on-iphone" alt="kodi iphone遥控器"></p>
<p>下面是用 kodi 打开搜狐视频播放影片的截屏。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-movie.jpeg" alt="kodi播放影片"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总的来讲，今天的收获还是很大的。</p>
<ol>
<li>点亮系统比我想象的要简单。</li>
<li>也搞定了 ssh 登录，以后不用屏幕、外设来控制树莓派也很方便。</li>
<li>kodi 则让我觉得惊艳，尤其是通过手机来控制 kodi 以后，觉得比较酷。另外则是惊叹小小一块板子，看起视频来效果还是不错的。</li>
</ol>
<p>最大的感慨是，网络上的很多教程都过时了。比起那些教程，新版的 Raspbian 是在容易上手太多，很多东西也都预装好了，更加傻瓜化了。</p>
<p><strong>参考</strong></p>
<p><a href="http://www.5yun.org/9148.html" target="_blank" rel="external">Kodi播放器出现乱码的解决方法，超简单!</a></p>
<p><a href="http://www.jianshu.com/p/5dc83db2b78e" target="_blank" rel="external">mac 下安装树莓派系统</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周五晚上开箱晒图以后，直到周日才有时间开始折腾我的树莓派。&lt;/p&gt;
&lt;p&gt;今天第一个小目标，就是点亮树莓派。&lt;/p&gt;
&lt;p&gt;先说一下我自己拥有的设备。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mac 电脑，没有 windows 系统。&lt;/li&gt;
&lt;li&gt;没有键盘，有一个无线鼠标。&lt;/li
    
    </summary>
    
    
      <category term="raspberry pi" scheme="http://linfuyan.com/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>macOS Sierra 上通过 docker 安装 seafile 搭建家庭云盘</title>
    <link href="http://linfuyan.com/macOS-Sierra-docker-seafile/"/>
    <id>http://linfuyan.com/macOS-Sierra-docker-seafile/</id>
    <published>2017-03-06T07:42:00.000Z</published>
    <updated>2017-03-06T07:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>先上效果图。下图是 mac 客户端与 web 服务器的配合使用录屏。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/seafile.gif" alt="macOS-sierra-docker-seafile-demo"></p>
<h2 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h2><ol>
<li>安装 docker 比较简单。直接从<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="external">官网</a>下载安装文件，双击安装就可以了。和普通的 macOS app 一样。</li>
<li>对于 docker 操作要有基础的了解。可以参考 <a href="http://uprogrammer.cn/docker_practice/index.html" target="_blank" rel="external">docker 从入门到实践</a>。正常按照文中的步骤就可以顺利完成。</li>
<li>什么是 seafile？<a href="https://www.seafile.com/home/" target="_blank" rel="external">官网</a>为什么选了 seafile？<a href="https://www.zhihu.com/search?type=content&amp;q=seafile" target="_blank" rel="external">知乎</a>这里两个链接可以点击直接查看。更多的信息，大家自行了解。</li>
</ol>
<a id="more"></a>
<p>安装完成 docker，你就可以在终端中输入 <code>docker version</code>, 出现下面的反馈，我们就可以开始后面的事情了。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">version</span></div><div class="line">Clien<span class="variable">t:</span></div><div class="line"> Version:      <span class="number">1.13</span>.<span class="number">1</span></div><div class="line"> API <span class="keyword">version</span>:  <span class="number">1.26</span></div><div class="line"> Go <span class="keyword">version</span>:   go1.<span class="number">7.5</span></div><div class="line"> Git commi<span class="variable">t:</span>   <span class="number">092</span>cba3</div><div class="line"> Buil<span class="variable">t:</span>        Wed Feb  <span class="number">8</span> <span class="number">08</span>:<span class="number">47</span>:<span class="number">51</span> <span class="number">2017</span></div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      <span class="number">1.13</span>.<span class="number">1</span></div><div class="line"> API <span class="keyword">version</span>:  <span class="number">1.26</span> (minimum <span class="keyword">version</span> <span class="number">1.12</span>)</div><div class="line"> Go <span class="keyword">version</span>:   go1.<span class="number">7.5</span></div><div class="line"> Git commi<span class="variable">t:</span>   <span class="number">092</span>cba3</div><div class="line"> Buil<span class="variable">t:</span>        Wed Feb  <span class="number">8</span> <span class="number">08</span>:<span class="number">47</span>:<span class="number">51</span> <span class="number">2017</span></div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> Experimenta<span class="variable">l:</span> true</div></pre></td></tr></table></figure>
<p>seafile 服务器端目前有 Linux，Raspberry PI，Windows 版本，这也是在 macOS 上需要 docker 的原因。</p>
<h2 id="一、下载-docker-Ubuntu-16-04-镜像"><a href="#一、下载-docker-Ubuntu-16-04-镜像" class="headerlink" title="一、下载 docker Ubuntu 16.04 镜像"></a>一、下载 docker Ubuntu 16.04 镜像</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull daocloud.io/<span class="string">ubuntu:</span><span class="number">16.04</span></div></pre></td></tr></table></figure>
<p>由于官方的 docker 镜像仓库在国内链接很慢，这里可以选择 daocloud.io 的镜像仓库。上面的命令用来从镜像仓库中拉取tag为16.04的 ubuntu 版本。</p>
<h2 id="二、基于-Ubuntu-16-04-镜像更新源，安装必要工具"><a href="#二、基于-Ubuntu-16-04-镜像更新源，安装必要工具" class="headerlink" title="二、基于 Ubuntu 16.04 镜像更新源，安装必要工具"></a>二、基于 Ubuntu 16.04 镜像更新源，安装必要工具</h2><p>运行基于 daocloud.io/ubuntu:16.04 镜像的容器，并打开其终端。在容器内部，就和操作普通的 ubuntu 没有大的差别了。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> -i -t daocloud.io/ubuntu:16.04 /bin/bash</span></div></pre></td></tr></table></figure>
<p>更新 ubuntu 的源，并安装必要的软件。基础的 ubuntu 镜像，我们需要的软件工具都没有，所以我们需要先安装。由于官方的源，同样因为国内的关系，速度很慢，我们需要添加国内的软件源。参考：<a href="http://www.cnblogs.com/bovenson/p/5752213.html" target="_blank" rel="external">Ubuntu 16.04 几个国内更新源</a></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span> // 更新软件源</div><div class="line">apt-<span class="built_in">get</span> install <span class="keyword">vim</span> // 安装 <span class="keyword">vim</span></div><div class="line"><span class="keyword">vi</span> /etc/apt/sources.<span class="keyword">list</span> // 编辑软件源配置文件，保存，退出</div><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span> // 每次修改 sources.<span class="keyword">list</span> 都要执行该命令，使更新源的修改生效</div></pre></td></tr></table></figure>
<p>更新到国内源以后，下载速度就快很多了。继续安装一些工具如 <code>wget</code>，<code>tree</code>，后面会用到。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install wget tree</div></pre></td></tr></table></figure>
<h2 id="三、在-ubuntu-上安装-seafile"><a href="#三、在-ubuntu-上安装-seafile" class="headerlink" title="三、在 ubuntu 上安装 seafile"></a>三、在 ubuntu 上安装 seafile</h2><p>官方有很详尽的<a href="https://manual-cn.seafile.com/deploy/using_mysql.html" target="_blank" rel="external">文档</a>，照着做下来就好了。这边我记录下自己的步骤。</p>
<p>通过 <code>wget</code> 从官网下载服务器端安装包。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c <span class="string">http:</span><span class="comment">//seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.0.8_x86-64.tar.gz</span></div></pre></td></tr></table></figure>
<p>下载完成后，按照如下建立目录：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> haiwen</div><div class="line">mv seafile-server_* haiwen</div><div class="line"><span class="built_in">cd</span> haiwen</div></pre></td></tr></table></figure>
<p>将 seafile-server_* 移动到 haiwen 目录下后</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -xzf seafile-server_*</div><div class="line"><span class="built_in">mkdir</span> installed</div><div class="line">mv seafile-server_* installed</div></pre></td></tr></table></figure>
<p>官方说明：这样设计目录的好处在于</p>
<ul>
<li>和 seafile 相关的配置文件都可以放在 haiwen 目录下，便于集中管理。</li>
<li>后续升级时，你只需要解压最新的安装包到 haiwen 目录下。</li>
</ul>
<h3 id="安装-seafile-社区版依赖的软件："><a href="#安装-seafile-社区版依赖的软件：" class="headerlink" title="安装 seafile 社区版依赖的软件："></a>安装 seafile 社区版依赖的软件：</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">apt-<span class="built_in">get</span> install mariadb-server // mariadb 是 mysql 的分支</div><div class="line">apt-<span class="built_in">get</span> install python2.<span class="number">7</span> <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-ldap <span class="keyword">python</span>-mysqldb <span class="keyword">python</span>-memcache <span class="keyword">python</span>-urllib3</div></pre></td></tr></table></figure>
<p>安装完成以后，需要修改mysql用户的密码，并启动 mysql 服务：</p>
<p>参考地址：<a href="http://blog.csdn.net/stubbornness1219/article/details/53445904" target="_blank" rel="external">Ubuntu 16.04 下重置 MySQL 5.7 密码</a></p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">service mysql start <span class="comment">// 启动 mysql 服务</span></div><div class="line">mysql <span class="comment">// 用空密码进入 mysql 管理命令行</span></div><div class="line">mysql&gt; use mysql <span class="comment">// 切换到 mysql 库</span></div><div class="line">mysql&gt; update mysql.user <span class="keyword">set</span> authentication_string=password(<span class="string">'123qwe'</span>) where <span class="comment">user=</span><span class="comment">'root'</span><span class="comment"> and Host =</span><span class="comment">'localhost'</span>; <span class="comment">// 修改为自己的密码</span></div><div class="line">mysql&gt; update user <span class="keyword">set</span> plugin=<span class="string">"mysql_native_password"</span>; </div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; quit;</div></pre></td></tr></table></figure>
<p>再重启，用新的密码登录，验证修改是否生效。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service mysql <span class="literal">start</span></div><div class="line">mysql -uroot -pnewpwd</div></pre></td></tr></table></figure>
<blockquote>
<p>在开始后面的步骤时，mysql 服务必须开启，否则会提示 mysql 相关的错误。</p>
</blockquote>
<p>进入 seafile-server-* 目录，并运行安装脚本，根据提示回答问题。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> seafile-server-*</div><div class="line">./setup-seafile-mysql.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>基本上使用默认就可以了。 </p>
<blockquote>
<ul>
<li><code>seafile server ip or domain</code> 会影响到后面的下载与上传，不过系统配置中可以修改。这里可以随意填写， 如：<code>127.0.0.1</code></li>
<li><code>seafile data dir</code> 是文件存储的位置，这个要记清楚。后面我们要配置 docker 容器的数据目录。</li>
</ul>
</blockquote>
<p>接下来，你会被要求选择一种创建 Seafile 数据库的方式:</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="code">-------------------------------------------------------</span></div><div class="line">Please choose a way to initialize seafile databases:</div><div class="line">-------------------------------------------------------</div><div class="line"></div><div class="line">[1] Create new ccnet/seafile/seahub databases</div><div class="line">[2] Use existing ccnet/seafile/seahub databases</div></pre></td></tr></table></figure>
<p>如果选择1, 你需要提供根密码. 脚本程序会创建数据库和用户。<br>如果选择2, ccnet/seafile/seahub 数据库应该已经被你（或者其他人）提前创建。</p>
<p><strong>我们选1</strong>，然后一路回车下来。</p>
<p>以上，我们已经完成了 seafile 社区版在 ubuntu 上的安装。</p>
<h3 id="关于-seafile-专业版"><a href="#关于-seafile-专业版" class="headerlink" title="关于 seafile 专业版"></a>关于 seafile 专业版</h3><p>seafile 社区版是没有用户使用限制的，专业版有。专业版的功能更加强大。如社区版无法预览 office，pdf 文件，仅提供下载到本地的功能，专业版可以在线预览。</p>
<p>专业版的安装与社区版类似。由于专业版的功能更强大，所以有更多的依赖，这就要在安装时安装更多其他的软件。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> install openjdk-<span class="number">8</span>-jre poppler-utils libpython2.<span class="number">7</span> <span class="keyword">python</span>-pip \</div><div class="line">mysql-server <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-mysqldb <span class="keyword">python</span>-memcache <span class="keyword">python</span>-ldap \</div><div class="line"><span class="keyword">python</span>-urllib3</div><div class="line"></div><div class="line">pip install boto requests</div><div class="line"><span class="keyword">ln</span> -<span class="keyword">sf</span> /usr/lib/jvm/java-<span class="number">8</span>-openjdk-amd64/jre/bin/java /usr/bin/</div><div class="line"></div><div class="line">apt-<span class="built_in">get</span> install libreoffice libreoffice-script-provider-<span class="keyword">python</span> // Office 预览</div><div class="line"></div><div class="line">apt-<span class="built_in">get</span> install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy // 字体支持</div></pre></td></tr></table></figure>
<p>专业版3人以下使用是不需要授权的。更多的人需要购买授权。家庭使用的话，免费的专业版也完全够用啦。哪里可以下载到专业版请看后面的问题。</p>
<h2 id="四、从-docker-容器中退出，制作-seafile-镜像"><a href="#四、从-docker-容器中退出，制作-seafile-镜像" class="headerlink" title="四、从 docker 容器中退出，制作 seafile 镜像"></a>四、从 docker 容器中退出，制作 seafile 镜像</h2><p>在上面的操作中，我们看到终端的左侧有类似下面的前置符：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@d63b87d071a4</span><span class="symbol">:/haiwen/</span></div></pre></td></tr></table></figure>
<p>这里的 <code>d63b87d071a4</code> 是这次打开容器的 ID，我们要基于此来提交我们刚才做的修改。否则我们再次启动 ubuntu:16.04 这个镜像时，所有的修改都丢失了。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">'install seafile'</span> -<span class="selector-tag">a</span> <span class="string">'user'</span> d63b87d071a4 seafile:v1</div></pre></td></tr></table></figure>
<p>这样，就可以创建一个本地的 seafile 仓库，标签为 v1 的镜像。<code>-m</code> 为这次提交添加注释， <code>-a</code> 说明添加的用户， <code>d63b87d071a4</code> 修改的容器ID，<code>seafile:v1</code> (仓库:标签)标识新建的镜像。<code>docker commit</code> 与 <code>git commit</code> 类似。</p>
<p>通过 <code>docker images</code> 查看本地镜像，类似如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">seafile              v1                  <span class="number">9621e0684187</span>        <span class="number">2</span> days ago          <span class="number">776</span> MB</div><div class="line">youshi/ubuntu        v2                  <span class="number">08913</span>c24e827        <span class="number">3</span> days ago          <span class="number">222</span> MB</div><div class="line">daocloud.io/ubuntu   <span class="number">16.04</span>               f49eec89601e        <span class="number">5</span> weeks ago         <span class="number">129</span> MB</div><div class="line">daocloud.io/ubuntu   <span class="number">14.04</span>               b969ab9f929b        <span class="number">5</span> weeks ago         <span class="number">188</span> MB</div></pre></td></tr></table></figure>
<h2 id="五、启动-docker-中的-seafile-服务"><a href="#五、启动-docker-中的-seafile-服务" class="headerlink" title="五、启动 docker 中的 seafile 服务"></a>五、启动 docker 中的 seafile 服务</h2><p>配置数据卷、端口映射，启动 seafile 容器：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -i -t -v [<span class="number">1</span>]<span class="symbol">:/haiwen/seafile-data</span> -v [<span class="number">2</span>]<span class="symbol">:/var/lib/mysql</span> -p <span class="number">10001</span><span class="symbol">:</span><span class="number">10001</span> -p <span class="number">12001</span><span class="symbol">:</span><span class="number">12001</span> -p <span class="number">8000</span><span class="symbol">:</span><span class="number">8000</span> -p <span class="number">8082</span><span class="symbol">:</span><span class="number">8082</span> <span class="symbol">seafile:</span>v1 /bin/bash</div></pre></td></tr></table></figure>
<ol>
<li><code>-v</code> 参数映射 mac 系统中的路径到 docker 容器中的路径，作为数据卷。这样容器中的数据就保存在物理磁盘上了。[1] mac 上需要映射到 seafile 同步文件存储的路径。[2] 需要映射到 mysql 存储的路径。</li>
<li><code>-p</code> 映射容器的端口到 mac 的端口，用于网络通信。 seafile 服务需要 10001，12001，8000，8082 共4个端口。8000 是浏览器访问网页服务的端口，8082是文件同步服务的端口。</li>
</ol>
<p>启动 mysql 服务：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql <span class="literal">start</span></div></pre></td></tr></table></figure>
<p>这时终端中提示报错也没有关系，是因为没有输入 mysql 的用户/密码导致的。</p>
<p>进入到 seafile-server-* 目录下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./seafile<span class="selector-class">.sh</span> start <span class="comment">// 启动 Seafile 服务</span></div><div class="line">./seahub<span class="selector-class">.sh</span> start <span class="comment">// 启动 Seahub 网站</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第一次启动 seahub 时，需要填写管理员账号，密码。</p>
</blockquote>
<p>以上，你在浏览器中输入 <code>127.0.0.1:8000</code>， 就可以看到 seafile 网站了。通过之前填写的管理员账户登录，就可以开始体验私有云的功能啦。</p>
<h2 id="六、问题"><a href="#六、问题" class="headerlink" title="六、问题"></a>六、问题</h2><h3 id="1-客户端无法下载-上传？"><a href="#1-客户端无法下载-上传？" class="headerlink" title="1. 客户端无法下载/上传？"></a>1. 客户端无法下载/上传？</h3><p>Seafile 可以支持桌面客户端、网页版、Android、iOS 客户端。客户端上设置你的服务器地址，用网站上配置的账号，就可以使用了。如果遇到无法上传、下载文件的问题。用管理员账号，进入系统管理后台-&gt;设置中，修改 <code>SERVICE_URL</code> 和 <code>FILE_SERVER_ROOT</code>。前者用作网站访问链接，会影响到分享的文件URL；后者则影响文件同步。两者需要都能够被访问到。因此，地址是内网的，你出了局域网就访问不到了。</p>
<h3 id="2-专业版如何获取？"><a href="#2-专业版如何获取？" class="headerlink" title="2. 专业版如何获取？"></a>2. 专业版如何获取？</h3><p>专业版的获取方法，请扫下面的二维码关注公众号，并回复 <code>seafilepro</code>。</p>
<p><div align="center"><br>    <img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/qrcode_for_gh_3ad92a8fc23c_860.jpg" width="80%"><br>    <span>关注公众号，回复 seafilepro</span></div></p>
<div>





















</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上效果图。下图是 mac 客户端与 web 服务器的配合使用录屏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7sbydj.com1.z0.glb.clouddn.com/seafile.gif&quot; alt=&quot;macOS-sierra-docker-seafile-demo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;〇、前言&quot;&gt;&lt;a href=&quot;#〇、前言&quot; class=&quot;headerlink&quot; title=&quot;〇、前言&quot;&gt;&lt;/a&gt;〇、前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装 docker 比较简单。直接从&lt;a href=&quot;https://www.docker.com/products/docker#/mac&quot;&gt;官网&lt;/a&gt;下载安装文件，双击安装就可以了。和普通的 macOS app 一样。&lt;/li&gt;
&lt;li&gt;对于 docker 操作要有基础的了解。可以参考 &lt;a href=&quot;http://uprogrammer.cn/docker_practice/index.html&quot;&gt;docker 从入门到实践&lt;/a&gt;。正常按照文中的步骤就可以顺利完成。&lt;/li&gt;
&lt;li&gt;什么是 seafile？&lt;a href=&quot;https://www.seafile.com/home/&quot;&gt;官网&lt;/a&gt;为什么选了 seafile？&lt;a href=&quot;https://www.zhihu.com/search?type=content&amp;amp;q=seafile&quot;&gt;知乎&lt;/a&gt;这里两个链接可以点击直接查看。更多的信息，大家自行了解。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="docker" scheme="http://linfuyan.com/tags/docker/"/>
    
      <category term="seafile" scheme="http://linfuyan.com/tags/seafile/"/>
    
      <category term="私有云" scheme="http://linfuyan.com/tags/%E7%A7%81%E6%9C%89%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu搭建ngrok服务器，尽享内网穿透技术带来的福利</title>
    <link href="http://linfuyan.com/ubuntu-ngrok/"/>
    <id>http://linfuyan.com/ubuntu-ngrok/</id>
    <published>2016-12-19T09:17:00.000Z</published>
    <updated>2016-12-19T14:13:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你做微信开发，一次又一次的发布、发现错误、调试、发布、发现错误、调试…的循环一定让你个人或是团队感到厌倦；<br>如果你接外包项目，在开发过程中，客户想要看一看开发中的进展，你一定为还没有可预览环境或者搭建环境产生的消耗而苦恼。<br>…<br>这一切的原因仅仅是因为你深处复杂的内网环境，被一个局域网阻断了与外部的直接联系。你一定希望有一样东西，能够冲破这层阻隔，为你的工作提高效率。<br>这篇文章我们介绍 ngrok，一个开源软件，可以用于提供内网穿透。</p>
<p>以下我记录下ngrok服务的搭建过程。</p>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>需要一个有公网IP的VPS</li>
<li>需要一个能够自由解析的域名</li>
</ol>
<h2 id="二、解析域名"><a href="#二、解析域名" class="headerlink" title="二、解析域名"></a>二、解析域名</h2><p>使用自己的域名，把域名解析到 VPS 的地址，解析方式如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ngrok<span class="selector-class">.uprogrammer</span><span class="selector-class">.cn</span> ----------&gt; A记录到你的 VPS IP</div><div class="line">*<span class="selector-class">.ngrok</span><span class="selector-class">.uprogrammer</span><span class="selector-class">.cn</span> ----------&gt; CNAME到ngrok<span class="selector-class">.uprogrammer</span><span class="selector-class">.cn</span></div></pre></td></tr></table></figure>
<h3 id="三、VPS-服务端安装-go-环境"><a href="#三、VPS-服务端安装-go-环境" class="headerlink" title="三、VPS 服务端安装 go 环境"></a>三、VPS 服务端安装 go 环境</h3><p>因为 ngrok 是由 go 语言开发的，所以需要安装 go 环境。</p>
<p>1. 从 <a href="https://golang.org/dl/" target="_blank" rel="external">go 官网</a>下载最新的 go 版本，并解压到 <code>/usr/local</code> 目录下。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -c https:<span class="comment">//storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz</span></div><div class="line">tar -C /usr/local -zxvf go1.<span class="number">7.4</span><span class="selector-class">.linux-amd64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div></pre></td></tr></table></figure>
<p>2. 设置相关环境变量</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 可以根据自己需要调整路径  </div><div class="line"><span class="keyword">echo</span> <span class="string">'export GOROOT=/usr/local/go'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'export GOPATH=$HOME/go'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'export GOROOT_BOOTSTRAP=/usr/local/go'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span></div></pre></td></tr></table></figure>
<p>3. 检查是否安装成功</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="keyword">version</span></div></pre></td></tr></table></figure>
<h3 id="四、安装-Git-环境"><a href="#四、安装-Git-环境" class="headerlink" title="四、安装 Git 环境"></a>四、安装 Git 环境</h3><p>由于我们通过 github 上的源码来安装 ngrok，所以需要先安装下 git。如果已经有 git环境，则直接跳过。</p>
<p>ubuntu 上可以直接通过 <code>apt-get install git</code> 来安装 git。完成以后，做相应的 git 配置，此处略过。</p>
<h3 id="五、Ubuntu-安装-ngrok"><a href="#五、Ubuntu-安装-ngrok" class="headerlink" title="五、Ubuntu 安装 ngrok"></a>五、Ubuntu 安装 ngrok</h3><p>1. 下载 ngrok，并修改参数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</div><div class="line">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git</div><div class="line"><span class="built_in">export</span> GOPATH=/usr/<span class="built_in">local</span>/ngrok/</div><div class="line"><span class="built_in">export</span> NGROK_DOMAIN=<span class="string">"ngrok.uprogrammer.cn"</span></div><div class="line"><span class="built_in">cd</span> ngrok</div></pre></td></tr></table></figure>
<p>2. 生成证书(必须)</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out rootCA<span class="selector-class">.key</span> <span class="number">2048</span></div><div class="line">openssl req -x509 -new -nodes -key rootCA<span class="selector-class">.key</span> -subj <span class="string">"/CN=$NGROK_DOMAIN"</span> -days <span class="number">5000</span> -out rootCA<span class="selector-class">.pem</span></div><div class="line">openssl genrsa -out server<span class="selector-class">.key</span> <span class="number">2048</span></div><div class="line">openssl req -new -key server<span class="selector-class">.key</span> -subj <span class="string">"/CN=$NGROK_DOMAIN"</span> -out server<span class="selector-class">.csr</span></div><div class="line">openssl x509 -req -<span class="keyword">in</span> server<span class="selector-class">.csr</span> -CA rootCA<span class="selector-class">.pem</span> -CAkey rootCA<span class="selector-class">.key</span> -CAcreateserial -out server<span class="selector-class">.crt</span> -days <span class="number">5000</span></div></pre></td></tr></table></figure>
<p>3. 将源代码目录下生成的证书文件复制到指定的位置</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp rootCA<span class="selector-class">.pem</span> assets/client/tls/ngrokroot<span class="selector-class">.crt</span></div><div class="line">cp server<span class="selector-class">.crt</span> assets/server/tls/snakeoil<span class="selector-class">.crt</span></div><div class="line">cp server<span class="selector-class">.key</span> assets/server/tls/snakeoil.key</div></pre></td></tr></table></figure>
<p>4. 如果是在国内的服务器，需要执行下面的修改，否则会由于网络原因产生库的依赖问题。香港或者国外的服务器就不需要了。</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/ngrok/src/ngrok/<span class="built_in">log</span>/logger.<span class="built_in">go</span></div><div class="line"><span class="built_in">log</span> <span class="string">"github.com/keepeye/log4go"</span></div></pre></td></tr></table></figure>
<p>5. 编译服务器，这里也同时编译了一个 linux 下的客户端。64位系统使用 amd64，如果是32位，需要修改成 amd386。<br>编译的时候，这里可能会遇到一个坑，后面会讲到。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/<span class="keyword">go</span>/src</div><div class="line">GOOS=linux GOARCH=amd64 ./<span class="keyword">make</span>.bash</div><div class="line"><span class="keyword">cd</span> /usr/local/ngrok/</div><div class="line">GOOS=linux GOARCH=amd64 <span class="keyword">make</span> release-server release-client</div></pre></td></tr></table></figure>
<p>编译 Mac 64 位客户端</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/<span class="keyword">go</span>/src</div><div class="line">GOOS=darwin GOARCH=amd64 ./<span class="keyword">make</span>.bash</div><div class="line"><span class="keyword">cd</span> /usr/local/ngrok/</div><div class="line">GOOS=darwin GOARCH=amd64 <span class="keyword">make</span> release-client</div></pre></td></tr></table></figure>
<p>编译 Windows 64位客户端</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/<span class="keyword">go</span>/src</div><div class="line">GOOS=windows GOARCH=amd64 ./<span class="keyword">make</span>.bash</div><div class="line"><span class="keyword">cd</span> /usr/local/ngrok/</div><div class="line">GOOS=windows GOARCH=amd64 <span class="keyword">make</span> release-client</div></pre></td></tr></table></figure>
<h2 id="六、服务端运行与使用"><a href="#六、服务端运行与使用" class="headerlink" title="六、服务端运行与使用"></a>六、服务端运行与使用</h2><p>1. 进入服务端目录，服务端程序文件名为 ngrokd，并执行相应命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok/bin</div><div class="line">./ngrokd -domain=<span class="string">"<span class="variable">$NGROK_DOMAIN</span>"</span> -httpAddr=<span class="string">":80"</span></div></pre></td></tr></table></figure>
<p>2. 返回类似如下的结果，则说明服务端运行成功</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.</span>(<span class="name">*PrefixLogger</span>).Info:83) [<span class="name">registry</span>] [<span class="name">tun</span>] No affinity cache specified</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.Info:112</span>) Listening for public http connections on [<span class="name">::</span>]:80</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.Info:112</span>) Listening for public https connections on [<span class="name">::</span>]:443</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.Info:112</span>) Listening for control and proxy connections on [<span class="name">::</span>]:4443</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.</span>(<span class="name">*PrefixLogger</span>).Info:83) [<span class="name">metrics</span>] Reporting every <span class="number">30</span> seconds</div></pre></td></tr></table></figure>
<h2 id="七、客户端的运行与使用"><a href="#七、客户端的运行与使用" class="headerlink" title="七、客户端的运行与使用"></a>七、客户端的运行与使用</h2><p>1. 把刚刚从 VPS 服务器上生成的客户端服务器下载到本机，可以通过 <code>scp</code> 命令</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp username<span class="variable">@servername</span><span class="symbol">:/path/filename</span> /var/www/local_dir（本地目录）</div></pre></td></tr></table></figure>
<p>mac 客户端的位置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/ngrok/</span>bin<span class="regexp">/darwin_amd64/</span>ngrok</div></pre></td></tr></table></figure>
<p>windows 客户端的位置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/ngrok/</span>bin<span class="regexp">/windows_amd64/</span>ngrok.exe</div></pre></td></tr></table></figure>
<p>linux 客户端的位置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/ngrok/</span>bin<span class="regexp">/ngrok</span></div></pre></td></tr></table></figure>
<p>2. 客户端程序下载到本地以后，在本地同一目录下新建名为 <code>ngrok.cfg</code> 的文件，文件内容如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">server_addr:</span> <span class="string">"ngrok.uprogrammer.cn:4443"</span></div><div class="line"><span class="string">trust_host_root_certs:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>3. 运行客户端</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./ngrok -config=./ngrok.cfg -subdomain=test <span class="number">8080</span></div><div class="line"><span class="meta"># -subdomain参数指的是域名，例如这里是test.ngrok.uprogrammer.cn</span></div><div class="line"><span class="meta"># 后面的80是指本机端口，这里是指把本机的8080端口开放穿透</span></div><div class="line"><span class="meta"># windows运行客户端，请把./改成win风格的目录方式</span></div></pre></td></tr></table></figure>
<p>4. 返回类似如下的结果，则说明客户端运行成功</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Tunnel Status                 online                                                                                                        </div><div class="line">Version                       <span class="number">1.7</span>/<span class="number">1.7</span>                                                                                                       </div><div class="line">Forwarding                    http://<span class="keyword">test</span>.ngrok.uprogrammer.cn -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span>                                                            </div><div class="line">Forwarding                    https://<span class="keyword">test</span>.ngrok.uprogrammer.cn -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span>                                                           </div><div class="line">Web Interface                 <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">4040</span>                                                                                                </div><div class="line"># Conn                        <span class="number">0</span>                                                                                                             </div><div class="line">Avg Conn Time                 <span class="number">0.</span>00ms</div></pre></td></tr></table></figure>
<p>接下来，你就可以运行本地 8080 端口的程序，看一看是不是通过 <code>test.uprogrammer.cn</code> 就可以访问啦，也可以发给局域网之外的人来访问^ ^</p>
<h2 id="八、可能遇到的坑"><a href="#八、可能遇到的坑" class="headerlink" title="八、可能遇到的坑"></a>八、可能遇到的坑</h2><p>1. 出现以下错误提示：<code>$GOROOT_BOOTSTRAP must not be set to $GOROOT</code></p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">##### Building Go bootstrap tool.</div><div class="line">cmd/dist</div><div class="line"><span class="keyword">ERROR: </span>$GOROOT_BOOTSTRAP must not be set to $GOROOT</div><div class="line">Set $GOROOT_BOOTSTRAP to a working Go tree &gt;= Go 1.4.</div></pre></td></tr></table></figure>
<p>配置的 <code>$GOROOT_BOOTSTRAP</code> 和 <code>$GOROOT</code> 一致导致。可以复制一份 go 的源码到另外的路径，如 <code>/usr/local/go-copy</code>，同时 <code>export GOROOT_BOOTSTRAP=/usr/local/go-copy</code></p>
<p>2. 客户端可以连上，但域名不完全，显示如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Tunnel Status                 online</div><div class="line">Version                       <span class="number">1.7</span>/<span class="number">1.7</span></div><div class="line">Forwarding                    http://<span class="keyword">test</span>. -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span></div><div class="line">Forwarding                    https://<span class="keyword">test</span>. -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span></div><div class="line">Web Interface                 <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">4040</span></div><div class="line"># Conn                        <span class="number">0</span></div><div class="line">Avg Conn Time                 <span class="number">0.</span>00ms</div></pre></td></tr></table></figure>
<p>这种错误是由于服务端运行时环境变量没有正确配置导致的，可以显示设置域名：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ngrokd -<span class="built_in">domain</span>=<span class="string">"ngrok.uprogrammer.cn"</span> -httpAddr=<span class="string">":80"</span></div></pre></td></tr></table></figure>
<p>3. 如果你对 VPS 服务器已经有其他程序占用 80 端口，而还需要 ngrok 通过80端口做内网穿透的话，可以通过 nginx 来做反向代理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你做微信开发，一次又一次的发布、发现错误、调试、发布、发现错误、调试…的循环一定让你个人或是团队感到厌倦；&lt;br&gt;如果你接外包项目，在开发过程中，客户想要看一看开发中的进展，你一定为还没有可预览环境或者搭建环境产生的消耗而苦恼。&lt;br&gt;…&lt;br&gt;这一切的原因仅仅是因为你
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ngrok" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/ngrok/"/>
    
    
      <category term="ngrok" scheme="http://linfuyan.com/tags/ngrok/"/>
    
      <category term="微信开发" scheme="http://linfuyan.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="内网穿透" scheme="http://linfuyan.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="ubuntu" scheme="http://linfuyan.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>为 lunr.js 添加中文支持</title>
    <link href="http://linfuyan.com/add-chinese-support-to-lunrjs/"/>
    <id>http://linfuyan.com/add-chinese-support-to-lunrjs/</id>
    <published>2016-11-09T02:32:00.000Z</published>
    <updated>2016-11-09T09:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你能找到这里，那么你应该是知道 lunr.js 的。 Ok， 那 lunr.js 是什么？<a href="http://lunrjs.com/" target="_blank" rel="external">官方网站</a>上说: “Simple full-text search in your browser”。翻译过来就是：浏览器上的简单的纯文本搜索工具。是的，它可以直接在浏览器上运行，不依赖服务端来完成对网页上纯文本的搜索功能，可以极大的提升通过网络服务器请求获取搜索结果时不流畅的搜索体验。用在博客等应用中，真是再好不过。然而，和大部分老外制作的工具一样，对于中文，老外的工具还是水土不服。对于中文网页搜索最大的问题就是，lunr.js 不支持中文搜索，由此还影响到一系列基于 lunr.js 制作的本地搜索工具，如 gitbook 内置的 gitbook-search-plugin 等，所以如果你在使用 gitbook 的搜索功能，发现输入中文出现错误结果不要大惊小怪。</p>
<p>不多说，以下基于当前 lunr.js 版本（commit id:6a978d1ebf1a0c08e1a76cd4f7f74ad5490e5937），添加了中文支持。</p>
<p>仓库地址：<a href="https://github.com/linfuyan/lunr.js" target="_blank" rel="external">https://github.com/linfuyan/lunr.js</a></p>
<p>有<a href="https://github.com/linfuyan/lunr.js/tree/un-participle" target="_blank" rel="external">未分词的中文支持版本</a>和<a href="https://github.com/linfuyan/lunr.js/tree/un-participle" target="_blank" rel="external">分词的中文支持版本</a>，位于仓库中不同的分支。</p>
<h2 id="未分词的中文支持版本"><a href="#未分词的中文支持版本" class="headerlink" title="未分词的中文支持版本"></a>未分词的中文支持版本</h2><p>中文支持的基本原理是，保证 lunr.js 在分析过程中中文字符不会被转义。因此在 trimmer 函数中对中文字符做过滤。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lunr.trimmer = <span class="function"><span class="keyword">function</span> (<span class="params">token</span>) </span>&#123;</div><div class="line">  <span class="comment">//by ming300 check token is chinese then not replace   </span></div><div class="line">  <span class="keyword">if</span>(isChineseChar(token))&#123;</div><div class="line">    <span class="keyword">return</span> token;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> token</div><div class="line">    .replace(<span class="regexp">/^\W+/</span>, <span class="string">''</span>)</div><div class="line">    .replace(<span class="regexp">/\W+$/</span>, <span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> **check it contains Chinese (including Japanese and Korean)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isChineseChar</span>(<span class="params">str</span>)</span>&#123;     </div><div class="line">   <span class="keyword">var</span> reg = <span class="regexp">/[\u4E00-\u9FA5\uF900-\uFA2D]/</span>;  </div><div class="line">   <span class="keyword">return</span> reg.test(str);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，在分词部分 tokenizer 函数做些调整，添加如下关键代码：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var str = obj.toString().replace(/^<span class="symbol">\s</span>+/, '')</div><div class="line"></div><div class="line">  for (var i = str.length - 1; i &gt;= 0; i--) &#123;</div><div class="line">    if (/<span class="symbol">\S</span>/.test(str.charAt(i))) &#123;</div><div class="line">      str = str.substring(0, i + 1)</div><div class="line">      break</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var rs = str</div><div class="line">    .split(/[<span class="symbol">\ </span>|<span class="symbol">\~</span>|<span class="symbol">\`</span>|<span class="symbol">\!</span>|<span class="symbol">\@</span>|<span class="symbol">\#</span>|<span class="symbol">\$</span>|<span class="symbol">\%</span>|<span class="symbol">\^</span>|<span class="symbol">\&amp;</span>|<span class="symbol">\*</span>|<span class="symbol">\u</span>FE30-<span class="symbol">\u</span>FFA0|<span class="symbol">\(</span>|<span class="symbol">\)</span>|<span class="symbol">\-</span>|<span class="symbol">\_</span>|<span class="symbol">\+</span>|<span class="symbol">\=</span>|<span class="symbol">\|</span>|<span class="symbol">\\</span>|<span class="symbol">\[</span>|<span class="symbol">\]</span>|<span class="symbol">\&#123;</span>|<span class="symbol">\&#125;</span>|<span class="symbol">\;</span>|<span class="symbol">\:</span>|<span class="symbol">\"</span>|<span class="symbol">\'</span>|<span class="symbol">\,</span>|<span class="symbol">\&lt;</span>|<span class="symbol">\.</span>|<span class="symbol">\&gt;</span>|<span class="symbol">\/</span>|<span class="symbol">\?</span>]+/)</div><div class="line">    .map(function (token) &#123;</div><div class="line">      var t = token.replace(/[<span class="symbol">\ </span>|<span class="symbol">\~</span>|<span class="symbol">\`</span>|<span class="symbol">\!</span>|<span class="symbol">\@</span>|<span class="symbol">\#</span>|<span class="symbol">\$</span>|<span class="symbol">\%</span>|<span class="symbol">\^</span>|<span class="symbol">\&amp;</span>|<span class="symbol">\*</span>|<span class="symbol">\u</span>FE30-<span class="symbol">\u</span>FFA0|<span class="symbol">\(</span>|<span class="symbol">\)</span>|<span class="symbol">\-</span>|<span class="symbol">\_</span>|<span class="symbol">\+</span>|<span class="symbol">\=</span>|<span class="symbol">\|</span>|<span class="symbol">\\</span>|<span class="symbol">\[</span>|<span class="symbol">\]</span>|<span class="symbol">\&#123;</span>|<span class="symbol">\&#125;</span>|<span class="symbol">\;</span>|<span class="symbol">\:</span>|<span class="symbol">\"</span>|<span class="symbol">\'</span>|<span class="symbol">\,</span>|<span class="symbol">\&lt;</span>|<span class="symbol">\.</span>|<span class="symbol">\&gt;</span>|<span class="symbol">\/</span>|<span class="symbol">\?</span>]/g, '').toLowerCase()</div><div class="line">      return t;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>这里仅仅是基于英文中简单的通过空格进行分词的原则。因此会存在比较大的局限性。例如：”中文Chinese and English”，则直接被识别为”中文Chinese”、”and”、”English”，而无法将”中文”和”Chinese”再区分开。</p>
<p>相较于第二种方案的有点则是没有任何其他依赖，很轻量，适用于网页。而对基于网页标签进行的搜索则比较好，因为，标签本身就是简短，分散的。可以认为是分词好的。</p>
<h2 id="基于分词的中文支持版本"><a href="#基于分词的中文支持版本" class="headerlink" title="基于分词的中文支持版本"></a>基于分词的中文支持版本</h2><p>这个版本基于node-segment中文分词库，在未分词版本的基础上引入分词。功能自然更强大，不过由于分词库的依赖，导致整个包太大。由于需要读取文件形式的分词库，无法在浏览器上使用，但可以在 nodejs 服务端用。虽然做些修改，可以将分词库作为 js 文件 require 进来，但还是存在包太大的问题。</p>
<p>关键代码的修改也是在 lunr.js 中的 trimmer 和 tokenizer 方法中。不过需要注意的是，在 package.json 中添加对 node-segment 的依赖。</p>
<p>感谢以下两个仓库作者。</p>
<p><a href="https://github.com/ming300/lunr.js/" target="_blank" rel="external">https://github.com/ming300/lunr.js/</a></p>
<p><a href="https://github.com/nandy007/lunr.js" target="_blank" rel="external">https://github.com/nandy007/lunr.js</a></p>
<p>以及以下文章：</p>
<p><a href="http://blog.songjz.cn/jie-jue-lunr-jsde/" target="_blank" rel="external">我的建站路4：解决 lunr.js 的中文支持问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你能找到这里，那么你应该是知道 lunr.js 的。 Ok， 那 lunr.js 是什么？&lt;a href=&quot;http://lunrjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网站&lt;/a&gt;上说: “Simple full-text 
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="搜索" scheme="http://linfuyan.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="lunr" scheme="http://linfuyan.com/tags/lunr/"/>
    
      <category term="分词" scheme="http://linfuyan.com/tags/%E5%88%86%E8%AF%8D/"/>
    
      <category term="node-segment" scheme="http://linfuyan.com/tags/node-segment/"/>
    
  </entry>
  
  <entry>
    <title>解决pip install时unsupported locale setting错误</title>
    <link href="http://linfuyan.com/locale_error_unsupported_locale_setting/"/>
    <id>http://linfuyan.com/locale_error_unsupported_locale_setting/</id>
    <published>2016-10-22T03:30:24.000Z</published>
    <updated>2016-10-22T03:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在安装 Shadowsocks 时，使用 <code>pip install</code> 命令出现了下面这个错误：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install shadowsocks</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/usr/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    sys.<span class="keyword">exit</span>(main())</div><div class="line">  File <span class="string">"/usr/lib/python2.7/dist-packages/pip/__init__.py"</span>, line <span class="number">215</span>, <span class="keyword">in</span> main</div><div class="line">    locale.setlocale(locale.LC_ALL, <span class="string">''</span>)</div><div class="line">  File <span class="string">"/usr/lib/python2.7/locale.py"</span>, line <span class="number">581</span>, <span class="keyword">in</span> setlocale</div><div class="line">    return _setlocale(category, locale)</div><div class="line">locale.Error: unsupported locale setting</div></pre></td></tr></table></figure>
<p>其实是语言配置错误导致的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">locale</span> <span class="selector-tag">-a</span></div><div class="line"><span class="selector-tag">locale</span>: <span class="selector-tag">Cannot</span> <span class="selector-tag">set</span> <span class="selector-tag">LC_CTYPE</span> <span class="selector-tag">to</span> <span class="selector-tag">default</span> <span class="selector-tag">locale</span>: <span class="selector-tag">No</span> <span class="selector-tag">such</span> <span class="selector-tag">file</span> <span class="selector-tag">or</span> <span class="selector-tag">directory</span></div><div class="line"><span class="selector-tag">C</span></div><div class="line"><span class="selector-tag">C</span><span class="selector-class">.UTF-8</span></div><div class="line"><span class="selector-tag">en_AG</span></div><div class="line"><span class="selector-tag">en_AG</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_AU</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_BW</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_CA</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_DK</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_GB</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_HK</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_IE</span><span class="selector-class">.utf8</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>解决方案：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">export</span> LC_ALL=C</div></pre></td></tr></table></figure>
<p>Done!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在安装 Shadowsocks 时，使用 &lt;code&gt;pip install&lt;/code&gt; 命令出现了下面这个错误：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="pip" scheme="http://linfuyan.com/tags/pip/"/>
    
      <category term="locale" scheme="http://linfuyan.com/tags/locale/"/>
    
  </entry>
  
  <entry>
    <title>在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网</title>
    <link href="http://linfuyan.com/shadowsocks-with-digitalocean/"/>
    <id>http://linfuyan.com/shadowsocks-with-digitalocean/</id>
    <published>2016-10-22T01:25:00.000Z</published>
    <updated>2016-10-22T03:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果下面这些情形你经常遇到：</p>
<blockquote>
<ol>
<li>经常会折腾各种各样的 Web 应用(Java、nodejs、python等各种语言环境)，但是国内的云服务无法提供对应的环境。</li>
<li>你只是临时的折腾这些应用，并不会长期的运营这些服务。国内的云服务费用昂贵，并需要持续较长时间购买。</li>
<li>虽然可能是临时或者短时间折腾这些服务，你也希望可以有稳定的 IP 或者域名来访问服务。而国内的云服务域名需要备案，而你却懒得折腾这些。</li>
<li>你经常有科学上网的需求，却苦于免费的 VPN 不稳定，稳定的却死贵。</li>
</ol>
</blockquote>
<p>那么，可能 DigitalOcean 是你需要的。请往下继续看。否则，你已经可以关闭这个页面了。</p>
<p>先说说 DigitalOcean：</p>
<blockquote>
<ol>
<li>可以把 DigitalOcean 看做是 VPS，你对上面的环境有完全的支配权，想折腾什么类型的 Web 应用都可以。</li>
<li>DigitalOcean 通过创建 droplet 来快速搭建基础环境，可视化的管理配置，轻而易举的可以与你的域名绑定。从而快速稳定的访问你的服务。</li>
<li>DigitalOcean 最低的收费是每月5美刀，并且按照使用时长(每小时结算)收费。创建的 droplet 如果关闭，则不再继续收费。非常适合需要临时折腾的你。而且，通过这个<strong><a href="https://m.do.co/c/c6ceb25187c4" target="_blank" rel="external">邀请链接</a></strong>进行注册，将自动赠送10美刀。</li>
<li>DigitalOcean 的旧金山节点，国内链接速度快，很适合通过搭建 Shadowsocks 来提供稳定靠谱的科学上网服务。</li>
</ol>
</blockquote>
<h2 id="在-DigitalOcean-上配置-droplet"><a href="#在-DigitalOcean-上配置-droplet" class="headerlink" title="在 DigitalOcean 上配置 droplet"></a>在 DigitalOcean 上配置 droplet</h2><p>注册 DigitalOcean 账户就不说了。需要提醒的是，使用 DigitalOcean 需要绑定银行卡。</p>
<p>新建 droplet 的步骤： </p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_1.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>1. 选择系统镜像，这里选了 ubuntu 16.04</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_2.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>2. 选择配置，这里选$5/月</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_3.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>3. 选择机房位置，旧金山的访问速度比较快</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_4.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>4. 添加 SSH key，用于后面远程登录的验证。具体操作可以看<a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets" target="_blank" rel="external">官方文档</a>或者<a href="http://linfuyan.com/generating-ssh-keys/">生成SSH密钥</a>。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_5.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>5. 这样，不到1分钟时间，就创建好了一个 droplet，带有固定IP，还可以绑定域名。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_6.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<h2 id="安装并配置-Shadowsocks-服务"><a href="#安装并配置-Shadowsocks-服务" class="headerlink" title="安装并配置 Shadowsocks 服务"></a>安装并配置 Shadowsocks 服务</h2><p>在第一步中配置完 ssh key，就可以远程登录到 DigitalOcean 的 droplet 上，直接用 root 用户即可：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@your_droplet_ip</span></div></pre></td></tr></table></figure>
<p>刚才我们的 droplet 环境是 ubuntu 16.04，通过如下命令安装 shadowsocks：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> python-pip</div><div class="line">pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>
<blockquote>
<p>我遇到了 <code>locale.Error: unsupported locale setting</code> 的问题，解决方案看这里：<a href="https://linfuyan.com/locale_error_unsupported_locale_setting/index.html">解决 pip install 时 locale.Error: unsupported locale setting 错误</a></p>
</blockquote>
<p>安装好以后，就可以通过以下指令启动服务：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssserver -p <span class="number">8836</span> -k `password` -m rc4-md5</div><div class="line"></div><div class="line"># 或者可以通过以下指令在后台启动shadowsocks的服务：</div><div class="line">ssserver -p <span class="number">8843</span> -k `password` -m rc4-md5 -d start</div><div class="line">ssserver -p <span class="number">8843</span> -k `password` -m rc4-md5 -d stop</div></pre></td></tr></table></figure>
<p>上面的指令方式不太方便，推荐通过文件配置的方式。新建一个 <code>/etc/shadowsocks.json</code> 文件，内容如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"server"</span>: <span class="string">"your_droplet_ip"</span>,</div><div class="line">    <span class="attr">"server_port"</span>: <span class="number">8388</span>,</div><div class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"your_password"</span>,</div><div class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</div><div class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来使用下面的指令启动服务：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span></div><div class="line"></div><div class="line">#或者在后台运行</div><div class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d start</div><div class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d stop</div></pre></td></tr></table></figure>
<p>以上操作以后，就可以通过各种 Shadowsocks 客户端科学上网啦。稳定又靠谱！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果下面这些情形你经常遇到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;经常会折腾各种各样的 Web 应用(Java、nodejs、python等各种语言环境)，但是国内的云服务无法提供对应的环境。&lt;/li&gt;
&lt;li&gt;你只是临时的折腾这些应用，并不会长期的运营这些
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Shadowsocks" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Shadowsocks/"/>
    
    
      <category term="科学上网" scheme="http://linfuyan.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="DigitalOcean" scheme="http://linfuyan.com/tags/DigitalOcean/"/>
    
      <category term="Shadowsocks" scheme="http://linfuyan.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>形象的讲解 angular 中的 $q 与 promise</title>
    <link href="http://linfuyan.com/$q_and_promise_in_angular/"/>
    <id>http://linfuyan.com/$q_and_promise_in_angular/</id>
    <published>2016-07-06T08:17:10.000Z</published>
    <updated>2016-07-06T08:20:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>promise 不是 angular 首创的，作为一种编程模式，它出现在…1976年，比 javascript 还要古老得多。promise 全称是 Futures and promises。具体的可以参见 <a href="http://en.wikipedia.org/wiki/Futures_and_promises" target="_blank" rel="external">http://en.wikipedia.org/wiki/Futures_and_promises</a>。</p>
<p>而在 javascript 世界中，一个广泛流行的库叫做 Q 地址是 <a href="https://github.com/kriskowal/q" target="_blank" rel="external">https://github.com/kriskowal/q</a>，而 angular 中的 $q 就是从它引入的。 promise 解决的是异步编程的问题，对于生活在同步编程世界中的程序员来说，它可能比较难于理解，这也构成了 angular 入门门槛之一，本文将用生活中的一个例子对此做一个形象的讲解。</p>
<a id="more"></a>
<p>假设有一个家具厂，而它有一个 VIP 客户张先生。</p>
<p>有一天张先生需要一个豪华衣柜，于是，他打电话给家具厂说我需要一个衣柜，回头做好了给我送来，这个操作就叫 $q.defer，也就是延期，因为这个衣柜不是现在要的，所以张先生这是在发起一个可延期的请求。</p>
<p>同时，家具厂给他留下了一个回执号，并对他说：我们做好了会给您送过去，放心吧。这叫做 promise，也就是承诺。</p>
<p>这样，这个 defer 算是正式创建了，于是他把这件事记录在自己的日记上，并且同时记录了回执号，这叫做 deferred，也就是已延期事件。</p>
<p>现在，张先生就不用再去想着这件事了，该做什么做什么，这就是“异步”的含义。</p>
<p>假设家具厂在一周后做完了这个衣柜，并如约送到了张先生家（包邮哦，亲），这就叫做 deferred.resolve (衣柜)，也就是“已解决”。而这时候张先生只要签收一下这个（衣柜）参数就行了，当然，这个“邮包”中也不一定只有衣柜，还可以包含别的东西，比如厂家宣传资料、产品名录等。整个过程中轻松愉快，谁也没等谁，没有浪费任何时间。</p>
<p>假设家具厂在评估后发现这个规格的衣柜我们做不了，那么它就需要 deferred.reject (理由)，也就是“拒绝”。拒绝没有时间限制，可以发生在给出承诺之后的任何时候，甚至可能发生在快做完的时候。而且拒绝时候的参数也不仅仅限于理由，还可以包含一个道歉信，违约金之类的，总之，你想给他什么就给他什么，如果你觉得不会惹恼客户，那么不给也没关系。</p>
<p>假设家具厂发现，自己正好有一个符合张先生要求的存货，它就可以用 $q.when (现有衣柜)来把这个承诺给张先生，这件事就立即被解决了，皆大欢喜，张先生可不在乎你是从头做的还是现有的成品，只会惊叹于你们的效率之高。</p>
<p>假设这个家具厂对客户格外的细心，它还可能通过 deferred.notify (进展情况)给张先生发送进展情况的“通知”。</p>
<p>这样，整个异步流程就圆满完成，无论成功或者失败，张先生都没有往里面投入任何额外的时间成本。</p>
<p>好，我们再扩展一下这个故事：</p>
<p>张先生这次需要做一个桌子，三把椅子，一张席梦思，但是他不希望今天收到个桌子，明天收到个椅子，后天又得签收一次席梦思，而是希望家具厂做好了之后一次性送过来，但是他下单的时候又是分别下单的，那么他就可以重新跟家具厂要一个包含上述三个承诺的新承诺，这就是 $q.all (桌子承诺，椅子承诺，席梦思承诺)，这样，他就不用再关注以前的三个承诺了，直接等待这个新的承诺完成，到时候只要一次性签收了前面的这些承诺就行了。</p>
<blockquote>
<p>原文：<a href="http://www.ngnice.com/posts/126ee9cf6ddb68" target="_blank" rel="external">形象的讲解angular中的$q与promise</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;promise 不是 angular 首创的，作为一种编程模式，它出现在…1976年，比 javascript 还要古老得多。promise 全称是 Futures and promises。具体的可以参见 &lt;a href=&quot;http://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;http://en.wikipedia.org/wiki/Futures_and_promises&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而在 javascript 世界中，一个广泛流行的库叫做 Q 地址是 &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;https://github.com/kriskowal/q&lt;/a&gt;，而 angular 中的 $q 就是从它引入的。 promise 解决的是异步编程的问题，对于生活在同步编程世界中的程序员来说，它可能比较难于理解，这也构成了 angular 入门门槛之一，本文将用生活中的一个例子对此做一个形象的讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web前端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="angular" scheme="http://linfuyan.com/tags/angular/"/>
    
      <category term="$q" scheme="http://linfuyan.com/tags/q/"/>
    
      <category term="promise" scheme="http://linfuyan.com/tags/promise/"/>
    
      <category term="defer" scheme="http://linfuyan.com/tags/defer/"/>
    
      <category term="异步" scheme="http://linfuyan.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>React + React Router + Redux + Webpack 开发 SPA</title>
    <link href="http://linfuyan.com/React+ReactRouter+Redux+Webpack%E6%89%93%E9%80%A0SPA/"/>
    <id>http://linfuyan.com/React+ReactRouter+Redux+Webpack打造SPA/</id>
    <published>2016-06-26T14:30:00.000Z</published>
    <updated>2016-06-26T14:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间要做一个 Web app，于是对 ReactJS 作了些学习。没想到水比较深，由此探索了一套用于开发 SPA 的相关技术： React + React Router + Redex + Webpack。</p>
<p>这里先占个坑，后续再细写。相关的学习资料如下：</p>
<p><a href="http://uprogrammer.cn/react-tutorial-cn/index.html" target="_blank" rel="external">ReactJS 入门教程中文版</a></p>
<p><a href="http://uprogrammer.cn/react-router-cn/index.html" target="_blank" rel="external">React Router 中文文档</a></p>
<p><a href="http://uprogrammer.cn/redux-in-chinese/index.html" target="_blank" rel="external">Redux 中文文档</a></p>
<p><a href="http://uprogrammer.cn/webpack-handbook/index.html" target="_blank" rel="external">Webpack 中文手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间要做一个 Web app，于是对 ReactJS 作了些学习。没想到水比较深，由此探索了一套用于开发 SPA 的相关技术： React + React Router + Redex + Webpack。&lt;/p&gt;
&lt;p&gt;这里先占个坑，后续再细写。相关的学习资料如下：&lt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web前端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactJS" scheme="http://linfuyan.com/tags/ReactJS/"/>
    
      <category term="React Router" scheme="http://linfuyan.com/tags/React-Router/"/>
    
      <category term="Redux" scheme="http://linfuyan.com/tags/Redux/"/>
    
      <category term="Flux" scheme="http://linfuyan.com/tags/Flux/"/>
    
      <category term="Webpack" scheme="http://linfuyan.com/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://linfuyan.com/tags/SPA/"/>
    
  </entry>
  
  <entry>
    <title>实例：使用 cheerio 抓取网页数据，并通过 ejs 模板输出静态页面</title>
    <link href="http://linfuyan.com/grab-web-page-by-cheerio-and-render-via-ejs/"/>
    <id>http://linfuyan.com/grab-web-page-by-cheerio-and-render-via-ejs/</id>
    <published>2016-04-10T02:33:38.000Z</published>
    <updated>2016-04-10T08:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章中，我将使用 cheerio 从 <a href="http://ss.uprogrammer.cn" target="_blank" rel="external">http://ss.uprogrammer.cn</a> 上抓取到免费的 shadowsocks 账号，然后通过 ejs 模板，输出成新的网页。</p>
<p><strong>cheerio</strong> 是 nodejs 的抓取页面模块，为服务器特别定制的，快速、灵活、实施的 jquery 核心实现，适合各种 Web 爬虫程序。详见: <a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="external">https://github.com/cheeriojs/cheerio</a></p>
<p><strong>ejs</strong> 是一个 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。详见： <a href="https://github.com/tj/ejs" target="_blank" rel="external">https://github.com/tj/ejs</a></p>
<p>下面的截图中显示，<a href="http://ss.upgrogrammer.cn" target="_blank" rel="external">http://ss.upgrogrammer.cn</a> 上有一个免费 shadowsocks 账号的展示区域。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/free-shadowsocks.png" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<p>并且通过 chrome 的审查元素，可以看到相关的源码。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/free-shadowsocks-2.png" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<p>那么，接下来，我们就要抓取这部分内容中的免费 shadowsocks 账号信息。</p>
<h2 id="新建-nodejs-项目，并安装相关依赖"><a href="#新建-nodejs-项目，并安装相关依赖" class="headerlink" title="新建 nodejs 项目，并安装相关依赖"></a>新建 nodejs 项目，并安装相关依赖</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> init</div><div class="line">...</div><div class="line"><span class="built_in">npm</span> install cheerio ejs --save</div></pre></td></tr></table></figure>
<p>以下图片显示了通过 <code>npm init</code> 命令创建 nodejs 项目的过程：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/npm_init_project.gif" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<h2 id="获取-http-ss-upgrammer-cn-完整网页内容"><a href="#获取-http-ss-upgrammer-cn-完整网页内容" class="headerlink" title="获取 http://ss.upgrammer.cn 完整网页内容"></a>获取 <a href="http://ss.upgrammer.cn" target="_blank" rel="external">http://ss.upgrammer.cn</a> 完整网页内容</h2><p>在使用 cheerio 来抓取我们所需的内容之前，我们要通过 http 模块，将完整页面先获取到。</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">	http.get(<span class="built_in">url</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">		<span class="built_in">var</span> data = <span class="string">""</span>;</div><div class="line">		res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">			data += chunk;</div><div class="line">		&#125;);</div><div class="line">		res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			callback(data);</div><div class="line">		&#125;)</div><div class="line">	&#125;).on(<span class="string">"err"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(e);</div><div class="line">		callback(<span class="literal">null</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上的代码片段通过 GET 方法获取对应 url 的数据，并通过 callback 传回。</p>
<h2 id="从获取到的完整页面中抓取免费账号信息"><a href="#从获取到的完整页面中抓取免费账号信息" class="headerlink" title="从获取到的完整页面中抓取免费账号信息"></a>从获取到的完整页面中抓取免费账号信息</h2><p>通过在浏览器中查看源代码(具体内容其实也就是我们通过上面的 <code>download</code> 函数返回的结构)，我们发现，这个页面结构是非常简单的。</p>
<ol>
<li>所有的免费账号信息都在 id 为 <code>account_container</code> 的 <code>&lt;div&gt;</code> 标签中。</li>
<li>所有的单条账号信息，都在 <code>&lt;div class=&quot;col-md-4 text-center&quot;&gt;...&lt;/div&gt;</code> 中。</li>
<li>单条账号中的信息，是连续的6个<code>&lt;h4&gt;</code>标签，按照服务器地址、端口号、密码、加密方式、状态、说明的方式存在。 </li>
</ol>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">download(<span class="string">"http://ss.uprogrammer.cn/"</span>, function(<span class="name">data</span>) &#123;</div><div class="line">	if (!data) &#123;</div><div class="line">		console.log('no data found')<span class="comment">;</span></div><div class="line">		return<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    var accounts = []<span class="comment">;</span></div><div class="line">    </div><div class="line">	$ = cheerio.load(<span class="name">data</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">    // 通过 cheerio 的选择器获取免费账号信息单元</div><div class="line">	var ss = $('#account_container &gt; .col-md-4')<span class="comment">;</span></div><div class="line">	</div><div class="line">	for (<span class="name">var</span> i = <span class="number">0</span><span class="comment">; i &lt; ss.length; i++) &#123;</span></div><div class="line">		var s = &#123;&#125;<span class="comment">;</span></div><div class="line">		</div><div class="line">		// 解析服务器</div><div class="line">		var server = $(<span class="name">ss</span>[i]).children().first()<span class="comment">;</span></div><div class="line">		s['server'] = server.text().substr(<span class="number">7</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['server'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析端口</div><div class="line">		var port = $(<span class="name">server</span>).next()<span class="comment">;</span></div><div class="line">		s['port'] = port.text().substr(<span class="number">3</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['port'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析密码</div><div class="line">		var password = $(<span class="name">port</span>).next()<span class="comment">;</span></div><div class="line">		s['password'] = password.text().substr(<span class="number">4</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['password'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析加密方式</div><div class="line">		var encrypt = $(<span class="name">password</span>).next()<span class="comment">;</span></div><div class="line">		s['encrypt'] = encrypt.text().substr(<span class="number">5</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['encrypt'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析状态</div><div class="line">		var status = $(<span class="name">encrypt</span>).next()<span class="comment">;</span></div><div class="line">		s['status'] = status.text().substr(<span class="number">3</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['status'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析说明</div><div class="line">		var tip = $(<span class="name">status</span>).next()<span class="comment">;</span></div><div class="line">		s['tip'] = tip.text()<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['tip'])<span class="comment">;</span></div><div class="line">		</div><div class="line">		account.push(<span class="name">s</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="string">"==="</span>)<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>主要的代码片段如上，最终 <code>account</code> 变量中将保存所有的账号信息。</p>
<h2 id="将数据通过-ejs-模板渲染成新的页面"><a href="#将数据通过-ejs-模板渲染成新的页面" class="headerlink" title="将数据通过 ejs 模板渲染成新的页面"></a>将数据通过 ejs 模板渲染成新的页面</h2><p>我们需要定义一个模板文件 <code>template.ejs</code>，如下：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实例：使用 cheerio 抓取网页数据，并通过 ejs 模板输出静态页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">      <span class="vbscript">&lt;% servers.forEach(<span class="keyword">function</span>(<span class="built_in">server</span>)&#123; %&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>服务器地址:<span class="vbscript">&lt;%= <span class="built_in">server</span>.<span class="built_in">server</span> %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>端口:<span class="vbscript">&lt;%= <span class="built_in">server</span>.port %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>密码:<span class="vbscript">&lt;%= <span class="built_in">server</span>.password %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>加密方式:<span class="vbscript">&lt;%= <span class="built_in">server</span>.encrypt %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>状态:<span class="vbscript">&lt;%= <span class="built_in">server</span>.status %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="vbscript">&lt;%= <span class="built_in">server</span>.tip %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="vbscript">&lt;% &#125;) %&gt;</span><span class="xml"></span></div><div class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是一个非常简单的模板文件，只是说明传递数据与模板解析的功能。其中将接收名为 <code>servers</code> 的参数。</p>
<p>下面我们定义一个 <code>render</code> 函数，读取 <code>template.ejs</code> 模板文件，并根据传入的 <code>servers</code> 参数进行渲染，输出到 <code>index.html</code> 中。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(accounts)</span> </span>&#123;</div><div class="line">	fs.readFile(<span class="string">'./template.ejs'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e, v)</span> </span>&#123;</div><div class="line">      <span class="keyword">var</span> ret = v.toString();</div><div class="line">        </div><div class="line">      <span class="keyword">var</span> options = &#123;servers: accounts&#125;</div><div class="line">      <span class="keyword">var</span> template = ejs.render(ret, options);</div><div class="line">      fs.writeFile(<span class="string">'./index.html'</span>, template, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;         </div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK。完成上面的过程，整个程序结构如下：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/demo-cheerio-ejs-structure.png" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<p>最后，在项目根目录中执行 <code>node index.js</code>， 正常在终端中可以看到日志输出，并生成 <code>index.html</code> 文件。通过浏览器打开 <code>index.html</code> 就可以验收成果啦。</p>
<p>完整的源码见：<a href="https://github.com/linfuyan/demo-cheerio-ejs" target="_blank" rel="external">https://github.com/linfuyan/demo-cheerio-ejs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章中，我将使用 cheerio 从 &lt;a href=&quot;http://ss.uprogrammer.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ss.uprogrammer.cn&lt;/a&gt; 上抓取到免费的 shadowsocks 账
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://linfuyan.com/tags/nodejs/"/>
    
      <category term="cheerio" scheme="http://linfuyan.com/tags/cheerio/"/>
    
      <category term="网页抓取" scheme="http://linfuyan.com/tags/%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/"/>
    
      <category term="爬虫" scheme="http://linfuyan.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="ejs" scheme="http://linfuyan.com/tags/ejs/"/>
    
      <category term="模板" scheme="http://linfuyan.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="shadowsocks" scheme="http://linfuyan.com/tags/shadowsocks/"/>
    
      <category term="科学上网" scheme="http://linfuyan.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>如何通过 JS 来修改浏览器地址</title>
    <link href="http://linfuyan.com/manipulating-url-using-javascript-without-freshing-the-page/"/>
    <id>http://linfuyan.com/manipulating-url-using-javascript-without-freshing-the-page/</id>
    <published>2016-04-04T07:07:03.000Z</published>
    <updated>2016-04-04T09:25:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到 jsdig.com 上的效果，发现随着输入的变化，浏览器地址栏中的地址会发生变化，很好奇。效果如下图：</p>
<p><img src="https://raw.githubusercontent.com/jaywcjlove/FED/gh-pages/img/fed.gif" alt="jsdig"></p>
<p>所以找了些资料。</p>
<p>现在的浏览器，可以在不刷新页面的情况下修改浏览器 URL。在浏览过程中，可以将浏览历史储存起来，当点击浏览器后退按钮的时候，还可以从浏览历史上获得回退的信息。主要的工作原理呢，是通过 History 对象的 pushState() 实现的。</p>
<p>直接上测试的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"counter"</span>&gt;</span>点击按钮查看变化<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"update()"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  	<span class="keyword">var</span> counter = <span class="built_in">document</span>.getElementById(<span class="string">"counter"</span>);</div><div class="line">   	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  		<span class="keyword">var</span> stateObject = &#123;<span class="attr">id</span>: i&#125;;</div><div class="line">		<span class="keyword">var</span> title = <span class="string">"Wow Title "</span>+i;</div><div class="line">		<span class="keyword">var</span> newUrl = <span class="string">"?count="</span>+i;</div><div class="line">		history.pushState(stateObject, title, newUrl);</div><div class="line">		counter.innerHTML = <span class="built_in">window</span>.location.href;</div><div class="line">		i++;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	  readState(event.state);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">readState</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	  counter.innerHTML = data.id;</div><div class="line">	&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接把上面的代码保存成静态网页，然后放到 web 服务器下访问就可以了。具体画面如下：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/via_js_update_window_location_href.gif" alt="如何通过 JS 来修改浏览器地址"></p>
<p>参考：</p>
<p><a href="https://hasin.me/2013/10/16/manipulating-url-using-javascript-without-freshing-the-page/" target="_blank" rel="external">Manipulating browser URL using Javascript without refreshing the page</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到 jsdig.com 上的效果，发现随着输入的变化，浏览器地址栏中的地址会发生变化，很好奇。效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jaywcjlove/FED/gh-pages/img/f
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="JavaScript" scheme="http://linfuyan.com/tags/JavaScript/"/>
    
      <category term="浏览器地址" scheme="http://linfuyan.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 npm 打包发布 nodejs 程序包</title>
    <link href="http://linfuyan.com/publish_your_module_to_npm/"/>
    <id>http://linfuyan.com/publish_your_module_to_npm/</id>
    <published>2016-04-04T02:10:10.000Z</published>
    <updated>2016-04-04T02:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天写了个 gitbook 的 cnzz 统计插件，<a href="https://github.com/linfuyan/gitbook-plugin-cnzz" target="_blank" rel="external">源码见这里</a>，想要发布出来，再通过 <code>npm install</code> 的形式安装。</p>
<p>具体的步骤如下：</p>
<p>1. 在 npm 官网 <a href="https://www.npmjs.org" target="_blank" rel="external">https://www.npmjs.org</a> 申请一个账号，并且进行必要的验证。</p>
<blockquote>
<p>刚开始用的是网易邮箱注册，但似乎收不到官方的验证邮件，后来改用了 Gmail，可以注册了。</p>
</blockquote>
<p>2. 增加刚申请完成的用户名到 npm 环境中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm --registry <span class="string">http:</span><span class="comment">//registry.npmjs.org adduser</span></div><div class="line"><span class="string">Username:</span> your name</div><div class="line"><span class="string">Password:</span> your password</div><div class="line"><span class="string">Email:</span> (<span class="keyword">this</span> IS <span class="keyword">public</span>) yourmail<span class="meta">@host</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里要注意所使用的 registry。由于国内的网络环境，之前将默认的 registry 设置成了淘宝的 npm 源。这里需要调整回来。</p>
</blockquote>
<p>3. 进入到你的 npm 项目中，通过 <code>npm publish</code> 发布。</p>
<p>4. 再新建一个项目 nodejs 项目，通过 <code>npm install</code> 验证是否能够安装。</p>
<p>我在发布过程中，遇到了如下问题：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm ERR! no_perms Private mode enable, only admin can publish <span class="keyword">this</span> <span class="keyword">module</span>: gitbook-plugin-cnzz</div></pre></td></tr></table></figure>
<p>原因就是我默认使用的淘宝的 npm 源，添加了用户，但权限不对，在发布时同样添加 registry 就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天写了个 gitbook 的 cnzz 统计插件，&lt;a href=&quot;https://github.com/linfuyan/gitbook-plugin-cnzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码见这里&lt;/a&gt;，想要发布出来，再通过 &lt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://linfuyan.com/tags/nodejs/"/>
    
      <category term="npm" scheme="http://linfuyan.com/tags/npm/"/>
    
      <category term="打包" scheme="http://linfuyan.com/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="发布" scheme="http://linfuyan.com/tags/%E5%8F%91%E5%B8%83/"/>
    
      <category term="gitbook" scheme="http://linfuyan.com/tags/gitbook/"/>
    
      <category term="cnzz" scheme="http://linfuyan.com/tags/cnzz/"/>
    
  </entry>
  
  <entry>
    <title>在 IntelliJ IDEA 上创建基于 Gradle 的 SpringMVC 实例</title>
    <link href="http://linfuyan.com/create_springmvc_project_base_on_gradle_use_intellij_idea/"/>
    <id>http://linfuyan.com/create_springmvc_project_base_on_gradle_use_intellij_idea/</id>
    <published>2016-03-22T03:15:02.000Z</published>
    <updated>2016-03-22T03:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>注意：需要 IntelliJ IDEA 的 Ultimate 版本，用 Community 版本是不行的，因为需要支持 Web 项目。 Ultimate 版本是收费的，网上有破解。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/intellij_idea.png" alt="IntelliJ IDEA 版本"></p>
<p>我把具体的过程录制成了视频：</p>
<iframe frameborder="0" width="100%" height="400" src="http://v.qq.com/iframe/player.html?vid=r0188ue1mgk&tiny=0&auto=0" allowfullscreen></iframe>

<p>如果想要看高清的视频，可以扫描页面上的公众号二维码，关注并回复”firstspringmvc”来获取原始视频链接。</p>
<p>参考：</p>
<p><a href="http://note.youdao.com/share/web/file.html?id=f6818219990d6a031ef8b237e12c3ff4&amp;type=note" target="_blank" rel="external">intellij + gradle + tomcat + 热加载 + 测试 搭建java web开发环境</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意：需要 IntelliJ IDEA 的 Ultimate 版本，用 Community 版本是不行的，因为需要支持 Web 项目。 Ultimate 版本是收费的，网上有破解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7sbydj.com1.z0.glb.clo
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JavaWeb" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JavaWeb/"/>
    
    
      <category term="Gradle" scheme="http://linfuyan.com/tags/Gradle/"/>
    
      <category term="IntelliJ IDEA" scheme="http://linfuyan.com/tags/IntelliJ-IDEA/"/>
    
      <category term="SpringMVC" scheme="http://linfuyan.com/tags/SpringMVC/"/>
    
      <category term="Spring" scheme="http://linfuyan.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mac OSX 10.11 通过 HomeBrew 安装 MySQL</title>
    <link href="http://linfuyan.com/install_mysql_via_brew_on_osx_eicapitan/"/>
    <id>http://linfuyan.com/install_mysql_via_brew_on_osx_eicapitan/</id>
    <published>2016-03-01T13:00:00.000Z</published>
    <updated>2016-03-08T14:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac OSX 升级到 EICapitan 之后，原来安装的 MySQL 就多多少少出现了问题。于是决定重装：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$ brew <span class="keyword">install</span> mysql</div><div class="line">==&gt; Installing dependencies <span class="keyword">for</span> mysql: openssl</div><div class="line">==&gt; Installing mysql dependency: openssl</div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/openssl<span class="number">-1.0</span><span class="number">.2</span>e_1.el_capitan</div><div class="line">######################################################################## <span class="number">100.0</span>%</div><div class="line">==&gt; Pouring openssl<span class="number">-1.0</span><span class="number">.2</span>e_1.el_capitan.bottle.tar.gz</div><div class="line">==&gt; Caveats</div><div class="line">A CA <span class="keyword">file</span> has been bootstrapped <span class="keyword">using</span> certificates <span class="keyword">from</span> the <span class="keyword">system</span></div><div class="line">keychain. <span class="keyword">To</span> <span class="keyword">add</span> additional certificates, place .pem files <span class="keyword">in</span></div><div class="line">  /usr/<span class="keyword">local</span>/etc/openssl/certs</div><div class="line"></div><div class="line"><span class="keyword">and</span> run</div><div class="line">  /usr/<span class="keyword">local</span>/opt/openssl/<span class="keyword">bin</span>/c_rehash</div><div class="line"></div><div class="line">This formula <span class="keyword">is</span> keg-<span class="keyword">only</span>, which means it was <span class="keyword">not</span> symlinked <span class="keyword">into</span> /usr/local.</div><div class="line"></div><div class="line">Apple has deprecated <span class="keyword">use</span> <span class="keyword">of</span> OpenSSL <span class="keyword">in</span> favor <span class="keyword">of</span> its own TLS <span class="keyword">and</span> crypto libraries</div><div class="line"></div><div class="line">Generally there <span class="keyword">are</span> <span class="keyword">no</span> consequences <span class="keyword">of</span> this <span class="keyword">for</span> you. <span class="keyword">If</span> you <span class="keyword">build</span> your</div><div class="line">own software <span class="keyword">and</span> it requires this formula, you<span class="string">'ll need to add to your</span></div><div class="line">build variables:</div><div class="line"></div><div class="line">    LDFLAGS:  -L/usr/local/opt/openssl/lib</div><div class="line">    CPPFLAGS: -I/usr/local/opt/openssl/include</div><div class="line"></div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/openssl/1.0.2e_1: 465 files, 11.9M</div><div class="line">==&gt; Installing mysql</div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/mysql-5.7.10.el_capitan.bot</div><div class="line">######################################################################## 100.0%</div><div class="line">==&gt; Pouring mysql-5.7.10.el_capitan.bottle.2.tar.gz</div><div class="line">==&gt; /usr/local/Cellar/mysql/5.7.10/bin/mysqld --initialize-insecure --user=lfy -</div><div class="line">==&gt; Caveats</div><div class="line">We've installed your MySQL <span class="keyword">database</span> <span class="keyword">without</span> a root password. <span class="keyword">To</span> secure it run:</div><div class="line">    mysql_secure_installation</div><div class="line"></div><div class="line"><span class="keyword">To</span> <span class="keyword">connect</span> run:</div><div class="line">    mysql -uroot</div><div class="line"></div><div class="line"><span class="keyword">To</span> have launchd <span class="keyword">start</span> mysql <span class="keyword">at</span> login:</div><div class="line">  <span class="keyword">ln</span> -sfv /usr/<span class="keyword">local</span>/opt/mysql<span class="comment">/*.plist ~/Library/LaunchAgents</span></div><div class="line">Then to load mysql now:</div><div class="line">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div><div class="line">Or, if you don't want/need launchctl, you can just run:</div><div class="line">  mysql.server start</div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/mysql/5.7.10: 12,677 files, 433.2M</div></pre></td></tr></table></figure>
<p>直接使用 <code>mysql -uroot</code>，出现如下错误提示：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ERROR </span>2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock'</div></pre></td></tr></table></figure>
<p>原因是 mysql 服务没有启动，故尝试 <code>mysql.server start</code>，结果如下，依然出错。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql.server <span class="keyword">start</span></div><div class="line"><span class="keyword">Starting</span> MySQL</div><div class="line">. <span class="keyword">ERROR</span>! The <span class="keyword">server</span> quit <span class="keyword">without</span> updating PID <span class="keyword">file</span> (/usr/<span class="keyword">local</span>/<span class="keyword">var</span>/mysql/bogon.pid).</div></pre></td></tr></table></figure>
<p>最终的处理方式是：</p>
<ol>
<li>通过 <code>mysqld</code> 直接启动 mysql。</li>
<li>由于 HomeBrew 安装的 mysql 默认root账户没有设置密码，故按照提示输入 <code>mysql_secure_installation</code> 来设置密码。</li>
<li>设置完成以后，就可以正常操作 mysql 了。</li>
</ol>
<p>HomeBrew 安装的 mysql 的数据存储位置为 <code>/usr/local/var/mysql</code>。 可以通过 <code>find / -name databasename</code> 的方式根据数据库名称找到具体位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Mac OSX 升级到 EICapitan 之后，原来安装的 MySQL 就多多少少出现了问题。于是决定重装：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="LAMP" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/LAMP/"/>
    
    
      <category term="MySQL" scheme="http://linfuyan.com/tags/MySQL/"/>
    
      <category term="Mac" scheme="http://linfuyan.com/tags/Mac/"/>
    
      <category term="HomeBrew" scheme="http://linfuyan.com/tags/HomeBrew/"/>
    
      <category term="OSX" scheme="http://linfuyan.com/tags/OSX/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X 上安装 MongoDB</title>
    <link href="http://linfuyan.com/install-mongodb-on-mac-os-x/"/>
    <id>http://linfuyan.com/install-mongodb-on-mac-os-x/</id>
    <published>2015-12-21T09:02:00.000Z</published>
    <updated>2015-12-21T09:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="external">Install MongoDB on OS X</a></p>
<p><strong>Mac OS X 的系统版本：EI Capitan (10.11.1)</strong></p>
<p>这里采用 HomeBrew 来安装 MongoDB。</p>
<a id="more"></a> 
<p>1. 升级 HomeBrew 到最新</p>
<blockquote>
<p>brew update</p>
</blockquote>
<p>2. 完成以后，通过以下命令安装</p>
<blockquote>
<p>brew install mongodb</p>
</blockquote>
<p>正常情况下按照上面步骤就可以完成安装，但是我这里遇到了一些问题。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Error: The `brew link` step did <span class="keyword">not</span> complete successfully</div><div class="line">The formula built, <span class="keyword">but</span> <span class="keyword">is</span> <span class="keyword">not</span> symlinked <span class="keyword">into</span> /usr/<span class="keyword">local</span></div><div class="line">Could <span class="keyword">not</span> symlink .</div><div class="line">/usr/<span class="keyword">local</span>/opt <span class="keyword">is</span> <span class="keyword">not</span> writable.</div><div class="line"></div><div class="line">You can <span class="keyword">try</span> again using:</div><div class="line">  brew link scons</div></pre></td></tr></table></figure>
<p>问题的原因就是 <code>/usr/local/opt</code> 目录不可写，正常情况下，在目前的 Mac OS X EI Capitan 上 <code>/usr/local</code> 是可写的，但其他的应用是可以修改其读写权限的。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Error: The /usr/local directory is not writable.</div><div class="line">Even if this directory was writable when you installed Homebrew, other</div><div class="line">software may <span class="keyword">change</span> permissions <span class="keyword">on</span> this directory. <span class="keyword">Some</span> <span class="keyword">versions</span> <span class="keyword">of</span> the</div><div class="line"><span class="string">"InstantOn"</span> component <span class="keyword">of</span> Airfoil <span class="keyword">are</span> known <span class="keyword">to</span> <span class="keyword">do</span> this.</div><div class="line"></div><div class="line">You should probably <span class="keyword">change</span> the ownership <span class="keyword">and</span> permissions <span class="keyword">of</span> /usr/<span class="keyword">local</span></div><div class="line">back <span class="keyword">to</span> your <span class="keyword">user</span> account.</div><div class="line">  sudo chown -R $(whoami):<span class="keyword">admin</span> /usr/<span class="keyword">local</span></div></pre></td></tr></table></figure>
<p>按照提示修改一下问题，重新 <code>brew install mongodb</code> 即可。如提示需要 <code>brew link</code>， 则按照提示操作。</p>
<p>3. 安装完成最终会出现如下提示来以不同方式开启 MongoDB。根据你的需要操作即可。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">lfys-MacBook-Pro: lfy$ brew install mongodb</div><div class="line">==&gt; Downloading https:<span class="comment">//homebrew.bintray.com/bottles/mongodb-3.2.0.el_capitan.bottle.tar.gz</span></div><div class="line">Already downloaded: /Library/Caches/Homebrew/mongodb-<span class="number">3.2</span>.<span class="number">0</span><span class="selector-class">.el_capitan</span><span class="selector-class">.bottle</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">==&gt; Pouring mongodb-<span class="number">3.2</span>.<span class="number">0</span><span class="selector-class">.el_capitan</span><span class="selector-class">.bottle</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">==&gt; Caveats</div><div class="line">To have launchd start mongodb at login:</div><div class="line">  ln -sfv /usr/local/opt/mongodb<span class="comment">/*.plist ~/Library/LaunchAgents</span></div><div class="line">Then to load mongodb now:</div><div class="line">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist</div><div class="line">Or, if you don't want/need launchctl, you can just run:</div><div class="line">  mongod --config /usr/local/etc/mongod.conf</div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/mongodb/3.2.0: 17 files, 208M</div></pre></td></tr></table></figure>
<p>这里我执行了下面的命令：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config <span class="regexp">/usr/</span>local<span class="regexp">/etc/m</span>ongod.conf</div></pre></td></tr></table></figure>
<p>4. 在新的终端窗口中输入 <code>mongo</code> 就可以进行 MongoDB 的操作了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/&quot;&gt;Install MongoDB on OS X&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mac OS X 的系统版本：EI Capitan (10.11.1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里采用 HomeBrew 来安装 MongoDB。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="MongoDB" scheme="http://linfuyan.com/tags/MongoDB/"/>
    
      <category term="Mac" scheme="http://linfuyan.com/tags/Mac/"/>
    
      <category term="HomeBrew" scheme="http://linfuyan.com/tags/HomeBrew/"/>
    
  </entry>
  
  <entry>
    <title>技术高手如何炼成？</title>
    <link href="http://linfuyan.com/how-to-be-a-niubility-engineer/"/>
    <id>http://linfuyan.com/how-to-be-a-niubility-engineer/</id>
    <published>2015-12-01T04:09:37.000Z</published>
    <updated>2015-12-02T08:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>著作权归作者所有。<br>商业转载请联系作者获得授权，非商业转载请注明出处。<br>作者：郑昀<br>链接：<a href="http://zhuanlan.zhihu.com/zhengyun/20270317" target="_blank" rel="external">http://zhuanlan.zhihu.com/zhengyun/20270317</a><br>来源：知乎</p>
</blockquote>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/bingshanyijiao.jpg" alt="技术高手如何炼成？"></p>
<p>面试的时候，我会问面试者，你日常如何构建自己的知识体系，如何让自己更高更快更强？多数工程师并没有深入地思考过这个问题，基本上是零敲碎打，随机性大。本着不能让你白来一趟的精神，好为人师的我会娓娓道来：</p>
<h2 id="第一阶段-认真构建完整的知识体系"><a href="#第一阶段-认真构建完整的知识体系" class="headerlink" title="第一阶段 认真构建完整的知识体系"></a>第一阶段 认真构建完整的知识体系</h2><p>十几年前我投身软件行业的时候，光是讲解数据库原理、操作系统、TCP/IP、组网、算法等等基础知识的英文原版书摞起来就等身，认认真真看完，各种上手实践，入行后，读遍 C++ 各种经典著作，读遍各种协议原文，认认真真打基础。很多工程师都说自己平常就是在某些 IT 门户上看看推荐的博文或新闻，我说这属于典型的零敲碎打，不够刺激。</p>
<p>聊到这时，我会举一个例子，<strong>为什么要阅读长篇小说，因为中短篇小说就像用针扎你，而长篇小说就像把你装进一个沙袋里吊起来，从四面八方用狼牙棒打你，酣畅淋漓。</strong>构建可用的知识体系，就得读书，书是有体系结构的，你关心不关心，现阶段你用到用不到，它都讲到了，从头到尾看几遍，针扎得透透的。</p>
<p>何谓知识体系？</p>
<p>几年前，前支付宝架构师姚建东曾经在我们公司做过技术人员如何规划自己的分享讲座，他是这么论述的：</p>
<p>技术与技巧包括：</p>
<ul>
<li>计算机基础理论<ul>
<li>计算机模型：内存/IO/时钟/CPU……</li>
</ul>
</li>
<li>算法</li>
<li>专项技术领域：<ul>
<li>数据挖掘</li>
<li>数据管理</li>
<li>智能推荐</li>
<li>搜索</li>
<li>……</li>
</ul>
</li>
<li>语言与工具<ul>
<li>语言与相关体系</li>
<li>开发工具，分析工具，代码管理工具</li>
<li>HTML/CSS/JS/Ajax</li>
<li>常用框架与第三方类库</li>
</ul>
</li>
<li>调试与测试<ul>
<li>调试方法和哲学</li>
<li>定位问题</li>
<li>BUG管理工具</li>
<li>单元测试</li>
<li>集成测试</li>
<li>性能测试</li>
<li>安全测试</li>
<li>兼容性测试与方法</li>
<li>JS/Ajax测试与方法</li>
<li>服务层测试</li>
<li>Web层测试</li>
</ul>
</li>
<li>网络与系统<ul>
<li>TCP/IP协议与模型，HTTP/SMTP等协议</li>
<li>Linux系统，网络分析工具，系统分析工具</li>
<li>容量，流量与负载均衡</li>
<li>应用部署、规范、规划</li>
<li>安全</li>
<li>监控与故障分析</li>
<li>磁盘与存储</li>
<li>Shell</li>
<li>DNS与域名</li>
<li>缓存，反向代理</li>
<li>图片服务器（海量小文件）</li>
</ul>
</li>
<li>需求挖掘与分析<ul>
<li>需求文档格式</li>
<li>需求访谈</li>
<li>需求分析方法，需求分析工具</li>
<li>领域知识与经验</li>
</ul>
</li>
<li>系统分析与设计<ul>
<li>UML语言与模型</li>
<li>分析模式</li>
<li>设计模式，领域驱动</li>
<li>系统分析文档格式</li>
<li>系统设计文档格式</li>
<li>功能性需求与非功能性需求</li>
</ul>
</li>
<li>数据与系统<ul>
<li>数据库</li>
<li>可伸缩策略，扩展策略，备份，容灾，性能，安全，高可用……</li>
<li>数据设计与范式，SQL/NoSQL，Cache，分布式文件</li>
</ul>
</li>
<li>架构设计<ul>
<li>架构模式，典型互联网公司架构演进历史</li>
<li>架构原则，常用策略</li>
<li>架构设计方法</li>
<li>非功能性理解<ul>
<li>扩展性</li>
<li>伸缩性</li>
<li>稳定性</li>
<li>一致性</li>
<li>性能</li>
<li>吞吐量</li>
</ul>
</li>
<li>容量预测与规划</li>
<li>架构体系与相关技术</li>
</ul>
</li>
<li>过程与管理<ul>
<li>分析过程</li>
<li>研发过程</li>
<li>评审过程</li>
<li>测试过程</li>
<li>发布过程</li>
<li>回滚过程</li>
<li>文档管理</li>
<li>知识管理</li>
<li>项目管理</li>
</ul>
</li>
</ul>
<p>以上其实就是一份从业基础知识清单，你可以按图索骥，阅读相关书籍。</p>
<h2 id="第二阶段-顺着一个Topic钻进去，锻炼自己的预研能力"><a href="#第二阶段-顺着一个Topic钻进去，锻炼自己的预研能力" class="headerlink" title="第二阶段 顺着一个Topic钻进去，锻炼自己的预研能力"></a>第二阶段 顺着一个Topic钻进去，锻炼自己的预研能力</h2><p>无论公司业务还是自己喜欢做的事，都可以抽象出通用性课题，然后以做论文的方式杀进去。<strong>这个事情得反复操练，有意识操练。</strong></p>
<p>做事方式为：</p>
<ol>
<li>抽象出 Topic——如分布式锁，分布式并行计算引擎，防CSRF的FormToken自动生成框架，定时任务管理与调度平台，分布式跟踪，等等</li>
<li>向功课好的学生学习——有针对性地深入了解业界其他公司是如何分析问题和解决问题的，汇总各种方案，站在巨人的肩膀上</li>
<li>分析特定应用场景，技术选型</li>
<li>兼顾高可用性和可伸缩，做设计评审</li>
<li>做测试自证靠谱，梳理知识点，开技术分享会</li>
<li>上线商用，总结经验教训，开经验分享会</li>
</ol>
<p>其中一个重点是汇总和分享。05年时，应电信级统一消息业务需要，我去研究了 SIP 协议，做了各种试验，分析报文，写了一系列的幻灯片，做了公开分享，一时间还颇受欢迎：</p>
<ol>
<li>SIP_to_Freshman_by_zhengyun.ppt</li>
<li>SIP之穿越NAT_by_zhengyun.ppt</li>
<li>SIP体系架构讲义及消息交互演示_by_zhengyun.ppt</li>
<li>SIP多方会话消息之实例讲解_by_zhengyun.ppt</li>
<li>SIP安全框架之认证[NTLM和Kerberos]_by_zhengyun.ppt</li>
<li>SIP消息之逐项讲解_by_zhengyun.ppt</li>
</ol>
<p>为什么要写出来、讲出来呢？因为有一个学习金字塔理论，如下图所示：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/xuexijinzita.png" alt="学习金字塔"></p>
<p>我们读过的事情能够记住学习内容的10%，<br>我们听过的事情能够记住20%，<br>我们看过的事情能够记住30%，<br>我们听过和看过的事情能够记住50%——如看影像/看展览/看演示/现场观摩，<br>我们说过的事情能够记住70%——如参与讨论/发言，<br><strong>我们说过和做过的事情能够记住90%——如做报告，给别人讲，亲身体验，动手做。</strong></p>
<p>这也就是我在《<a href="http://www.cnblogs.com/zhengyun_ustc/p/rightThings.html" target="_blank" rel="external">窝窝研发过去几年做对了哪些事</a>》中阐述的管理方法：我们从入职之后就有意识地训练大家，让大家能够公开陈述、清晰表达。所以，试用期内，新人必须做一次技术分享和一次技术评审，面对各方的 challenge；预研的中间和结尾都要有分享会；平时也要定期组织技术讲座。</p>
<h2 id="第三阶段-疯狂回答技术问题"><a href="#第三阶段-疯狂回答技术问题" class="headerlink" title="第三阶段 疯狂回答技术问题"></a>第三阶段 疯狂回答技术问题</h2><p>知识体系慢慢构建，与业务相关的抽象 Topic 也在探索中。但这还不够。因为你亲身接触到的世界太小，可能不足以构成挑战，你可能意识不到自己缺多少知识和技能，不利于你分析问题、提出问题和解决问题的能力培养。</p>
<p>所以，要主动出击：疯狂回答问题。</p>
<p>我曾经在入行的头几年里几乎把我关注的垂直领域（包括语言领域和业务领域）里的所有问题都回答了一遍。我对外宣扬知无不言言无不尽，放出邮件地址和 MSN（那时候 MSN 很高大上），很多网友都会发邮件或者加我好友，问各种开发疑难问题，平均每天都有几个，然后我把解决问题的过程写成微软 KB（KnowledgeBase） 文体发表在我的博客上。</p>
<p>你想想看，工作中的问题你平均每隔几天才能遇到一个，而这么做，每天你都会遇到几个乃至于十几个，第一让你脑力激荡，第二接触到更多新知。05年到06年期间，我因工作需要学习了 JavaME（或古老的称呼 J2ME），早年间 Symbian 手机上的客户端开发。那段时间我天天扫中文论坛的帖子，力求回答所有问题，尤其是那些 BUG 或故障。对于那些暂时没有人解决的，如流媒体实时播放，如仿 OperaMini 二级菜单界面，都上下求索，最后放出思路以及源码。</p>
<p>同时，我经常整理常见问题，梳理成册并发布。譬如我整理过的 J2ME 疑难问题：</p>
<ol>
<li>[J2ME Q&amp;A]真机报告MontyThread -n的错误之解释</li>
<li>[J2MEQ&amp;A]WTK初始化WMAClient报错XXX has no IP address的解释</li>
<li>[J2ME Q&amp;A]untrusted domain is not configured问题回应</li>
<li>[J2ME]“Cannot open socket for LIME events”错误解决</li>
</ol>
<p>几个月后，我成为 J2ME 中文论坛超级版主。通过这个历程，我想告诉大家，回答网友问题，技巧得当的话，比如别老是重复回答新手问题，试着攻克那些疑难问题，或者离奇故障，绝对不会浪费你的时间。为什么？</p>
<p>因为你要信奉：</p>
<blockquote>
<p><strong>你学过的每一样东西，你遭受的每一次苦难，都会在你一生中的某个时候派上用场。</strong><br>——佩内洛普·菲兹杰拉德 《离岸》</p>
<p>Everything that you’ve learnt and all the hardships you’ve suffered will all come in handy at some point in your life.</p>
</blockquote>
<h2 id="第四阶段-RCA-总结"><a href="#第四阶段-RCA-总结" class="headerlink" title="第四阶段 RCA/总结"></a>第四阶段 RCA/总结</h2><p>现在是你把经验教训变为财富的时刻了。</p>
<p>什么是好的技术 Leader？</p>
<p>随便一个业务需求或业务场景讲出来，你立刻把它抽象为几个模块/系统/Topic，然后侃侃而谈，业界都是怎么解决的，我们以前又是怎么分析怎么解决的，现在咱们这种情况下应该如何设计，可能会遇到什么问题，我们应该做哪些预防设计，blabla。</p>
<p>怎么做到这一点？</p>
<p>第一，写 RCA 报告。我以前说过，『窝窝从 2011 年开始，一直坚持每错必查、错了又错就整改、每错必写，用身体力行告诉每一个新员工直面错误、公开技术细节、分享给所有人，长此以往，每一次事故和线上漏测都会变为我们的财富。这就是我们的 RCA（Root Cause Analysis）制度，截止到目前已经收集整理了近两百个详尽的 RCA 报告。』</p>
<p>RCA 报告格式为：</p>
<ol>
<li>背景知识（Optional）</li>
<li>问题现象</li>
<li>影响范围</li>
<li>问题原因</li>
<li>问题分析过程（Optional）</li>
<li>解决办法</li>
<li>后续处理措施：如线上脏数据如何修复，如对用户造成的影响如何弥补等（Optional）</li>
<li>经验教训</li>
<li>RCA类型：如代码问题、实施问题、配置问题、设计问题、测试问题</li>
</ol>
<p>这样，作为一名合格的老兵，你见过了足够多的血，并且把它们变成了你的人生财富。</p>
<p>第二，写总结。话说，要经常拉清单。侃侃而谈得有资料，这些都得是你自己写才能印象深刻，关键时刻想得起来。</p>
<p>好了，这就是我告诉面试者的高手炼成四个阶段。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;著作权归作者所有。&lt;br&gt;商业转载请联系作者获得授权，非商业转载请注明出处。&lt;br&gt;作者：郑昀&lt;br&gt;链接：&lt;a href=&quot;http://zhuanlan.zhihu.com/zhengyun/20270317&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="深度文摘" scheme="http://linfuyan.com/categories/%E6%B7%B1%E5%BA%A6%E6%96%87%E6%91%98/"/>
    
    
      <category term="成长" scheme="http://linfuyan.com/tags/%E6%88%90%E9%95%BF/"/>
    
      <category term="知识体系" scheme="http://linfuyan.com/tags/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
      <category term="学习金字塔" scheme="http://linfuyan.com/tags/%E5%AD%A6%E4%B9%A0%E9%87%91%E5%AD%97%E5%A1%94/"/>
    
      <category term="技术高手" scheme="http://linfuyan.com/tags/%E6%8A%80%E6%9C%AF%E9%AB%98%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android (Java) 编码惯例及最佳实践</title>
    <link href="http://linfuyan.com/android-or-java-style-guide-and-best-practice/"/>
    <id>http://linfuyan.com/android-or-java-style-guide-and-best-practice/</id>
    <published>2015-11-12T03:45:07.000Z</published>
    <updated>2015-11-12T06:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-声明-Declaration"><a href="#1-声明-Declaration" class="headerlink" title="1. 声明(Declaration)"></a>1. 声明(Declaration)</h1><h2 id="1-1-每行声明变量的数量-Number-Per-Line"><a href="#1-1-每行声明变量的数量-Number-Per-Line" class="headerlink" title="1.1 每行声明变量的数量(Number Per Line)"></a>1.1 每行声明变量的数量(Number Per Line)</h2><p>推荐一行一个声明，因为这样以利于写注释。亦即，</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> level; <span class="comment">// indentation level      </span></div><div class="line"><span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// size of table</span></div></pre></td></tr></table></figure>
<p>要优于，</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> level, <span class="built_in">size</span>;</div></pre></td></tr></table></figure>
<p>不要将不同类型变量的声明放在同一行，例如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> foo, fooarry[]; <span class="comment">// WRONG!</span></div></pre></td></tr></table></figure>
<p>注意：上面的例子中，在类型和标识之间放了一个空格，另一种被允许的替代方法是多行变量注释的对齐：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">int</span> level;                <span class="comment">// indentation level</span></div><div class="line"><span class="built_in">int</span> <span class="built_in">size</span>;                 <span class="comment">// size of table  </span></div><div class="line"><span class="keyword">Object</span> currentEntry;      <span class="comment">// currently selected table entry</span></div></pre></td></tr></table></figure>
<h2 id="1-2-初始化-Initialization"><a href="#1-2-初始化-Initialization" class="headerlink" title="1.2 初始化(Initialization)"></a>1.2 初始化(Initialization)</h2><p>尽量在声明局部变量的同时进行初始化。唯一 不这么做理由是变量的初始值依赖于某些先前发生的计算。</p>
<h2 id="1-3-布局-Placement"><a href="#1-3-布局-Placement" class="headerlink" title="1.3 布局(Placement)"></a>1.3 布局(Placement)</h2><p>建议只在代码块的开始处声明变量(一个块可以指任何被包含在大括号“{”和“}”中间的代码，也可以是逻辑上分块的代码)。通常不要在首次用于该变量时才声明之，这会把注意力不集中的程序员搞糊涂，同时会妨碍代码在该作用域内的可移植性。    </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> int1 = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (condition) &#123;</div><div class="line">        <span class="keyword">int</span> int2 = <span class="number">0</span>;</div><div class="line">        …</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该规则的一个例外是for循环的索引变量</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; maxLoops; <span class="built_in">i</span>++) &#123; … &#125;</div></pre></td></tr></table></figure>
<p>避免声明的局部变量覆盖上一级声明的变量。例如，不要在内部代码块中声明相同的变量名：</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">count</span>;</div><div class="line">…</div><div class="line">myMethod() &#123;</div><div class="line">    <span class="keyword">if</span> (condition) &#123;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;    <span class="comment">// AVOID!</span></div><div class="line">        …</div><div class="line">    &#125;</div><div class="line">    …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-4-类和接口的声明-Class-and-Interface-Declarations"><a href="#1-4-类和接口的声明-Class-and-Interface-Declarations" class="headerlink" title="1.4 类和接口的声明(Class and Interface Declarations)"></a>1.4 类和接口的声明(Class and Interface Declarations)</h2><p>当编写类和接口时，应该遵守以下格式规则：</p>
<ol>
<li>在方法名与其参数列表之前的左括号“(”间不要有空格。</li>
<li>左大括号“{”位于声明语句同行的末尾。</li>
<li>右大括号“}”另起一行，与相应的声明语句对齐，除非是一个空语句，“}”应紧跟在“{”之后。   </li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</div><div class="line">    int ivar1;</div><div class="line">    int ivar2;</div><div class="line"></div><div class="line">    <span class="type">Sample</span>(int i, int j) &#123;</div><div class="line">        ivar1 = i;</div><div class="line">        ivar2 = j;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int emptyMethod() &#123;&#125;</div><div class="line"></div><div class="line">    …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-注释-Comments"><a href="#2-注释-Comments" class="headerlink" title="2. 注释(Comments)"></a>2. 注释(Comments)</h1><p>Java 程序有两类注释：实现注释( implementation comments )和文档注释( document comments )。实现注释是那些在 C++ 中见过的，使用 <code>/*…*/</code> 和 <code>//</code> 界定的注释。文档注释(被称为“doc comments”)是 Java 独有的，并由 <code>/**…*/</code> 界定。文档注释可以通过 javadoc 工具转换成 HTML 文件。</p>
<p>实现注释用以注释代码或或者实现细节。文档注释从实现自由( implemtentation-free )的角度描述代码的规范。它可以被那些手头没有源码的开发人员读懂。</p>
<p>注释应被用来给出代码的总括，并提供代码自身没有提供的附加信息。注释应该仅包含与阅读和理解程序有关的信息。例如，相应的包如何被建立或位于哪个目录下之类的信息不应包括在注释中。</p>
<p>在注释里，对设计决策中重要的或者不是显而易见的地方进行说明是可以的，但应避免提供代码中已清晰表达出来的重复信息，多余的注释很容易过时。通常应避免那些代码更新就可能过时的注释。</p>
<p>注意：频繁的注释有时反映出代码的低质量。当你觉得被迫要加注释的时候，考虑一下重写代码使其更清晰。</p>
<p>注释不应写在用星号或字符画出来的大框里。注释不应包括诸如制表符和回退符之类的特殊字符。</p>
<h2 id="2-1-实现注释的格式-Implementation-Comment-Formats"><a href="#2-1-实现注释的格式-Implementation-Comment-Formats" class="headerlink" title="2.1 实现注释的格式(Implementation Comment Formats)"></a>2.1 实现注释的格式(Implementation Comment Formats)</h2><p>程序可以有4种实现注释的风格：块(Block)，单行(single-line)，尾端(trailing)和行末(end-of-line)。</p>
<h3 id="2-1-1-块注释"><a href="#2-1-1-块注释" class="headerlink" title="2.1.1 块注释"></a>2.1.1 块注释</h3><p>块注释通常用于提供对文件，方法，数据结构和算法的描述。块注释被置于每个文件的开始处以及每个方法之前。它们也可以被用于其他地方，比如方法的内部。在功能和方法内部的块注释应该和它们所描述的代码具有一样的缩进格式。</p>
<p>块注释之首应该有一个空行，用于把块注释和代码分割开来，比如：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Here is a block comment.</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="2-1-2-单行注释-Single-Line-Comments"><a href="#2-1-2-单行注释-Single-Line-Comments" class="headerlink" title="2.1.2 单行注释(Single-Line Comments)"></a>2.1.2 单行注释(Single-Line Comments)</h3><p>短注释可以显示一行内，并与其后的代码具有一样的缩进层级。如果一个注释不能在一行内写完，就该块注释(参见“块注释”)。单行注释之前应该有一个空行。以下是一个Java代码中单行注释的例子：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(condition)</span> &#123;</div><div class="line">    <span class="comment">/* Handle the condition. */</span></div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-1-3-尾端注释-Trailing-Comments"><a href="#2-1-3-尾端注释-Trailing-Comments" class="headerlink" title="2.1.3 尾端注释(Trailing Comments)"></a>2.1.3 尾端注释(Trailing Comments)</h3><p>极短的注释可以与它们所要描述的代码位于同一行，但是应该有足够的空白（至少一个空格）来分开代码和注释。若有多个短注释出现于大段代码中，它们应该具有相同的缩进。</p>
<p>以下是一个Java代码中尾端注释的例子：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a ==<span class="number">2</span>) &#123;</div><div class="line">    <span class="keyword">return</span> TRUE;            <span class="comment">/* special case */</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> isPrime(a);      <span class="comment">/* works only for odd a */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-1-4-行末注释-End-Of-Line-Comments"><a href="#2-1-4-行末注释-End-Of-Line-Comments" class="headerlink" title="2.1.4 行末注释(End-Of-Line Comments)"></a>2.1.4 行末注释(End-Of-Line Comments)</h3><p>注释界定符//，可以注释掉整行或者一行中的一部分。它一般不用于连续多行的注释文本；然而，它可以用来注释掉多行的代码段。以下是所有三种风格的例子：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(foo &gt; <span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">// Do a double-filp.</span></div><div class="line">    ……</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// Expalin why here.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//if (bar &gt; 1) &#123;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//    // Do a triple-flip.</span></div><div class="line"><span class="comment">//    ...</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//else &#123;</span></div><div class="line"><span class="comment">//    return false;</span></div><div class="line"><span class="comment">//&#125;</span></div></pre></td></tr></table></figure>
<h2 id="2-2-文档注释-Documentation-Comments"><a href="#2-2-文档注释-Documentation-Comments" class="headerlink" title="2.2 文档注释(Documentation Comments)"></a>2.2 文档注释(Documentation Comments)</h2><p>注意：此处描述的注释格式之范例，参见“ Java 源文件范例”<br>若想了解更多，参见“How to Write Doc Comments for Javadoc”，其中包含了有关文档注释标记的信息(@return，@param，@see)：</p>
<p><a href="http://java.sun.com/javadoc/writingdoccomments/index.html" target="_blank" rel="external">http://java.sun.com/javadoc/writingdoccomments/index.html</a></p>
<p>若想了解有关文档注释和 javadoc 的详细资料，参见 javadoc 的主页：</p>
<p><a href="http://java.sun.com/javadoc/index.html" target="_blank" rel="external">http://java.sun.com/javadoc/index.html</a></p>
<p>文档注释描述Java的类、接口、构造器、方法，以及字段(field)。每个文档注释都会被置于注释界定符 <code>/**…*/</code> 之中，一个注释对应一个类、接口或成员。该注释应位于声明之前：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The Example class provides …</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> FirstName Lastname (account<span class="doctag">@sohu</span>-inc.com)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123; …</div></pre></td></tr></table></figure>
<p>注意：顶层(top-level)的类和接口是不缩进的，而其成员是缩进的。描述类和接口的文档注释的第一行会被置于注释的第一行(/ **)不需要缩进；随后的文档注释每行都缩进1格(使星号纵向对齐)。成员，包括构造函数在内，其文档注释的第一行缩进4格，随后每行都缩进5格。</p>
<p>若你想给出有关类、接口、变量或方法的信息，而这些信息又不适合写在文档中，则可使用实现块注释(见2.1.1)或紧跟在声明后面的单行注释(见2.1.2)。例如，有关一个类实现的细节应放入紧跟在类声明后面的实现块注释中，而不是放在文档注释中。</p>
<p>文档注释不能放在一个方法或构造器的定义块中，因为 Java 会将位于文档注释之后的第一个声明与其相关联。</p>
<h1 id="3-编程实践"><a href="#3-编程实践" class="headerlink" title="3. 编程实践"></a>3. 编程实践</h1><h2 id="3-1-提供对实例以及类变量的访问控制-Providing-Access-to-Instance-and-Class-Variables"><a href="#3-1-提供对实例以及类变量的访问控制-Providing-Access-to-Instance-and-Class-Variables" class="headerlink" title="3.1 提供对实例以及类变量的访问控制(Providing Access to Instance and Class Variables)"></a>3.1 提供对实例以及类变量的访问控制(Providing Access to Instance and Class Variables)</h2><p>若没有足够的理由，不要把实例或类类变量声明为 public。通常，实例变量无需显式的设置(set)和获取(gotten)，通常这作为方法调用的边缘效应(side effect)而产生。</p>
<p>一个具有public实例变量的恰当例子，是类仅作为数据结构，没有行为。亦即，若你要使用一个结构(struct)而非一个类(如果Java支持结构的话)，那么把类的实例变量声明为public是合适的。</p>
<p>Android 变量访问控制：Android 的开发通常允许公共的实例变量。</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">Common</span> practice <span class="keyword">in</span> Android development.</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyClass &#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> pulicField;  // <span class="keyword">public</span> field for <span class="keyword">direct</span> <span class="keyword">access</span>.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-2-引用类变量和类方法-Referring-to-Class-Variables-and-Methods"><a href="#3-2-引用类变量和类方法-Referring-to-Class-Variables-and-Methods" class="headerlink" title="3.2 引用类变量和类方法(Referring to Class Variables and Methods)"></a>3.2 引用类变量和类方法(Referring to Class Variables and Methods)</h2><p>避免用一个对象访问一个类的静态变量和方法。应该用类名替代。例如：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">classMethod</span>();         <span class="comment">// OK</span></div><div class="line"><span class="selector-tag">AClass</span><span class="selector-class">.classMethod</span>();   <span class="comment">// OK</span></div><div class="line"><span class="selector-tag">anObject</span><span class="selector-class">.classMethod</span>();  <span class="comment">// AVOID!</span></div></pre></td></tr></table></figure>
<h2 id="3-3-常量-Constants"><a href="#3-3-常量-Constants" class="headerlink" title="3.3 常量(Constants)"></a>3.3 常量(Constants)</h2><p>位于for循环中作为计数器值的数字常量，除了-1，0和1之外，不应被直接写入代码。</p>
<h2 id="3-4-变量赋值-Variable-Assignments"><a href="#3-4-变量赋值-Variable-Assignments" class="headerlink" title="3.4 变量赋值(Variable Assignments)"></a>3.4 变量赋值(Variable Assignments)</h2><p>避免在一个语句中给多个变量赋相同的值。它很难读懂。例如：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fooBar.fChar = <span class="keyword">barFoo.lchar </span>= ‘c’<span class="comment">;  // AVOID!</span></div></pre></td></tr></table></figure>
<p>不要将赋值运算符用在容易与相等关系运算符混淆的地方。例如：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(c++ = d++)</span> &#123;    <span class="comment">// AVOID! (Java disallows)</span></div><div class="line">    ….</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该写成</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">if</span> <span class="comment">((c</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">=</span> <span class="comment">d</span><span class="literal">+</span><span class="literal">+</span><span class="comment">)</span> <span class="comment">!</span> <span class="comment">=</span> <span class="comment">0)</span> <span class="comment">&#123;</span></div><div class="line">    <span class="comment">…</span></div><div class="line"><span class="comment">&#125;</span></div></pre></td></tr></table></figure>
<p>不要使用内嵌(embedded)赋值运算符试图提高运行时效率，这是编译器的工作。例如：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = <span class="comment">(a = b +c)</span> + r; <span class="comment">// AOVID!</span></div></pre></td></tr></table></figure>
<p>应该写成</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">a</span> = b + c;</div><div class="line"><span class="attribute">d</span> = a + r;</div></pre></td></tr></table></figure>
<h2 id="3-5-其它惯例-Miscellaneous-Practices"><a href="#3-5-其它惯例-Miscellaneous-Practices" class="headerlink" title="3.5 其它惯例(Miscellaneous Practices)"></a>3.5 其它惯例(Miscellaneous Practices)</h2><h3 id="3-5-1-圆括号与运算符优先级-Parentheses-and-Operator-Precedence"><a href="#3-5-1-圆括号与运算符优先级-Parentheses-and-Operator-Precedence" class="headerlink" title="3.5.1 圆括号与运算符优先级(Parentheses and Operator Precedence)"></a>3.5.1 圆括号与运算符优先级(Parentheses and Operator Precedence)</h3><p>一般而言，在含有多种运算符的表达式中使用括号来避免运算符优先级问题，是个好方法。即便运算符的优先级对你而言可能很清楚，但对其他人未必如此。你不能假设别的程序员和你一样清楚运算符的优先级。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="selector-tag">a</span> == <span class="selector-tag">b</span> &amp;&amp; c ==d)     <span class="comment">// AVOID!</span></div><div class="line"><span class="keyword">if</span> ((<span class="selector-tag">a</span> == b) &amp;&amp; (c == d))  <span class="comment">// RIGHT</span></div></pre></td></tr></table></figure>
<h3 id="3-5-2-返回值-Returning-Values"><a href="#3-5-2-返回值-Returning-Values" class="headerlink" title="3.5.2 返回值(Returning Values)"></a>3.5.2 返回值(Returning Values)</h3><p>设法让你的程序结构符合目的。例如：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (booleanException) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该代之以如下方法：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> booleanException;</div></pre></td></tr></table></figure>
<p>类似地：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> y;</div></pre></td></tr></table></figure>
<p>应该写为：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (condition ? x : <span class="type">y</span>);</div></pre></td></tr></table></figure>
<h3 id="3-5-3-条件运算符“-”前的表达式-Expressions-before-“-”-in-the-Conditional-Operator"><a href="#3-5-3-条件运算符“-”前的表达式-Expressions-before-“-”-in-the-Conditional-Operator" class="headerlink" title="3.5.3 条件运算符“?”前的表达式 (Expressions before “?” in the Conditional Operator)"></a>3.5.3 条件运算符“?”前的表达式 <code>(Expressions before “?” in the Conditional Operator)</code></h3><p>如果一个包含二元运算符表达式出现在三元运算符“<code>? :</code>”之前，那么应该给表达式添上一对圆括号。例如：</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">x</span> &gt;= <span class="number">0</span>) ? <span class="keyword">x</span> : -<span class="keyword">x</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<h3 id="3-5-4-特殊注释-Special-Comments"><a href="#3-5-4-特殊注释-Special-Comments" class="headerlink" title="3.5.4 特殊注释(Special Comments)"></a>3.5.4 特殊注释(Special Comments)</h3><p>使用 TODO 来注释一个临时的或者未完成的解决方案。TODO 必须包含详细的信息，例如，需要做什么，打算怎么做，为什么以后才做，等。要发布到生产环境的代码尽量减少 TODO。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// TODO: Change this <span class="built_in">to</span> use <span class="keyword">a</span> flag instead <span class="keyword">of</span> <span class="keyword">a</span> <span class="built_in">constant</span>.</div></pre></td></tr></table></figure>
<p>如果有可能，尽量包含具体的开发者帐号，以及具体的修正日期。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">// TODO(tom, Fix <span class="keyword">by</span> Nov <span class="number">2005</span>): Change this <span class="built_in">to</span> use <span class="keyword">a</span> flag.</div></pre></td></tr></table></figure>
<h2 id="3-6-所有对象的共有方法-Methods-Common-to-All-Objects"><a href="#3-6-所有对象的共有方法-Methods-Common-to-All-Objects" class="headerlink" title="3.6 所有对象的共有方法(Methods Common to All Objects)"></a>3.6 所有对象的共有方法(Methods Common to All Objects)</h2><h3 id="3-6-1-覆盖equals时请遵守通用约定"><a href="#3-6-1-覆盖equals时请遵守通用约定" class="headerlink" title="3.6.1 覆盖equals时请遵守通用约定"></a>3.6.1 覆盖equals时请遵守通用约定</h3><p>Item 8: Obey the general contract when overriding equals.</p>
<p>重写 equals 方法看起来很简单，实际上非常容易犯错误。在多数情况下我们不推荐重写equals方法。如果确实有必要，这里再强调一下 Object.equals 的约定：</p>
<ul>
<li>自反：对于任意 non-null 的引用值x，x.equals(x) 必须返回true。</li>
<li>对称：对于任意的 non-null 的值x和y，x.equals(y) 和 y.equals(x) 必须返回相同的值。</li>
<li>传递：对于任意 non-null 的值，x，y，z，如果 x.equals(y) 返回true以及 y.equals(z) 返回true，那么 x.equals(z) 也必须返回 true。</li>
<li>一致：如果 equals 实现中的辅助信息没有改变，对于任意的x和y，对  x.equals(y) 必须返回相同的值。</li>
</ul>
<p>对于所有的 non-null 的 x，x.equals(null) 必须返回false。</p>
<h3 id="3-6-2-覆盖equals时总要覆盖hashCode"><a href="#3-6-2-覆盖equals时总要覆盖hashCode" class="headerlink" title="3.6.2 覆盖equals时总要覆盖hashCode"></a>3.6.2 覆盖equals时总要覆盖hashCode</h3><p>Item 9: Always override hashCode when you override equals.</p>
<p>对于每一个 equals 方法被重写的类，你必须重写 hashCode 方法。请仔细阅读 javadoc 中关于 Object.equals 的描述。相等的对象必须有相等的 hash 值。</p>
<p>这里是一个错误的例子：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> class PhoneNumber &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> areaCode;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> prefix;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> lineNumber;</div><div class="line">        </div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> o) &#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> PhoneNumber)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        PhoneNumber pn = (PhoneNumber)o;</div><div class="line">        <span class="keyword">return</span> pn.lineNumber == lineNumber</div><div class="line">                         &amp;&amp; pn.prefix  == prefix</div><div class="line">                         &amp;&amp; pn.areaCode  == areaCode;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="comment">// Broken - no hashCode method!</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Map&lt;PhoneNumber, <span class="keyword">String</span>&gt; m = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;PhoneNumber, <span class="keyword">String</span>&gt;();</div><div class="line">m.put(<span class="keyword">new</span> PhoneNumber(<span class="number">707</span>, <span class="number">867</span>, <span class="number">5309</span>), <span class="string">"Jenny"</span>);</div><div class="line"><span class="comment">// null is returned instead of "Jenny"</span></div><div class="line">m.<span class="built_in">get</span>(<span class="keyword">new</span> PhoneNumber(<span class="number">707</span>, <span class="number">867</span>, <span class="number">5309</span>));</div></pre></td></tr></table></figure>
<h2 id="3-7-泛型-Generics"><a href="#3-7-泛型-Generics" class="headerlink" title="3.7 泛型(Generics)"></a>3.7 泛型(Generics)</h2><h3 id="3-7-1-请不要在新代码中使用原生态类型"><a href="#3-7-1-请不要在新代码中使用原生态类型" class="headerlink" title="3.7.1 请不要在新代码中使用原生态类型"></a>3.7.1 请不要在新代码中使用原生态类型</h3><p>Item 23: Don’t use raw types in new code.</p>
<p>从1.5版本开始，java提供了泛型机制来保证类型的安全。除非为了向后兼容，不允许使用原生态类型，像List（而不是 <code>List&lt;String&gt;</code>)。</p>
<p>下面这段代码就很容易出问题：</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Now a raw collection type - don't do this!</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * My stamp collection. Contains only Stamp instances.</div><div class="line"> */</div><div class="line">private final <span class="type">Collection</span> stamps = ... ;</div><div class="line">        </div><div class="line"><span class="comment">// Erroneous insertion of coin into stamp collection</span></div><div class="line">stamps.add(<span class="function"><span class="keyword">new</span> <span class="title">Coin</span>( ... ));</span></div><div class="line">        </div><div class="line"><span class="comment">// Now a raw iterator type - don't do this!</span></div><div class="line"><span class="title">for</span> (<span class="type">Iterator</span> i = stamps.iterator(); <span class="title">i</span>.<span class="title">hasNext</span>(); ) &#123;</div><div class="line">    <span class="title">Stamp</span> <span class="title">s</span> = (<span class="type">Stamp</span>) <span class="title">i</span>.<span class="title">next</span>(); <span class="comment">// Throws ClassCastException</span></div><div class="line">    ... <span class="comment">// Do something with the stamp</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用泛型能够很好地解决这个问题：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Parameterized collection type - typesafe</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;Stamp&gt; stamps = ... ;</div><div class="line">        </div><div class="line"><span class="comment">// for-each loop over a parameterized collection - typesafe</span></div><div class="line"><span class="keyword">for</span> (Stamp <span class="string">s :</span> stamps) &#123; <span class="comment">// No cast</span></div><div class="line">    ... <span class="comment">// Do something with the stamp</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-7-2-消除非受检警告"><a href="#3-7-2-消除非受检警告" class="headerlink" title="3.7.2 消除非受检警告"></a>3.7.2 消除非受检警告</h3><p>Item 24: Elimate unchecked warnings.</p>
<p>在使用泛型编程的时候，我们经常会看到编译警告：非受检的类型转换警告，非受检的函数调用警告等等。很多非受检的警告是非常容易消除的，例如：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Set</span>&lt;Lark&gt; exaltation <span class="comment">= new HashSet()</span>;</div></pre></td></tr></table></figure>
<p>编译器会抛出警告：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Venery.<span class="string">java:</span><span class="number">4</span>: <span class="string">warning:</span> [unchecked] unchecked conversion</div><div class="line"><span class="string">found  :</span> HashSet, <span class="string">required:</span> Set&lt;Lark&gt;</div><div class="line">    Set&lt;Lark&gt; exaltation = <span class="keyword">new</span> HashSet();</div><div class="line">                 ^</div></pre></td></tr></table></figure>
<p>我们很容易消除这个警告：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Set</span>&lt;Lark&gt; exaltation <span class="comment">= new HashSet&lt;Lark&gt;()</span>;</div></pre></td></tr></table></figure>
<p>关于消除非受检的警告，有如下基本规则：</p>
<ul>
<li>尽可能地消除每个非受检的警告。</li>
<li>如果无法消除，必须能够证明这个警告不会引起类型安全问题，同时通过 <code>@SuppressWarnings(&quot;unchecked&quot;)</code> 来消除警告。</li>
<li>SuppressWarning必须作用在尽可能小的范围。</li>
<li>每一次使用 <code>@SuppressWarnings(&quot;unchecked&quot;)</code> 时，必须注释说明为什么这样做是安全的。</li>
</ul>
<h2 id="3-8-枚举和注解-Enums-and-Annotations"><a href="#3-8-枚举和注解-Enums-and-Annotations" class="headerlink" title="3.8 枚举和注解(Enums and Annotations)"></a>3.8 枚举和注解(Enums and Annotations)</h2><h3 id="3-8-1-用-enum-代替-int-常量"><a href="#3-8-1-用-enum-代替-int-常量" class="headerlink" title="3.8.1 用 enum 代替 int 常量"></a>3.8.1 用 enum 代替 int 常量</h3><p>Item 30: Use enums instead of int constants.</p>
<p>下面的代码利用了一种叫 int enum pattern 的技术，它有很多问题。它不能保证类型安全；它不能很好地转换为可读的字符串；如果数值变了的话，使用它的代码必须重新编译（严重！）。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The int enum pattern - severely deficient!</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_NAVEL = <span class="number">0</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_TEMPLE = <span class="number">1</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_BLOOD = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>我们应该用enum来实现上面的代码：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Orange</span> &#123; <span class="title">NAVEL</span>, <span class="title">TEMPLE</span>, <span class="title">BLOOD</span> &#125;</span></div></pre></td></tr></table></figure>
<p>注意：出于效率考虑，Android 的开发允许使用 int 常量，但是使用时要非常小心。</p>
<h3 id="8-8-2-用实例域代替序数"><a href="#8-8-2-用实例域代替序数" class="headerlink" title="8.8.2 用实例域代替序数"></a>8.8.2 用实例域代替序数</h3><p>Item 31: Use instance fields instead of ordinals.</p>
<p>所有的枚举类型都有一个ordinal方法，它能够返回每个枚举常量在类型中的位置。有时候，你可能会想从这个方法中直接得到一个整数值：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Abuse of ordinal to derive an associated value - DON'T DO THIS</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Ensemble &#123;</div><div class="line">    SOLO, SEXTET, DUET, TRIO, QUARTET, QUINTET, SEPTET, OCTET, NONET, DECTET;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusicians</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ordinal() + <span class="number">1</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要从枚举的序数中得到一个整数值，如果需要，请创建一个整数字段：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Ensemble</span> &#123;</span></div><div class="line">    SOLO(<span class="number">1</span>), DUET(<span class="number">2</span>), TRIO(<span class="number">3</span>), QUARTET(<span class="number">4</span>), QUINTET(<span class="number">5</span>),</div><div class="line">    SEXTET(<span class="number">6</span>), SEPTET(<span class="number">7</span>), OCTET(<span class="number">8</span>), DOUBLE_QUARTET(<span class="number">8</span>),</div><div class="line">    NONET(<span class="number">9</span>), DECTET(<span class="number">10</span>), TRIPLE_QUARTET(<span class="number">12</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> final int numberOfMusicians;</div><div class="line">    Ensemble(int size) &#123; this.numberOfMusicians = size; &#125;</div><div class="line">    public int numberOfMusicians() &#123; <span class="keyword">return</span> numberOfMusicians; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-8-3-坚持使用Override注解"><a href="#3-8-3-坚持使用Override注解" class="headerlink" title="3.8.3 坚持使用Override注解"></a>3.8.3 坚持使用Override注解</h3><p>Item 36: Consistently use the Override annotation.</p>
<p>你能发现下面代码的错误吗？</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Bigram &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">char</span> first;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">char</span> <span class="built_in">second</span>;</div><div class="line">    <span class="keyword">public</span> Bigram(<span class="built_in">char</span> first, <span class="built_in">char</span> <span class="built_in">second</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.first = first;</div><div class="line">        <span class="keyword">this</span>.<span class="built_in">second</span> = <span class="built_in">second</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> equals(Bigram b) &#123;</div><div class="line">        <span class="keyword">return</span> b.first == first &amp;&amp; b.<span class="built_in">second</span> == <span class="built_in">second</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hashCode() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">31</span> * first + <span class="built_in">second</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们加入了 <code>@Override</code> 的标注，编译器就能告诉我们错误了。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">Override</span> <span class="keyword">public</span> boolean <span class="keyword">equals</span>(Bigram b) <span class="comment">&#123;</span></div><div class="line">    return b.first == first &amp;&amp; b.second == second;</div><div class="line">&#125;</div><div class="line">        </div><div class="line">Bigram.java:<span class="number">10</span>: <span class="function"><span class="keyword">method</span> <span class="title">does</span> <span class="title">not</span> <span class="title">override</span> <span class="title">or</span> <span class="title">implement</span> <span class="title">a</span> <span class="title">method</span></span></div><div class="line">        <span class="title">from</span> <span class="title">a</span> <span class="title">supertype</span></div><div class="line">@<span class="title">Override</span> <span class="title">public</span> <span class="title">boolean</span> <span class="title">equals</span><span class="params">(Bigram b)</span> <span class="comment">&#123;</span></div><div class="line">^</div></pre></td></tr></table></figure>
<h2 id="3-9-方法-Methods"><a href="#3-9-方法-Methods" class="headerlink" title="3.9 方法 (Methods)"></a>3.9 方法 (Methods)</h2><h3 id="3-9-1-检查参数的有效性"><a href="#3-9-1-检查参数的有效性" class="headerlink" title="3.9.1 检查参数的有效性"></a>3.9.1 检查参数的有效性</h3><p>Item 38: Check parameters for validaity.</p>
<p>大多数的方法对于传入参数的值有限制，例如，通常来说索引值必须是非负的，对象应用必须是非空的。一条总的规则是，在错误发生之前必须尽早地发现它、处理它。</p>
<p>如果我们能在方法执行主要逻辑之前检查到错误的参数，我们就能够及时退出，同时抛出一个合适的一场。如果错误的参数进入函数的主要执行逻辑，方法就可能抛出一个奇怪的异常。在更坏的情况下，方法可能成功返回，但是中间出现一些不可预知的结果。</p>
<p>对于公共方法，用 <code>@throws</code> 来注释异常。比如，这些异常可能是 <code>IllegalArgumentException</code> 或者是 <code>NullPointerException</code>。例如：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> m the modulus, which must be positive</div><div class="line"> * <span class="doctag">@return</span> this mod m</div><div class="line"> * <span class="doctag">@throws</span> ArithmeticException if m is less than or equal to 0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function">BigInteger <span class="title">mod</span><span class="params">(BigInteger m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (m.signum() &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"Modulus &lt;= 0: "</span> + m);</div><div class="line">    &#125;</div><div class="line">    ... <span class="comment">// Do the computation</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-10-异常-Exceptions"><a href="#3-10-异常-Exceptions" class="headerlink" title="3.10 异常(Exceptions)"></a>3.10 异常(Exceptions)</h2><h3 id="3-10-1-只针对异常的情况才使用异常"><a href="#3-10-1-只针对异常的情况才使用异常" class="headerlink" title="3.10.1 只针对异常的情况才使用异常"></a>3.10.1 只针对异常的情况才使用异常</h3><p>Item 57: Use exceptions only for exceptional conditions.</p>
<p>异常，只应该被应用于异常的情况；不能被用于正常的控制流程。这一点在很多时候会被误用，下面是一个极端的例子：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Horrible abuse of exceptions. Don't ever do this!</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">        range[i++].climb();</div><div class="line">    &#125; <span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-10-2-对可恢复的情况使用受检异常，对编程错误使用运行时异常"><a href="#3-10-2-对可恢复的情况使用受检异常，对编程错误使用运行时异常" class="headerlink" title="3.10.2 对可恢复的情况使用受检异常，对编程错误使用运行时异常"></a>3.10.2 对可恢复的情况使用受检异常，对编程错误使用运行时异常</h3><p>Item 58: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors.</p>
<p>受检异常在调用者能够合适处理并恢复程序执行的情况下使用。运行时异常用来表明程序自身的错误，大多数的运行时异常都是因为调用者违反了函数的预设条件。</p>
<p>应用程序所有非受检的异常应该派生自 RuntimeException ，作为惯例，Error 通常只被 JVM 使用。</p>
<h3 id="3-10-3-抛出与抽象相对应的异常"><a href="#3-10-3-抛出与抽象相对应的异常" class="headerlink" title="3.10.3 抛出与抽象相对应的异常"></a>3.10.3 抛出与抽象相对应的异常</h3><p>Item 61: Throw exceptions appropriate to the abstraction.</p>
<p>抛出与当前方法明显无关的异常会让人十分迷惑，而且会暴露出实现的细节。这种情况通常是因为高一级的方法直接抛出底层调用的异常引起的。我们采用异常转换的方法来避免这一种情况。也就是说，高一级的方法应该捕获底层调用的异常，抛出一个更高抽象的异常。例如，下面是一段 AbstractSequentialList 实现代码，它需要实现 <code>List&lt;E&gt;#get</code> 方法。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the element at the specified position in this list.</div><div class="line"> * <span class="doctag">@throws</span> IndexOutOfBoundsException if the index is out of range</div><div class="line"> * (&#123;<span class="doctag">@code</span> index &lt; 0 || index &gt;= size()&#125;).</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    ListIterator&lt;E&gt; i = listIterator(index);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> i.<span class="title">next</span><span class="params">()</span></span>;</div><div class="line">    &#125; <span class="keyword">catch</span>(NoSuchElementException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，不要滥用了异常转换。</p>
<h3 id="3-10-4-每个方法抛出的异常都要有文档"><a href="#3-10-4-每个方法抛出的异常都要有文档" class="headerlink" title="3.10.4 每个方法抛出的异常都要有文档"></a>3.10.4 每个方法抛出的异常都要有文档</h3><p>Item 62: Document all exceptions thrown by each method.</p>
<p>关于异常的文档有以下要求：</p>
<p>必须单独地声明每个受检异常，同时准确地用 <code>@throws</code> 来说明异常条件。</p>
<p>用 Javadoc 的 <code>@throws</code> 来表明非受检的异常；但是不要用throws关键字在方法的声明中包括非受检的异常。</p>
<p>如果一个异常会被同一个类的很多方法抛出，在类的注释中表明这个异常是可以接受的。但是通常不推荐这么做。</p>
<h3 id="3-10-5-不要忽略异常"><a href="#3-10-5-不要忽略异常" class="headerlink" title="3.10.5 不要忽略异常"></a>3.10.5 不要忽略异常</h3><p>Item 65: Don’t ignore exceptions.</p>
<p>我们不允许像下面的代码一样忽略异常：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span>(<span class="params">String <span class="keyword">value</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(<span class="keyword">value</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至少，在 catch 语句里，应该有注释说明为什么忽略异常是合适的。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** If value is not a valid number, original port number is used. */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span>(<span class="params">String <span class="keyword">value</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(<span class="keyword">value</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        <span class="comment">// Method is documented to just ignore invalid user input.</span></div><div class="line">        <span class="comment">// serverPort will just be unchanged.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-10-6-不要一次捕获所有异常"><a href="#3-10-6-不要一次捕获所有异常" class="headerlink" title="3.10.6 不要一次捕获所有异常"></a>3.10.6 不要一次捕获所有异常</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">try</span> &#123;</div><div class="line">    <span class="selector-tag">someComplicatedIOFunction</span>();        <span class="comment">// may throw IOException </span></div><div class="line">    <span class="selector-tag">someComplicatedParsingFunction</span>();   <span class="comment">// may throw ParsingException </span></div><div class="line">    <span class="selector-tag">someComplicatedSecurityFunction</span>();  <span class="comment">// may throw SecurityException </span></div><div class="line">    <span class="comment">// phew, made it all the way </span></div><div class="line">    &#125; <span class="selector-tag">catch</span> (Exception e) &#123;                 <span class="comment">// I'll just catch all exceptions </span></div><div class="line">    <span class="selector-tag">handleError</span>();                      <span class="comment">// with one generic handler!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在绝大多数情况下，捕获 Exception 或者是 Throwable 都是不对的。这个非常危险，你可能会捕获一些没有想到的异常，或者是稍后加入的异常。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://source.android.com/source/code-style.html" target="_blank" rel="external">Code Style Guidelines for Contributors</a></p>
<p><a href="http://linfuyan.com/google-java-style-guide/">Google Java 编程风格指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-声明-Declaration&quot;&gt;&lt;a href=&quot;#1-声明-Declaration&quot; class=&quot;headerlink&quot; title=&quot;1. 声明(Declaration)&quot;&gt;&lt;/a&gt;1. 声明(Declaration)&lt;/h1&gt;&lt;h2 id=&quot;1-1-每
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Android" scheme="http://linfuyan.com/tags/Android/"/>
    
      <category term="Java" scheme="http://linfuyan.com/tags/Java/"/>
    
      <category term="代码" scheme="http://linfuyan.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
      <category term="规范" scheme="http://linfuyan.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="实践" scheme="http://linfuyan.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Google Java 编程风格指南</title>
    <link href="http://linfuyan.com/google-java-style-guide/"/>
    <id>http://linfuyan.com/google-java-style-guide/</id>
    <published>2015-11-12T03:24:09.000Z</published>
    <updated>2015-11-12T07:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h2 id="1-1-术语说明"><a href="#1-1-术语说明" class="headerlink" title="1.1 术语说明"></a>1.1 术语说明</h2><p>在本文档中，除非另有说明：</p>
<p>术语class可表示一个普通类，枚举类，接口或是annotation类型(@interface)<br>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。</p>
<p>其他的术语说明会偶尔在后面的文档出现。</p>
<h2 id="1-2-指南说明"><a href="#1-2-指南说明" class="headerlink" title="1.2 指南说明"></a>1.2 指南说明</h2><p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。</p>
<h1 id="2-源文件基础"><a href="#2-源文件基础" class="headerlink" title="2. 源文件基础"></a>2. 源文件基础</h1><h2 id="2-1-文件名"><a href="#2-1-文件名" class="headerlink" title="2.1 文件名"></a>2.1 文件名</h2><p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为 .java。</p>
<h2 id="2-2-文件编码：UTF-8"><a href="#2-2-文件编码：UTF-8" class="headerlink" title="2.2 文件编码：UTF-8"></a>2.2 文件编码：UTF-8</h2><p>源文件编码格式为UTF-8。</p>
<h2 id="2-3-特殊字符"><a href="#2-3-特殊字符" class="headerlink" title="2.3 特殊字符"></a>2.3 特殊字符</h2><h3 id="2-3-1-空白字符"><a href="#2-3-1-空白字符" class="headerlink" title="2.3.1 空白字符"></a>2.3.1 空白字符</h3><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：</p>
<ol>
<li>所有其它字符串中的空白字符都要进行转义。</li>
<li>制表符不用于缩进。</li>
</ol>
<h3 id="2-3-2-特殊转义序列"><a href="#2-3-2-特殊转义序列" class="headerlink" title="2.3.2 特殊转义序列"></a>2.3.2 特殊转义序列</h3><p>对于具有特殊转义序列的任何字符(\b, \t, \n, \f, \r, \“, \‘及)，我们使用它的转义序列，而不是相应的八进制(比如\012)或Unicode(比如\u000a)转义。</p>
<h3 id="2-3-3-非ASCII字符"><a href="#2-3-3-非ASCII字符" class="headerlink" title="2.3.3 非ASCII字符"></a>2.3.3 非ASCII字符</h3><p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p>
<blockquote>
<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。<br>例如：</p>
</blockquote>
<table>
<thead>
<tr>
<th>实例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>String unitAbbrev = “μs”;</td>
<td>赞，即使没有注释也非常清晰</td>
</tr>
<tr>
<td>String unitAbbrev = “\u03bcs”; // “μs”</td>
<td>允许，但没有理由要这样做</td>
</tr>
<tr>
<td>String unitAbbrev = “\u03bcs”; // Greek letter mu, “s”</td>
<td>允许，但这样做显得笨拙还容易出错</td>
</tr>
<tr>
<td>String unitAbbrev = “\u03bcs”;</td>
<td>很糟，读者根本看不出这是什么</td>
</tr>
<tr>
<td>return ‘\ufeff’ + content; // byte order mark</td>
<td>好，对于非打印字符，使用转义，并在必要时写上注释</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Tip: 永远不要由于害怕某些程序可能无法正确处理非 ASCII 字符而让你的代码可读性变差。当程序无法正确处理非 ASCII 字符时，它自然无法正确运行， 你就会去 fix 这些问题的了。(言下之意就是大胆去用非 ASCII 字符，如果真的有需要的话)</p>
</blockquote>
<h1 id="3-源文件结构"><a href="#3-源文件结构" class="headerlink" title="3. 源文件结构"></a>3. 源文件结构</h1><p>一个源文件包含(按顺序地)：</p>
<ol>
<li>许可证或版权信息(如有需要)</li>
<li>package语句</li>
<li>import语句</li>
<li>一个顶级类(只有一个)</li>
</ol>
<p>以上每个部分之间用一个空行隔开。</p>
<h2 id="3-1-许可证或版权信息"><a href="#3-1-许可证或版权信息" class="headerlink" title="3.1 许可证或版权信息"></a>3.1 许可证或版权信息</h2><p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。</p>
<h2 id="3-2-package语句"><a href="#3-2-package语句" class="headerlink" title="3.2 package语句"></a>3.2 package语句</h2><p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p>
<h2 id="3-3-import语句"><a href="#3-3-import语句" class="headerlink" title="3.3 import语句"></a>3.3 import语句</h2><h3 id="3-3-1-import不要使用通配符"><a href="#3-3-1-import不要使用通配符" class="headerlink" title="3.3.1 import不要使用通配符"></a>3.3.1 import不要使用通配符</h3><p>即，不要出现类似这样的import语句：import java.util.*;</p>
<h3 id="3-3-2-不要换行"><a href="#3-3-2-不要换行" class="headerlink" title="3.3.2 不要换行"></a>3.3.2 不要换行</h3><p>import 语句不换行，列限制(4.4节)并不适用于 import 语句。(每个 import 语句独立成行)</p>
<h3 id="3-3-3-顺序和间距"><a href="#3-3-3-顺序和间距" class="headerlink" title="3.3.3 顺序和间距"></a>3.3.3 顺序和间距</h3><p>import 语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p>
<ol>
<li>所有的静态导入独立成组</li>
<li><code>com.google</code> imports (仅当这个源文件是在 <code>com.google</code> 包下)</li>
<li>第三方的包。每个顶级包为一组，字典序。例如： android, com, junit, org, sun</li>
<li><code>java</code> imports</li>
<li><code>javax</code> imports</li>
</ol>
<p>组内不空行，按字典序排列。</p>
<blockquote>
<p>飞博团队要求：</p>
</blockquote>
<p>导入包的顺序为：静态导入，java基础包，javax基础包，android包，第三方包（每个顶级包为一组，字典序。例如：com, junit, org, sun, feibo包。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.a</span><span class="selector-class">.B</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">javax</span><span class="selector-class">.a</span><span class="selector-class">.B</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">android</span><span class="selector-class">.a</span><span class="selector-class">.B</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.a</span><span class="selector-class">.B</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.feibo</span><span class="selector-class">.a</span><span class="selector-class">.B</span>;</div></pre></td></tr></table></figure>
<h2 id="3-4-类声明"><a href="#3-4-类声明" class="headerlink" title="3.4 类声明"></a>3.4 类声明</h2><h3 id="3-4-1-只有一个顶级类声明"><a href="#3-4-1-只有一个顶级类声明" class="headerlink" title="3.4.1 只有一个顶级类声明"></a>3.4.1 只有一个顶级类声明</h3><p>每个顶级类都在一个与它同名的源文件中(当然，还包含 .java 后缀)。</p>
<h3 id="3-4-2-类成员顺序"><a href="#3-4-2-类成员顺序" class="headerlink" title="3.4.2 类成员顺序"></a>3.4.2 类成员顺序</h3><p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。 </p>
<p>最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。</p>
<h4 id="3-4-2-1-重载：永不分离"><a href="#3-4-2-1-重载：永不分离" class="headerlink" title="3.4.2.1 重载：永不分离"></a>3.4.2.1 重载：永不分离</h4><p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。</p>
<h1 id="4-格式"><a href="#4-格式" class="headerlink" title="4. 格式"></a>4. 格式</h1><p>术语说明：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。</p>
<h2 id="4-1-大括号"><a href="#4-1-大括号" class="headerlink" title="4.1 大括号"></a>4.1 大括号</h2><h3 id="4-1-1-使用大括号-即使是可选的"><a href="#4-1-1-使用大括号-即使是可选的" class="headerlink" title="4.1.1 使用大括号(即使是可选的)"></a>4.1.1 使用大括号(即使是可选的)</h3><p>大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p>
<h3 id="4-1-2-非空块：K-amp-R-风格"><a href="#4-1-2-非空块：K-amp-R-风格" class="headerlink" title="4.1.2 非空块：K &amp; R 风格"></a>4.1.2 非空块：K &amp; R 风格</h3><p>对于非空块和块状结构，大括号遵循 Kernighan 和 Ritchie 风格 (<a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html" target="_blank" rel="external">Egyptian brackets</a>):</p>
<ul>
<li>左大括号前不换行</li>
<li>左大括号后换行</li>
<li>右大括号前换行</li>
<li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>
</ul>
<p>实例：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyClass() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                something();</div><div class="line">            &#125; <span class="keyword">catch</span> (ProblemException e) &#123;</div><div class="line">                recover();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>4.8.1节给出了enum类的一些例外。</p>
<h3 id="4-1-3-空块：可以用简洁版本"><a href="#4-1-3-空块：可以用简洁版本" class="headerlink" title="4.1.3 空块：可以用简洁版本"></a>4.1.3 空块：可以用简洁版本</h3><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成{}，不需要换行。例外：如果它是一个多块语句的一部分(<code>if/else 或 try/catch/finally</code>) ，即使大括号内没内容，右大括号也要换行。</p>
<p>实例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doNothing</span><span class="params">()</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="4-2-块缩进：4个空格"><a href="#4-2-块缩进：4个空格" class="headerlink" title="4.2 块缩进：4个空格"></a>4.2 块缩进：4个空格</h2><p>每当开始一个新的块，缩进增加4个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p>
<h2 id="4-3-一行一个语句"><a href="#4-3-一行一个语句" class="headerlink" title="4.3 一行一个语句"></a>4.3 一行一个语句</h2><p>每个语句后要换行。</p>
<h2 id="4-4-列限制：80或100"><a href="#4-4-列限制：80或100" class="headerlink" title="4.4 列限制：80或100"></a>4.4 列限制：80或100</h2><p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p>
<p>例外：</p>
<ol>
<li>不可能满足列限制的行(例如， Javadoc 中的一个长 URL，或是一个长的 JSNI 方法参考)。</li>
<li>package 和 import 语句(见3.2节和3.3节)。</li>
<li>注释中那些可能被剪切并粘贴到 shell 中的命令行。</li>
</ol>
<h2 id="4-5-自动换行"><a href="#4-5-自动换行" class="headerlink" title="4.5 自动换行"></a>4.5 自动换行</h2><p>术语说明：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。</p>
<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p>
<p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)</p>
<h3 id="4-5-1-从哪里断开"><a href="#4-5-1-从哪里断开" class="headerlink" title="4.5.1 从哪里断开"></a>4.5.1 从哪里断开</h3><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p>
<ol>
<li><p>如果在非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与 Google 其它语言的编程风格不同(如C++和JavaScript)。 </p>
<ul>
<li>这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的 <code>&amp;（&lt;T extends Foo &amp; Bar&gt;)</code> ，catch块中的管道符号 <code>(catch (FooException | BarException e)</code> </li>
</ul>
</li>
<li><p>如果在赋值运算符处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。</p>
<ul>
<li>这条规则也适用于foreach语句中的分号。</li>
</ul>
</li>
<li>方法名或构造函数名与左括号留在同一行。</li>
<li>逗号(,)与其前面的内容留在同一行。</li>
</ol>
<h3 id="4-5-2-自动换行时缩进至少-4个空格"><a href="#4-5-2-自动换行时缩进至少-4个空格" class="headerlink" title="4.5.2 自动换行时缩进至少+4个空格"></a>4.5.2 自动换行时缩进至少+4个空格</h3><p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。</p>
<p>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。</p>
<p>当一个表达式无法容纳在一行内时，可以依据如下一般规则断开之：</p>
<ul>
<li>在一个逗号后面断开。</li>
<li>在一个操作符前面断开。</li>
<li>宁可选择较高级别的(higher-level)的断开，而非较低级别(lower-level)的断开。</li>
<li>新的一行应该与上一行同一级别表达式的开头处对齐。</li>
<li>如果以上规则导致你的代码混乱或者使你的代码都堆挤在右边，那就代之以缩进8个空格。</li>
</ul>
<p>以下是断开方法的一些例子：</p>
<pre><code>someMethod(longExpression1, longExpression2, longExpression3,
        longExpression4, longExpression5); // 8个空格
var = someMethod1(Expression1,
                  someMethod2(longExpression2,
                              longExpression3));
</code></pre><p>以下是两个断开算术表达式的例子。前者更好，因为断开处位于括号表达式的外边，这是个较高级别的断开。</p>
<pre><code>longName1 = longName2 * (longName3 + longName4 - longName5)
            + 4 * longname6; // PREFER
longName1 = longName2 * (longName3 + longName4
        - longName5) + 4 * longName6; //AVOID
</code></pre><p>以下是两个缩进方法声明的例子。前者是常规情形，后者若使用常规的缩进方式将会使第二行和第三行移得很靠右，所以代这以缩进8个空格。</p>
<pre><code>// CONVENTION INDENTATION
someMethod(int anArg, Object anotherArg,
           String yetAnotherArg,
           Object andStillAnother) {
    ……
}

// INDENT 8 SPACES TO AVOID VERY DEEP INDENTS
private static synchronized horkingLongMethodName(int anArg,
        Object anotherArg, String yetAnotherArg,
        Object andStillAnother) {
    ……
}
</code></pre><p>if语句的换行通常使用8个空格的规则，因为常规缩进(4个空格)会使语句看起来比较费劲。比如：</p>
<pre><code>//DON’T USE THIS INDENTATION
if ((condition1 &amp;&amp; condition2)
    || (condition3 &amp;&amp; condition4)
    || !(condition5 &amp;&amp; condition6)) { //BAD WRAPS
    doSomethingAboutIt(); // MAKE THIS LING EASY TO MISS
}
// USE THIS INDENTATION INSTEAD
if ((condition1 &amp;&amp; condition2)
        || (condition3 &amp;&amp; condition4)
        || !(condition5 &amp;&amp; condition6)) {
    doSomethingAboutIt();
}

// OR USE THIS
if ((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)
        || !(condition5 &amp;&amp; condition6)) {
   doSomthingAoutIt();
}
</code></pre><p>这里有三种可行的方法用于处理三元运算表达式：</p>
<pre><code>alpha = (aLongBooleanExpression) ? beta : gamma;

alpha = (aLongBooleanExpression) ? beta
                                 : gamma;

alpha = (aLongBooleanExpression)
        ? beta
        : gamma;
</code></pre><h2 id="4-6-空白"><a href="#4-6-空白" class="headerlink" title="4.6 空白"></a>4.6 空白</h2><h3 id="4-6-1-垂直空白"><a href="#4-6-1-垂直空白" class="headerlink" title="4.6.1 垂直空白"></a>4.6.1 垂直空白</h3><p>以下情况需要使用一个空行：</p>
<ol>
<li>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。<ul>
<li>例外：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li>
</ul>
</li>
<li>在函数体内，语句的逻辑分组间使用空行。</li>
<li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>
<li>要满足本文档中其他节的空行要求(比如3.3节：import语句)</li>
<li>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。</li>
</ol>
<p>空行将逻辑相关的代码段分隔开，以提高可读性。</p>
<p>下列情况应总是使用两个空行：</p>
<ul>
<li>一个源文件的两个片段(section)之间。</li>
<li>类声明和接口声明之间。</li>
</ul>
<p>下列情况应该总是使用一个空行：</p>
<ul>
<li>两个方法之间。方法与方法之间 以空行分隔。</li>
<li>方法内的局部变量和方法的第一条语句之间。</li>
<li>块注释(参见“5.1.1”)或单行注释(参见5.1.2)之前。</li>
<li>一个方法内的两个逻辑段之间，用以提高可读性。</li>
</ul>
<h3 id="4-6-2-水平空白"><a href="#4-6-2-水平空白" class="headerlink" title="4.6.2 水平空白"></a>4.6.2 水平空白</h3><p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：</p>
<ol>
<li>分隔任何保留字与紧随其后的左括号(()(如if, for catch等)。</li>
<li>分隔任何保留字与其前面的右大括号(})(如else, catch)。</li>
<li>在任何左大括号前({)，两个例外：<ul>
<li><code>@SomeAnnotation({a, b})</code> (不使用空格)。</li>
<li><code>String[][] x = foo;</code> (大括号间没有空格，见下面的Note)。</li>
</ul>
</li>
<li>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：<ul>
<li>类型界限中的<code>&amp;(&lt;T extends Foo &amp; Bar&gt;)</code>。</li>
<li>catch块中的管道符号<code>(catch (FooException | BarException e)</code>。</li>
<li>foreach语句中的分号。</li>
</ul>
</li>
<li>在<code>, : ;</code>及右括号(<code>)</code>)后</li>
<li>如果在一条语句后做注释，则双斜杠(<code>//</code>)两边都要空格。这里可以允许多个空格，但没有必要。</li>
<li>类型和变量之间：<code>List&lt;String&gt; list</code>。</li>
<li>数组初始化中，大括号内的空格是可选的，<ul>
<li><code>new int[] {5, 6}</code> 和 <code>new int[] { 5, 6 }</code> 都是可以的。</li>
</ul>
</li>
</ol>
<blockquote>
<p>注意：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。</p>
</blockquote>
<h3 id="4-6-3-水平对齐：不做要求"><a href="#4-6-3-水平对齐：不做要求" class="headerlink" title="4.6.3 水平对齐：不做要求"></a>4.6.3 水平对齐：不做要求</h3><p>术语说明：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。</p>
<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。</p>
<p>以下示例先展示未对齐的代码，然后是对齐的代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="built_in">int</span> x; <span class="comment">// this is fine</span></div><div class="line"><span class="keyword">private</span> Color <span class="built_in">color</span>; <span class="comment">// this too</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="built_in">int</span>   x;      <span class="comment">// permitted, but future edits</span></div><div class="line"><span class="keyword">private</span> Color <span class="built_in">color</span>;  <span class="comment">// may leave it unaligned</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。 这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)， 这就会让你做许多的无用功，增加了 reviewer 的工作并且可能导致更多的合并冲突。</p>
</blockquote>
<h3 id="4-6-4-空格-Blank-Spaces"><a href="#4-6-4-空格-Blank-Spaces" class="headerlink" title="4.6.4 空格(Blank Spaces)"></a>4.6.4 空格(Blank Spaces)</h3><p>下列情况应该使用空格：</p>
<p>1. 一个紧跟着括号的关键应该被空格分开，例如：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    ….</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：空格不应该置于方法名与其左括号之间，这将有助于区分关键字和方法调用。</p>
</blockquote>
<p>2. 空白应该位于参数列表中逗号的后面。</p>
<p>3. 所有的二元运算符，除了“.”，应该使用空格将之与操作数分开。一元操作符和操作数之间不应该加空格，比如：负号(“-”)，自增(“++”)和自减(“–”)。例如：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">a</span> <span class="literal">+</span><span class="comment">=</span> <span class="comment">c</span> <span class="literal">+</span> <span class="comment">d;</span></div><div class="line"><span class="comment">a</span> <span class="comment">=</span> <span class="comment">(a</span> <span class="literal">+</span> <span class="comment">b)</span> <span class="comment">/</span> <span class="comment">(c</span> <span class="comment">*</span> <span class="comment">d);</span></div><div class="line">        </div><div class="line"><span class="comment">while</span> <span class="comment">(d</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">=</span> <span class="comment">s</span><span class="literal">+</span><span class="literal">+</span><span class="comment">)</span> <span class="comment">&#123;</span></div><div class="line">    <span class="comment">n</span><span class="literal">+</span><span class="literal">+</span><span class="comment">;</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">printSize(“size</span> <span class="comment">is</span> <span class="comment">”</span> <span class="literal">+</span> <span class="comment">foo</span> <span class="literal">+</span> <span class="comment">“\n”);</span></div></pre></td></tr></table></figure>
<p>4. for语句中的表达式应该被空格分开，例如：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for (expr1<span class="comment">; expr2; expr3)</span></div></pre></td></tr></table></figure>
<p>5. 强制转型后应该跟一个空格，例如：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myMethod((<span class="name">byte</span>) aNum, (<span class="name">Object</span>) x)<span class="comment">;</span></div><div class="line">myMethod((<span class="name">int</span>) (<span class="name">cp</span> + <span class="number">5</span>), ((<span class="name">int</span>) (<span class="name">i</span> + <span class="number">3</span>)) + <span class="number">1</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="4-7-用小括号来限定组：推荐"><a href="#4-7-用小括号来限定组：推荐" class="headerlink" title="4.7 用小括号来限定组：推荐"></a>4.7 用小括号来限定组：推荐</h2><p>除非作者和 reviewer 都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。 我们没有理由假设读者能记住整个Java运算符优先级表。</p>
<h2 id="4-8-具体结构"><a href="#4-8-具体结构" class="headerlink" title="4.8 具体结构"></a>4.8 具体结构</h2><h3 id="4-8-1-枚举类"><a href="#4-8-1-枚举类" class="headerlink" title="4.8.1 枚举类"></a>4.8.1 枚举类</h3><p>枚举常量间用逗号隔开，换行可选。</p>
<p>没有方法和文档的枚举类可写成数组初始化的格式：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">Suit</span> &#123; <span class="title">CLUBS</span>, <span class="title">HEARTS</span>, <span class="title">SPADES</span>, <span class="title">DIAMONDS</span> &#125;</span></div></pre></td></tr></table></figure>
<p>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。</p>
<h3 id="4-8-2-变量声明"><a href="#4-8-2-变量声明" class="headerlink" title="4.8.2 变量声明"></a>4.8.2 变量声明</h3><h4 id="4-8-2-1-每次只声明一个变量"><a href="#4-8-2-1-每次只声明一个变量" class="headerlink" title="4.8.2.1 每次只声明一个变量"></a>4.8.2.1 每次只声明一个变量</h4><p>不要使用组合声明，比如 <code>int a, b;</code>。</p>
<h4 id="4-8-2-2-需要时才声明，并尽快进行初始化"><a href="#4-8-2-2-需要时才声明，并尽快进行初始化" class="headerlink" title="4.8.2.2 需要时才声明，并尽快进行初始化"></a>4.8.2.2 需要时才声明，并尽快进行初始化</h4><p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p>
<h3 id="4-8-3-数组"><a href="#4-8-3-数组" class="headerlink" title="4.8.3 数组"></a>4.8.3 数组</h3><h4 id="4-8-3-1-数组初始化：可写成块状结构"><a href="#4-8-3-1-数组初始化：可写成块状结构" class="headerlink" title="4.8.3.1 数组初始化：可写成块状结构"></a>4.8.3.1 数组初始化：可写成块状结构</h4><p>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">new int[] &#123;</div><div class="line">    <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> </div><div class="line">&#125;</div><div class="line"></div><div class="line">new int[] &#123;</div><div class="line">    <span class="number">0</span>,</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">new int[] &#123;</div><div class="line">    <span class="number">0</span>, <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>, <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">new int[]</div><div class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="4-8-3-2-非C风格的数组声明"><a href="#4-8-3-2-非C风格的数组声明" class="headerlink" title="4.8.3.2 非C风格的数组声明"></a>4.8.3.2 非C风格的数组声明</h4><p>中括号是类型的一部分：<code>String[]</code> args， 而非 <code>String args[]</code>。</p>
<h3 id="4-8-4-switch语句"><a href="#4-8-4-switch语句" class="headerlink" title="4.8.4 switch语句"></a>4.8.4 switch语句</h3><p>术语说明：switch 块的大括号内是一个或多个语句组。每个语句组包含一个或多个 switch 标签( case FOO: 或 default: )，后面跟着一条或多条语句。</p>
<h4 id="4-8-4-1-缩进"><a href="#4-8-4-1-缩进" class="headerlink" title="4.8.4.1 缩进"></a>4.8.4.1 缩进</h4><p>与其它块状结构一致，switch块中的内容缩进为4个空格。</p>
<p>每个switch标签后新起一行，再缩进4个空格，写下一条或多条语句。</p>
<h4 id="4-8-4-2-Fall-through：注释"><a href="#4-8-4-2-Fall-through：注释" class="headerlink" title="4.8.4.2 Fall-through：注释"></a>4.8.4.2 Fall-through：注释</h4><p>在一个 switch 块内，每个语句组要么通过 <code>break, continue, return</code> 或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是 OK 的(典型的是用// fall through)。这个特殊的注释并不需要在最后一个语句组(一般是default)中出现。示例：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (input) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">case</span> 2:</div><div class="line">        prepareOneOrTwo();</div><div class="line">        <span class="comment">// fall through</span></div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        handleOneTwoOrThree();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        handleLargeNumber(input);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-8-4-3-default的情况要写出来"><a href="#4-8-4-3-default的情况要写出来" class="headerlink" title="4.8.4.3 default的情况要写出来"></a>4.8.4.3 default的情况要写出来</h4><p>每个 switch 语句都包含一个 default 语句组，即使它什么代码也不包含。</p>
<h3 id="4-8-5-注解-Annotations"><a href="#4-8-5-注解-Annotations" class="headerlink" title="4.8.5 注解(Annotations)"></a>4.8.5 注解(Annotations)</h3><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Override</span></div><div class="line"><span class="variable">@Nullable</span></div><div class="line">public String getNameIfPresent() &#123; ... &#125;</div></pre></td></tr></table></figure>
<p>例外：单个的注解可以和签名的第一行出现在同一行。例如：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Partial</span> <span class="variable">@Mock</span> DataLoader loader;</div></pre></td></tr></table></figure>
<p>参数和局部变量注解没有特定规则。</p>
<h3 id="4-8-6-注释"><a href="#4-8-6-注释" class="headerlink" title="4.8.6 注释"></a>4.8.6 注释</h3><h4 id="4-8-6-1-块注释风格"><a href="#4-8-6-1-块注释风格" class="headerlink" title="4.8.6.1 块注释风格"></a>4.8.6.1 块注释风格</h4><p>块注释与其周围的代码在同一缩进级别。它们可以是 <code>/* ... */</code> 风格，也可以是 <code>// ...</code> 风格。对于多行的 <code>/* ... */</code> 注释，后续行必须从 <code>*</code> 开始， 并且与前一行的 <code>*</code> 对齐。以下示例注释都是OK的。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * This <span class="keyword">is</span>          // <span class="keyword">And</span> so           /* <span class="keyword">Or</span> you can</div><div class="line"> * okay.            // <span class="keyword">is</span> this.          * even <span class="keyword">do</span> this. */</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>注释不要封闭在由星号或其它字符绘制的框架里。</p>
<blockquote>
<p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用 <code>/* ... */</code>。</p>
</blockquote>
<h3 id="4-8-7-Modifiers"><a href="#4-8-7-Modifiers" class="headerlink" title="4.8.7 Modifiers"></a>4.8.7 Modifiers</h3><p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">protected</span> <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">synchronized</span> <span class="keyword">native</span> <span class="keyword">strictfp</span></div></pre></td></tr></table></figure>
<h3 id="4-8-8-简单语句-Simple-Statement"><a href="#4-8-8-简单语句-Simple-Statement" class="headerlink" title="4.8.8 简单语句(Simple Statement)"></a>4.8.8 简单语句(Simple Statement)</h3><p>每行至多包含一条语句，例如：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">argv</span><span class="literal">+</span><span class="literal">+</span><span class="comment">;</span>           <span class="comment">//</span> <span class="comment">Correct</span></div><div class="line"><span class="comment">argc</span><span class="literal">-</span><span class="literal">-</span><span class="comment">;</span>           <span class="comment">//</span> <span class="comment">Correct</span></div><div class="line"><span class="comment">argv</span><span class="literal">+</span><span class="literal">+</span><span class="comment">;</span> <span class="comment">argc</span><span class="literal">-</span><span class="literal">-</span><span class="comment">;</span>    <span class="comment">//</span> <span class="comment">AVOID!</span></div></pre></td></tr></table></figure>
<h3 id="4-8-9-复合语句-Compound-Statements"><a href="#4-8-9-复合语句-Compound-Statements" class="headerlink" title="4.8.9 复合语句(Compound Statements)"></a>4.8.9 复合语句(Compound Statements)</h3><p>复合语句是包含在大括号中的语句序列，形如“{ statements }”。例如下面各段。</p>
<ul>
<li>被括其中的语句应该较之复合语句缩进一个层次。</li>
<li>左大括号“{”应位于复合语句起始行的行尾；右大括号“}”应另起一行并与复合语句首行对齐。</li>
<li>大括号可以被用于所有语句，包括单个语句，只要这些语句是诸如if–else或for控制结构的一部分。这样便于添加语句而无需担心由于忘了加括号而引入bug.</li>
</ul>
<h3 id="4-8-10-返回语句-return-Statements-s"><a href="#4-8-10-返回语句-return-Statements-s" class="headerlink" title="4.8.10 返回语句(return Statements)s"></a>4.8.10 返回语句(return Statements)s</h3><p>一个带返回值的return语句不使用小括号“()”，除非它们以某种方式使返回值更显见。例如：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">return</span>;   </div><div class="line"></div><div class="line"><span class="built_in">return</span> myDisk.<span class="built_in">size</span>();  </div><div class="line"></div><div class="line"><span class="built_in">return</span> (<span class="built_in">size</span> ? <span class="built_in">size</span> ; defaultSize);</div></pre></td></tr></table></figure>
<h3 id="4-8-11-if-if-else-if-else-if-else-语句-if-if-else-if-else-if-else-Statements"><a href="#4-8-11-if-if-else-if-else-if-else-语句-if-if-else-if-else-if-else-Statements" class="headerlink" title="4.8.11 if, if-else, if else-if else 语句(if, if-else, if else-if else Statements)"></a>4.8.11 <code>if, if-else, if else-if else</code> 语句(<code>if, if-else, if else-if else Statements</code>)</h3><p>if-else 语句应该具有如下格式：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：if 语句问题用 “{” 和 “}” 括起来，避免使用如下容易引起错误的格式：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">condition</span>)  <span class="comment">// AVOI! THIS OMITS THE BRACES &#123;&#125;!</span></div><div class="line">    statement;</div></pre></td></tr></table></figure>
<h3 id="4-8-12-for语句-for-Statements"><a href="#4-8-12-for语句-for-Statements" class="headerlink" title="4.8.12 for语句(for Statements)"></a>4.8.12 for语句(for Statements)</h3><p>一个for语句应该具有如下格式：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (initialization; condition; <span class="keyword">update</span>) &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个空的for语句(所有工作都在初始化，条件判断，更新子句中完成)应该具有如下格式：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">initialization</span>; condition; update);</div></pre></td></tr></table></figure>
<p>当在 for 语句的初始化或更新子句中使用逗号时，避免因使用三个以上变量，而导致复杂度提高。若需要，可以在 for 循环之前(为初始化子句)或 for 循环末尾(为更新子句)使用单独的语句。</p>
<h3 id="4-8-13-while语句-while-Statements"><a href="#4-8-13-while语句-while-Statements" class="headerlink" title="4.8.13 while语句(while Statements)"></a>4.8.13 while语句(while Statements)</h3><p>一个 while 语句应该具有如下格式：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (condition) &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个空的 while 语句应该具有如下格式：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="comment">(condition)</span>;</div></pre></td></tr></table></figure>
<h3 id="4-8-14-do-while语句-do-while-Statements"><a href="#4-8-14-do-while语句-do-while-Statements" class="headerlink" title="4.8.14 do-while语句(do-while Statements)"></a>4.8.14 do-while语句(do-while Statements)</h3><p>一个 do-while 语句应该具有如下格式：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="built_in">statements</span>;</div><div class="line">&#125; <span class="keyword">while</span> (condition);</div></pre></td></tr></table></figure>
<h3 id="4-8-15-switch语句-switch-Statements"><a href="#4-8-15-switch语句-switch-Statements" class="headerlink" title="4.8.15 switch语句(switch Statements)"></a>4.8.15 switch语句(switch Statements)</h3><p>一个 switch 语句应该具有如下格式：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (condition) &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">ABC:</span></div><div class="line">    statements;</div><div class="line">    <span class="comment">/* falls through */</span></div><div class="line"><span class="keyword">case</span> <span class="string">DEF:</span> &#123;</div><div class="line">    statements;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;    </div><div class="line"><span class="keyword">case</span> <span class="string">XYZ:</span> &#123;</div><div class="line">    statements;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="string">default:</span></div><div class="line">    <span class="keyword">assert</span> <span class="string">false :</span> condition;  <span class="comment">// Or throw error.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每当一个 case 顺着往下执行时(因为没有 break 语句)，通常应在 break 语句的位置添加注释。上面的示例代码中就包含注释 <code>/* falls through */</code> 。</p>
<p>每个 switch 语句，必须有对应的 default 语句。如果执行不到，可以加上  assert语句。</p>
<p>case 语句后面需要使用 “{“ , “}” 包含语句块。</p>
<h3 id="4-8-16-try-catch语句-try-catch-Statements"><a href="#4-8-16-try-catch语句-try-catch-Statements" class="headerlink" title="4.8.16 try-catch语句(try-catch Statements)"></a>4.8.16 try-catch语句(try-catch Statements)</h3><p>一个 try-catch 语句应该具有如下格式：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    statements;</div><div class="line">&#125; <span class="keyword">catch</span> (ExceptionClass e) &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个 try-catch 语句后面也可能跟着一个 finally 语句，不论 try 代码块是否顺利执行完，它都会被执行。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    statements;</div><div class="line">&#125; <span class="keyword">catch</span> (ExceptionClass e) &#123;</div><div class="line">    statements;</div><div class="line">&#125; finally &#123;</div><div class="line">    statements;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-命名规范-Naming"><a href="#5-命名规范-Naming" class="headerlink" title="5. 命名规范(Naming)"></a>5. 命名规范(Naming)</h1><h2 id="5-1-对所有标识符都通用的规则"><a href="#5-1-对所有标识符都通用的规则" class="headerlink" title="5.1 对所有标识符都通用的规则"></a>5.1 对所有标识符都通用的规则</h2><p>标识符只能使用 ASCII 字母和数字，因此每个有效的标识符名称都能匹配正则表达式 \w+。</p>
<h2 id="5-2-标识符类型的规则"><a href="#5-2-标识符类型的规则" class="headerlink" title="5.2 标识符类型的规则"></a>5.2 标识符类型的规则</h2><h3 id="5-2-1-包名"><a href="#5-2-1-包名" class="headerlink" title="5.2.1 包名"></a>5.2.1 包名</h3><p>一个唯一包名的前缀总是全部小写的 ASCⅡ 字母并且是一个顶级域名，通常是 com，gov，edu，mil，net，org，或1981年ISO 3166标准所指定的标识的国家的英文双字符代码。包名的后续部分根据不同机构各自内部的命名规范而不尽相同。这类命名规范可能以特定目录名的组成来区分部门(department)，项目(project)，机器(machine)，或注册名(login names)。</p>
<p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</p>
<p>例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com<span class="selector-class">.sun</span><span class="selector-class">.eng</span></div><div class="line">com<span class="selector-class">.feibo</span><span class="selector-class">.joke</span></div></pre></td></tr></table></figure>
<h3 id="5-2-2-类名"><a href="#5-2-2-类名" class="headerlink" title="5.2.2 类名"></a>5.2.2 类名</h3><p>类名是一个名词，采用大小写混合方式，每个单词的首字母大写。尽量使你的类名简洁而富于描述。使用完整单词，避免缩写词(除非该缩写词被广泛的使用，如 URL，HTML)。例如：</p>
<p>类名都以 UpperCamelCase 风格编写。</p>
<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。</p>
<p>测试类的命名以它要测试的类的名称开始，以 Test 结束。例如， HashTest 或 HashIntegrationTest。</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Raster</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageSprite</span></span></div></pre></td></tr></table></figure>
<h3 id="5-2-3-方法名"><a href="#5-2-3-方法名" class="headerlink" title="5.2.3 方法名"></a>5.2.3 方法名</h3><p>方法名都以 lowerCamelCase 风格编写。</p>
<p>方法名通常是动词或动词短语。</p>
<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是： <code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code> ，例如 <code>testPop_emptyStack</code>。 并不存在唯一正确的方式来命名测试方法。</p>
<h3 id="5-2-4-常量名"><a href="#5-2-4-常量名" class="headerlink" title="5.2.4 常量名"></a>5.2.4 常量名</h3><p>常量名命名模式为 <code>CONSTANT_CASE</code> ，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？</p>
<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时， 考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。 只是永远不打算改变对象一般是不够的，它要真的一直不变才能将它示为常量。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Constants</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> NUMBER = <span class="number">5</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;<span class="built_in">String</span>&gt; NAMES = ImmutableList.of(<span class="string">"Ed"</span>, <span class="string">"Ann"</span>);</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Joiner COMMA_JOINER = Joiner.on(<span class="string">','</span>);  <span class="comment">// because Joiner is immutable</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;</div><div class="line"><span class="keyword">enum</span> SomeEnum &#123; ENUM_CONSTANT &#125;</div><div class="line"></div><div class="line"><span class="comment">// Not constants</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">String</span> nonFinal = <span class="string">"non-final"</span>;</div><div class="line"><span class="keyword">final</span> <span class="built_in">String</span> nonStatic = <span class="string">"non-static"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; mutableCollection = <span class="keyword">new</span> HashSet&lt;<span class="built_in">String</span>&gt;();</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MyClass.getName());</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">String</span>[] nonEmptyArray = &#123;<span class="string">"these"</span>, <span class="string">"can"</span>, <span class="string">"change"</span>&#125;;</div></pre></td></tr></table></figure>
<p>这些名字通常是名词或名词短语。</p>
<h3 id="5-2-5-非常量字段名"><a href="#5-2-5-非常量字段名" class="headerlink" title="5.2.5 非常量字段名"></a>5.2.5 非常量字段名</h3><p>非常量字段名以 lowerCamelCase 风格编写。</p>
<p>这些名字通常是名词或名词短语。</p>
<h3 id="5-2-6-参数名"><a href="#5-2-6-参数名" class="headerlink" title="5.2.6 参数名"></a>5.2.6 参数名</h3><p>参数名以 lowerCamelCase 风格编写。</p>
<p>参数应该避免用单个字符命名。</p>
<h3 id="5-2-7-局部变量名"><a href="#5-2-7-局部变量名" class="headerlink" title="5.2.7 局部变量名"></a>5.2.7 局部变量名</h3><p>局部变量名以 lowerCamelCase 风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。</p>
<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。</p>
<p>即使局部变量是 final 和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p>
<h3 id="5-2-8-类型变量名"><a href="#5-2-8-类型变量名" class="headerlink" title="5.2.8 类型变量名"></a>5.2.8 类型变量名</h3><p>类型变量可用以下两种风格之一进行命名：</p>
<ul>
<li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>
<li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li>
</ul>
<h2 id="5-3-驼峰式命名法-CamelCase"><a href="#5-3-驼峰式命名法-CamelCase" class="headerlink" title="5.3 驼峰式命名法(CamelCase)"></a>5.3 驼峰式命名法(CamelCase)</h2><p>驼峰式命名法分大驼峰式命名法( UpperCamelCase )和小驼峰式命名法( lowerCamelCase )。 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。 Google 指定了以下的转换方案。</p>
<p>名字从散文形式(prose form)开始:</p>
<ol>
<li>把短语转换为纯 ASCII 码，并且移除任何单引号。例如： “Müller’s algorithm” 将变成 “Muellers algorithm”。</li>
<li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<ul>
<li>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li>
</ul>
</li>
<li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：<ul>
<li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li>
<li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>
</ul>
</li>
<li>最后将所有的单词连接起来得到一个标识符。</li>
</ol>
<p>实例：</p>
<table>
<thead>
<tr>
<th>Prose form</th>
<th>Correct</th>
<th>Incorrect</th>
</tr>
</thead>
<tbody>
<tr>
<td>“XML HTTP request”</td>
<td>XmlHttpRequest</td>
<td>XMLHTTPRequest</td>
</tr>
<tr>
<td>“new customer ID”</td>
<td>newCustomerId</td>
<td>newCustomerID</td>
</tr>
<tr>
<td>“inner stopwatch”</td>
<td>innerStopwatch</td>
<td>innerStopWatch</td>
</tr>
<tr>
<td>“supports IPv6 on iOS?”</td>
<td>supportsIpv6OnIos</td>
<td>supportsIPv6OnIOS</td>
</tr>
<tr>
<td>“YouTube importer”</td>
<td>YouTubeImporter</td>
<td>YoutubeImporter*</td>
</tr>
</tbody>
</table>
<p>加星号处表示可以，但不推荐。</p>
<blockquote>
<p>注意：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名 checkNonempty 和 checkNonEmpty 也都是正确的。</p>
</blockquote>
<h1 id="6-编程实践"><a href="#6-编程实践" class="headerlink" title="6. 编程实践"></a>6. 编程实践</h1><h2 id="6-1-Override：-能用则用"><a href="#6-1-Override：-能用则用" class="headerlink" title="6.1 @Override： 能用则用"></a>6.1 @Override： 能用则用</h2><p>只要是合法的，就把@Override注解给用上。</p>
<h2 id="6-2-捕获的异常：不能忽视"><a href="#6-2-捕获的异常：不能忽视" class="headerlink" title="6.2 捕获的异常：不能忽视"></a>6.2 捕获的异常：不能忽视</h2><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个 AssertionError 重新抛出。)</p>
<p>如果它确实是不需要在 catch 块中做任何响应，需要做注释加以说明(如下面的例子)。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">int</span> i = Integer.parseInt(response);</div><div class="line">    <span class="function"><span class="keyword">return</span> <span class="title">handleNumericResponse</span><span class="params">(i)</span></span>;</div><div class="line">&#125; <span class="keyword">catch</span> (NumberFormatException ok) &#123;</div><div class="line">    <span class="comment">// it's not numeric; that's fine, just continue</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">return</span> <span class="title">handleTextResponse</span><span class="params">(response)</span></span>;</div></pre></td></tr></table></figure>
<p>例外：在测试中，如果一个捕获的异常被命名为 expected，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常， 因此在这里就没有必要加注释。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    emptyStack.pop();</div><div class="line">    fail();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException expected) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-3-静态成员：使用类进行调用"><a href="#6-3-静态成员：使用类进行调用" class="headerlink" title="6.3 静态成员：使用类进行调用"></a>6.3 静态成员：使用类进行调用</h2><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Foo aFoo = ...<span class="comment">;</span></div><div class="line">Foo.aStaticMethod()<span class="comment">; // good</span></div><div class="line">aFoo.aStaticMethod()<span class="comment">; // bad</span></div><div class="line">somethingThatYieldsAFoo().aStaticMethod()<span class="comment">; // very bad</span></div></pre></td></tr></table></figure>
<h2 id="6-4-Finalizers-禁用"><a href="#6-4-Finalizers-禁用" class="headerlink" title="6.4 Finalizers: 禁用"></a>6.4 Finalizers: 禁用</h2><p>极少会去重载 Object.finalize。</p>
<blockquote>
<p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解Effective Java 第7条款：“Avoid Finalizers”，然后不要使用它。</p>
</blockquote>
<h1 id="7-Javadoc"><a href="#7-Javadoc" class="headerlink" title="7. Javadoc"></a>7. Javadoc</h1><h2 id="7-1-格式"><a href="#7-1-格式" class="headerlink" title="7.1 格式"></a>7.1 格式</h2><h3 id="7-1-1-一般形式"><a href="#7-1-1-一般形式" class="headerlink" title="7.1.1 一般形式"></a>7.1.1 一般形式</h3><p>Javadoc 块的基本格式如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Multiple lines of Javadoc text are written here,</div><div class="line"> * wrapped normally...</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(String p1)</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure>
<p>或者是以下单行形式：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** An especially short bit of Javadoc. *</span>/</span></span></div></pre></td></tr></table></figure>
<p>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p>
<h3 id="7-1-2-段落"><a href="#7-1-2-段落" class="headerlink" title="7.1.2 段落"></a>7.1.2 段落</h3><p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。 除了第一个段落，每个段落第一个单词前都有标签</p><p>，并且它和第一个单词间没有空格。</p>
<h3 id="7-1-3-Javadoc-标记"><a href="#7-1-3-Javadoc-标记" class="headerlink" title="7.1.3 Javadoc 标记"></a>7.1.3 Javadoc 标记</h3><p>标准的 Javadoc 标记按以下顺序出现：@param, @return, @throws, @deprecated, 前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p>
<h2 id="7-2-摘要片段"><a href="#7-2-摘要片段" class="headerlink" title="7.2 摘要片段"></a>7.2 摘要片段</h2><p>每个类或成员的 Javadoc 以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。</p>
<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以 <code>A {@code Foo} is a...</code> 或 <code>This method returns...</code> 开头, 它也不会是一个完整的祈使句，如 <code>Save the record...</code> 。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p>
<blockquote>
<p>Tip：一个常见的错误是把简单的 Javadoc 写成 <code>/** @return the customer ID */</code> ，这是不正确的。它应该写成 <code>/** Returns the customer ID. */</code>。</p>
</blockquote>
<h2 id="7-3-哪里需要使用-Javadoc"><a href="#7-3-哪里需要使用-Javadoc" class="headerlink" title="7.3 哪里需要使用 Javadoc"></a>7.3 哪里需要使用 Javadoc</h2><p>至少在每个 public 类及它的每个 public 和 protected 成员处使用 Javadoc，以下是一些例外：</p>
<h3 id="7-3-1-例外：不言自明的方法"><a href="#7-3-1-例外：不言自明的方法" class="headerlink" title="7.3.1 例外：不言自明的方法"></a>7.3.1 例外：不言自明的方法</h3><p>对于简单明显的方法如 getFoo，Javadoc 是可选的(即，是可以不写的)。这种情况下除了写 “Returns the foo” ，确实也没有什么值得写了。</p>
<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p>
<blockquote>
<p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名 getCanonicalName， 就不应该忽视文档说明，因为读者很可能不知道词语 canonical name 指的是什么。</p>
</blockquote>
<h3 id="7-3-2-例外：重载"><a href="#7-3-2-例外：重载" class="headerlink" title="7.3.2 例外：重载"></a>7.3.2 例外：重载</h3><p>如果一个方法重载了超类中的方法，那么 Javadoc 并非必需的。</p>
<h3 id="7-3-3-可选的-Javadoc"><a href="#7-3-3-可选的-Javadoc" class="headerlink" title="7.3.3 可选的 Javadoc"></a>7.3.3 可选的 Javadoc</h3><p>对于包外不可见的类和方法，如有需要，也是要使用 Javadoc 的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为， 那么这个注释应该写成 Javadoc，这样更统一更友好。</p>
<h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h2><p><a href="http://hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java StyleGuide 中文翻译</a></p>
<p><a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_blank" rel="external">Google Java StyleGuide 官方英文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-术语说明&quot;&gt;&lt;a href=&quot;#1-1-术语说明&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Java" scheme="http://linfuyan.com/tags/Java/"/>
    
      <category term="规范" scheme="http://linfuyan.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="指南" scheme="http://linfuyan.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="Google" scheme="http://linfuyan.com/tags/Google/"/>
    
      <category term="编码" scheme="http://linfuyan.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 编码风格指南</title>
    <link href="http://linfuyan.com/objective-c-coding-style-guide/"/>
    <id>http://linfuyan.com/objective-c-coding-style-guide/</id>
    <published>2015-11-11T13:11:50.000Z</published>
    <updated>2015-11-20T09:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h2><p>源文件编码格式为 UTF-8</p>
<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>使用英语，变量的命名等已英语单词命名，不要使用汉语拼音。</p>
<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>使用 <code>#pragma mark</code> 来为方法分组。</p>
<h2 id="间距与空白"><a href="#间距与空白" class="headerlink" title="间距与空白"></a>间距与空白</h2><ul>
<li>一个缩进使用 4 个空格，不要使用制表符。可以在 Xcode 中配置自动将 Tab 转化为空格。在 Xcode &gt; Preferences &gt; Text Editing 将 Tab 和自动缩进都设置为 4 个空格。</li>
<li>行尾不允许留有空格。</li>
<li>关键字及符号之间需要留有 1 个空格。</li>
<li>方法或者代码块之间留有一行空白。</li>
</ul>
<h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h2><ul>
<li>方法和大括号及其他大括号( if / else / switch / while 等等)始终和声明在同一行开始，在新的一行结束。</li>
</ul>
<p>以下是正确的：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (user.isHappy) &#123;</div><div class="line">  //<span class="keyword">Do</span> something</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  //<span class="keyword">Do</span> something <span class="keyword">else</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是不正确的：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (user.isHappy)</div><div class="line">&#123;</div><div class="line">    //<span class="keyword">Do</span> something</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    //<span class="keyword">Do</span> something <span class="keyword">else</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><ul>
<li>应该避免以冒号对齐的方式来调用方法。因为有时方法签名可能有3个以上的冒号和冒号对齐会使代码更加易读。请不要这样做，尽管冒号对齐的方法包含代码块，因为 Xcode 的对齐方式令它难以辨认。</li>
</ul>
<p>应该：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// blocks are easily readable</span></div><div class="line">[UIView <span class="string">animateWithDuration:</span><span class="number">1.0</span> <span class="string">animations:</span>^&#123;</div><div class="line">  <span class="comment">// something</span></div><div class="line">&#125; <span class="string">completion:</span>^(BOOL finished) &#123;</div><div class="line">  <span class="comment">// something</span></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// colon-aligning makes the block indentation hard to read</span></div><div class="line">[UIView animateWithDuration:<span class="number">1.0</span></div><div class="line"><span class="symbol">                 animations:</span>^&#123;</div><div class="line">                     <span class="comment">// something</span></div><div class="line">                 &#125;</div><div class="line"><span class="symbol">                 completion:</span>^(BOOL finished) &#123;</div><div class="line">                     <span class="comment">// something</span></div><div class="line">                 &#125;];</div></pre></td></tr></table></figure>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>长的，描述性的方法和变量命名是好的。</li>
</ul>
<p>应该：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UIButton *settingsButton<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UIButton *setBut<span class="comment">;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>三个字符前缀应该经常用在类和常量命名，但在Core Data的实体名中应被忽略。</p>
</blockquote>
<ul>
<li>常量应该使用驼峰式命名规则，所有的单词首字母大写和加上与类名有关的前缀。</li>
</ul>
<p>应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSTimeInterval</span> <span class="keyword">const</span> RWTTutorialViewControllerNavigationFadeAnimationDuration = <span class="number">0.3</span>;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSTimeInterval</span> <span class="keyword">const</span> fadetime = <span class="number">1.7</span>;</div></pre></td></tr></table></figure>
<ul>
<li>属性也是使用驼峰式，但首单词的首字母小写。对属性使用auto-synthesis，而不是手动编写@synthesize语句，除非你有一个好的理由。</li>
</ul>
<p>应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *descriptiveVariableName;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id varnm<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>当使用属性时，实例变量应该使用 <code>self.</code> 来访问和改变。这就意味着所有属性将会视觉效果不同，因为它们前面都有 <code>self.</code> 。</p>
<p>但有一个特例：在初始化方法里，实例变量(例如，_variableName)应该直接被使用来避免 <code>getters/setters</code> 潜在的副作用。</p>
<p>局部变量不应该包含下划线。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在方法签名中，应该在方法类型(-/+ 符号)之后有一个空格。在方法各个段之间应该也有一个空格(符合 Apple 的风格)。在参数之前应该包含一个具有描述性的关键字来描述参数。</p>
<p>“and”这个词的用法应该保留。它不应该用于多个参数来说明，就像 initWithWidth:height 以下这个例子：</p>
<p>应该：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setExampleText:<span class="params">(NSString *)</span>text image:<span class="params">(UIImage *)</span>image;</div><div class="line">- <span class="params">(void)</span>sendAction:<span class="params">(SEL)</span>aSelector to:<span class="params">(id)</span>anObject forAllCells:<span class="params">(BOOL)</span>flag;</div><div class="line">- <span class="params">(id)</span>viewWithTag:<span class="params">(NSInteger)</span>tag;</div><div class="line">- <span class="params">(instancetype)</span>initWithWidth:<span class="params">(CGFloat)</span>width height:<span class="params">(CGFloat)</span>height;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">setT</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">text</span> <span class="selector-tag">i</span><span class="selector-pseudo">:(UIImage</span> *)<span class="selector-tag">image</span>;</div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">sendAction</span><span class="selector-pseudo">:(SEL)aSelector</span> <span class="selector-pseudo">:(id)anObject</span> <span class="selector-pseudo">:(BOOL)flag</span>;</div><div class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">taggedView</span><span class="selector-pseudo">:(NSInteger)tag</span>;</div><div class="line"><span class="selector-tag">-</span> (instancetype)<span class="selector-tag">initWithWidth</span><span class="selector-pseudo">:(CGFloat)width</span> <span class="selector-tag">andHeight</span><span class="selector-pseudo">:(CGFloat)height</span>;</div><div class="line"><span class="selector-tag">-</span> (instancetype)<span class="selector-tag">initWith</span><span class="selector-pseudo">:(int)width</span> <span class="selector-tag">and</span><span class="selector-pseudo">:(int)height</span>;  <span class="comment">// Never do this.</span></div></pre></td></tr></table></figure>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量尽量以描述性的方式来命名。单个字符的变量命名应该尽量避免，除了在for()循环。</p>
<p>星号表示变量是指针。例如， <code>NSString *text</code> 既不是 <code>NSString* text</code> 也不是 <code>NSString * text</code>，除了一些特殊情况下常量。</p>
<p>私有变量应该尽可能代替实例变量的使用。尽管使用实例变量是一种有效的方式，但更偏向于使用属性来保持代码一致性。</p>
<p>通过使用’back’属性( _variable ，变量名前面有下划线)直接访问实例变量应该尽量避免，除了在初始化方法( init , initWithCoder: , 等…)， dealloc 方法和自定义的 setters 和 getters 。想了解关于如何在初始化方法和 dealloc 直接使用 Accessor 方法的更多信息，查看这里。</p>
<p>应该：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> <span class="attribute">RWTTutorial </span>: NSObject</div><div class="line"><span class="variable">@property</span> (strong, nonatomic) NSString *tutorialName;</div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="class"><span class="keyword">interface</span> <span class="title">RWTTutorial</span> : NSObject </span>&#123;</div><div class="line">    NSString *tutorialName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性特性"><a href="#属性特性" class="headerlink" title="属性特性"></a>属性特性</h2><ul>
<li>所有属性特性应该显式地列出来，有助于新手阅读代码。属性特性的顺序应该是 storage、atomicity，与在 Interface Builder 连接 UI 元素时自动生成代码一致。</li>
</ul>
<p>应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</div></pre></td></tr></table></figure>
<ul>
<li>NSString应该使用copy而不是strong的属性特性。</li>
</ul>
<blockquote>
<p>为什么？即使你声明一个NSString的属性，有人可能传入一个NSMutableString的实例，然后在你没有注意的情况下修改它。</p>
</blockquote>
<p>应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *tutorialName;</div></pre></td></tr></table></figure>
<h2 id="点符号语法"><a href="#点符号语法" class="headerlink" title="点符号语法"></a>点符号语法</h2><ul>
<li>点语法是一种很方便封装访问方法调用的方式。当你使用点语法时，通过使用 getter 或 setter 方法，属性仍然被访问或修改。想了解更多，阅读<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html" target="_blank" rel="external">这里</a>。</li>
</ul>
<blockquote>
<p>点语法应该<strong>总是</strong>被用来访问和修改属性，因为它使代码更加简洁。[]符号更偏向于用在其他例子。</p>
</blockquote>
<p>应该：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSInteger arrayCount = [self.array <span class="built_in">count</span>]<span class="comment">;</span></div><div class="line">view.<span class="keyword">backgroundColor </span>= [UIColor <span class="keyword">orangeColor];</span></div><div class="line">[UIApplication <span class="keyword">sharedApplication].delegate;</span></div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> arrayCount = <span class="keyword">self</span>.array.count;</div><div class="line">[view setBackgroundColor:[<span class="built_in">UIColor</span> orangeColor]];</div><div class="line"><span class="built_in">UIApplication</span>.sharedApplication.delegate;</div></pre></td></tr></table></figure>
<h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><ul>
<li>NSString、 NSDictionary、 NSArray 和 NSNumber 的字面值应该在创建这些类的不可变实例时被使用。请特别注意 nil 值不能传入 NSArray 和 NSDictionary 字面值，因为这样会导致 crash。</li>
</ul>
<p>应该：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSArray *names = @[@<span class="string">"Brian"</span>, @<span class="string">"Matt"</span>, @<span class="string">"Chris"</span>, @<span class="string">"Alex"</span>, @<span class="string">"Steve"</span>, @<span class="string">"Paul"</span>]<span class="comment">;</span></div><div class="line">NSDictionary *productManagers = @&#123;@<span class="string">"iPhone"</span>: @<span class="string">"Kate"</span>, @<span class="string">"iPad"</span>: @<span class="string">"Kamal"</span>, @<span class="string">"Mobile Web"</span>: @<span class="string">"Bill"</span>&#125;<span class="comment">;</span></div><div class="line">NSNumber *<span class="keyword">shouldUseLiterals </span>= @YES<span class="comment">;</span></div><div class="line">NSNumber *<span class="keyword">buildingStreetNumber </span>= @<span class="number">10018</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *names = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"Brian"</span>, <span class="string">@"Matt"</span>, <span class="string">@"Chris"</span>, <span class="string">@"Alex"</span>, <span class="string">@"Steve"</span>, <span class="string">@"Paul"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSDictionary</span> *productManagers = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys: <span class="string">@"Kate"</span>, <span class="string">@"iPhone"</span>, <span class="string">@"Kamal"</span>, <span class="string">@"iPad"</span>, <span class="string">@"Bill"</span>, <span class="string">@"Mobile Web"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSNumber</span> *shouldUseLiterals = [<span class="built_in">NSNumber</span> numberWithBool:<span class="literal">YES</span>];</div><div class="line"><span class="built_in">NSNumber</span> *buildingStreetNumber = [<span class="built_in">NSNumber</span> numberWithInteger:<span class="number">10018</span>];</div></pre></td></tr></table></figure>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量是容易重复被使用和无需通过查找和代替就能快速修改值。常量应该使用static来声明而不是使用#define，除非显式地使用宏。</p>
<p>常量常用的命名方法是：若常量局限于某“编译单元”（translation unit，也就是“实现文件”， implementation file）之内，则在前面加字母k, 如kAnimationDuration；若常量在类之外可见，则通常以类名为前缀。应该如 <code>static NSString * const</code> 而不是 <code>static const NSString *</code>。</p>
<p>应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> RWTAboutViewControllerCompanyName = <span class="string">@"RayWenderlich.com"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">CGFloat</span> <span class="keyword">const</span> RWTImageThumbnailHeight = <span class="number">50.0</span>;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSString</span> *RWTAboutViewControllerCompanyName = <span class="string">@"RayWenderlich.com"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> RWTImageThumbnailHeight = <span class="number">50.0</span>;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CompanyName @<span class="meta-string">"RayWenderlich.com"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> thumbnailHeight 2</span></div></pre></td></tr></table></figure>
<ul>
<li>常量指针：初始化之后不能赋值。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> pt1;</div></pre></td></tr></table></figure>
<ul>
<li>指向常量的指针：初始化之后可以赋值，即指向别的常量，指针本身的值可以修改。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> * pt2;</div></pre></td></tr></table></figure>
<ul>
<li>指向常量的常量指针</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> pt3;</div></pre></td></tr></table></figure>
<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><ul>
<li>当使用 enum 时，推荐使用新的固定基本类型规格，因为它有更强的类型检查和代码补全。现在 SDK 有一个宏 NS_ENUM() 来帮助和鼓励你使用固定的基本类型。</li>
</ul>
<p>例如：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">RWTLeftMenuTopItemType</span>) &#123;</div><div class="line">    <span class="type">RWTLeftMenuTopItemMain</span>,</div><div class="line">    <span class="type">RWTLeftMenuTopItemShows</span>,</div><div class="line">    <span class="type">RWTLeftMenuTopItemSchedule</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>你也可以显式地赋值(展示旧的k-style常量定义)：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">RWTGlobalConstants</span>) &#123;</div><div class="line">    <span class="type">RWTPinSizeMin</span> = 1,</div><div class="line">    <span class="type">RWTPinSizeMax</span> = 5,</div><div class="line">    <span class="type">RWTPinCountMin</span> = 100,</div><div class="line">    <span class="type">RWTPinCountMax</span> = 500,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>旧的 k-style 常量定义应该避免，除非编写 Core Foundation C 的代码。</p>
<p>不应该：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">GlobalConstants</span> &#123;</span></div><div class="line">    kMaxPinSize = <span class="number">5</span>,</div><div class="line">    kMaxPinCount = <span class="number">500</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Case语句"><a href="#Case语句" class="headerlink" title="Case语句"></a>Case语句</h2><ul>
<li>大括号在 case 语句中必须的，不仅仅是 case 语句包含多行代码时，大括号都应该加上。</li>
</ul>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="keyword">condition</span>) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 这个是不应该的</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>: &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="comment">// Multi-line example using braces</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>: &#123; <span class="comment">// 应该的</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">default</span>: </div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>有很多次，当相同代码被多个cases使用时，一个fall-through应该被使用。一个fall-through就是在case最后移除’break’语句，这样就能够允许执行流程跳转到下一个case值。为了代码更加清晰，一个fall-through需要注释一下。</li>
</ul>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="keyword">condition</span>) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        <span class="comment">// ** fall-through! **</span></div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        <span class="comment">// code executed for values 1 and 2</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>: </div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当在switch使用枚举类型时，’default’是不需要的。例如：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;</div><div class="line"><span class="keyword">switch</span> (menuType) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">RWTLeftMenuTopItemMain:</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">RWTLeftMenuTopItemShows:</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">RWTLeftMenuTopItemSchedule:</span></div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><p>私有属性应该在类的实现文件中的类扩展(匿名分类)中声明，命名分类(比如RWTPrivate或private)应该从不使用除非是扩展其他类。匿名分类应该通过使用<headerfile>+Private.h文件的命名规则暴露给测试。</headerfile></p>
<p>例如：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> RWTDetailViewController ()</div><div class="line"><span class="variable">@property</span> (strong, nonatomic) GADBannerView *googleAdView;</div><div class="line"><span class="variable">@property</span> (strong, nonatomic) ADBannerView *iAdView;</div><div class="line"><span class="variable">@property</span> (strong, nonatomic) UIWebView *adXWebView;</div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><ul>
<li>Objective-C 使用 YES 和 NO。因为 true 和 false 应该只在 CoreFoundation， C 或 C++ 代码使用。既然 nil 解析成 NO ，所以没有必要在条件语句比较。不要拿某样东西直接与 YES 比较，因为 YES 被定义为 1 而一个 BOOL 能被设置为8位。</li>
</ul>
<p>这是为了在不同文件保持一致性和在视觉上更加简洁而考虑。</p>
<p>应该：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(someObject)</span> &#123;&#125;</div><div class="line"><span class="keyword">if</span> <span class="comment">(![anotherObject boolValue])</span> &#123;&#125;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(someObject == nil)</span> &#123;&#125;</div><div class="line"><span class="keyword">if</span> <span class="comment">([anotherObject boolValue] == NO)</span> &#123;&#125;</div><div class="line"><span class="keyword">if</span> <span class="comment">(isAwesome == YES)</span> &#123;&#125; <span class="comment">// Never do this.</span></div><div class="line"><span class="keyword">if</span> <span class="comment">(isAwesome == true)</span> &#123;&#125; <span class="comment">// Never do this.</span></div></pre></td></tr></table></figure>
<ul>
<li>如果BOOL属性的名字是一个形容词，属性就能忽略”is”前缀，但要指定get访问器的惯用名称。例如：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">getter</span>=isEditable) <span class="built_in">BOOL</span> editable;</div></pre></td></tr></table></figure>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul>
<li>条件语句主体为了防止出错应该使用大括号包围，即使条件语句主体能够不用大括号编写(如，只用一行代码)。这些错误包括添加第二行代码和期望它成为 if 语句；还有，<a href="http://programmers.stackexchange.com/a/16530" target="_blank" rel="external">even more dangerous defect</a> 可能发生在if语句里面一行代码被注释了，然后下一行代码不知不觉地成为if语句的一部分。除此之外，这种风格与其他条件语句的风格保持一致，所以更加容易阅读。</li>
</ul>
<p>应该：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">error</span>) &#123;</div><div class="line"><span class="built_in">    return</span> success;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">error</span>)</div><div class="line"><span class="built_in">    return</span> success;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">error</span>) <span class="literal">return</span> success;</div></pre></td></tr></table></figure>
<h2 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h2><p>当需要提高代码的清晰性和简洁性时，三元操作符 ?: 才会使用。单个条件求值常常需要它。多个条件求值时，如果使用 if 语句或重构成实例变量时，代码会更加易读。一般来说，最好使用三元操作符是在根据条件来赋值的情况下。</p>
<p>Non-boolean 的变量与某东西比较，加上括号()会提高可读性。如果被比较的变量是 boolean 类型，那么就不需要括号。</p>
<p>应该：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">NSInteger value</span> = 5;</div><div class="line"><span class="attribute">result</span> = (value != 0) ? x : y;</div><div class="line"><span class="attribute">BOOL isHorizontal</span> = YES;</div><div class="line"><span class="attribute">result</span> = isHorizontal ? x : y;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">result</span> = a &gt; b <span class="meta">? x = c &gt; d ?</span> c : d : y;</div></pre></td></tr></table></figure>
<h2 id="Init方法"><a href="#Init方法" class="headerlink" title="Init方法"></a>Init方法</h2><p>Init 方法应该遵循 Apple 生成代码模板的命名规则，返回类型应该使用 instancetype 而不是 id。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (instancetype)<span class="keyword">init</span> &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类构造方法"><a href="#类构造方法" class="headerlink" title="类构造方法"></a>类构造方法</h2><p>当类构造方法被使用时，它应该返回类型是instancetype而不是id。这样确保编译器正确地推断结果类型。</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface <span class="type">Airplane</span></div><div class="line">+ (instance<span class="keyword">type</span>)airplaneWithType:(<span class="type">RWTAirplaneType</span>)<span class="keyword">type</span>;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>关于更多 instancetype，请查看<a href="http://nshipster.com/instancetype/" target="_blank" rel="external">这里</a>。</p>
<h2 id="CGRect函数"><a href="#CGRect函数" class="headerlink" title="CGRect函数"></a>CGRect函数</h2><p>当访问CGRect里的x, y, width, 或 height时，应该使用CGGeometry函数而不是直接通过结构体来访问。引用Apple的CGGeometry：</p>
<blockquote>
<p>在这个参考文档中所有的函数，接受CGRect结构体作为输入，在计算它们结果时隐式地标准化这些rectangles。因此，你的应用程序应该避免直接访问和修改保存在CGRect数据结构中的数据。相反，使用这些函数来操纵rectangles和获取它们的特性。</p>
</blockquote>
<p>应该：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CGRect frame</span> = self.view.frame;</div><div class="line"><span class="attribute">CGFloat x</span> = CGRectGetMinX(frame);</div><div class="line"><span class="attribute">CGFloat y</span> = CGRectGetMinY(frame);</div><div class="line"><span class="attribute">CGFloat width</span> = CGRectGetWidth(frame);</div><div class="line"><span class="attribute">CGFloat height</span> = CGRectGetHeight(frame);</div><div class="line"><span class="attribute">CGRect frame</span> = CGRectMake(0.0, 0.0, width, height);</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CGRect frame</span> = self.view.frame;</div><div class="line"><span class="attribute">CGFloat x</span> = frame.origin.x;</div><div class="line"><span class="attribute">CGFloat y</span> = frame.origin.y;</div><div class="line"><span class="attribute">CGFloat width</span> = frame.size.width;</div><div class="line"><span class="attribute">CGFloat height</span> = frame.size.height;</div><div class="line"><span class="attribute">CGRect frame</span> = (CGRect)&#123; .origin = CGPointZero, .size = frame.size &#125;;</div></pre></td></tr></table></figure>
<h2 id="黄金路径"><a href="#黄金路径" class="headerlink" title="黄金路径"></a>黄金路径</h2><p>当使用条件语句编码时，左手边的代码应该是”golden” 或 “happy”路径。也就是不要嵌套if语句，多个返回语句也是OK。</p>
<p>应该：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)someMethod &#123;</div><div class="line">    <span class="keyword">if</span> (![someOther boolValue]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//Do something important</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- <span class="comment">(void)</span>someMethod &#123;</div><div class="line">    <span class="keyword">if</span> <span class="comment">([someOther boolValue])</span> &#123;</div><div class="line">        <span class="comment">//Do something important</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当方法通过引用来返回一个错误参数，判断返回值而不是错误变量。</p>
<p>应该：</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSError *<span class="built_in">error</span>;</div><div class="line"><span class="keyword">if</span> (![<span class="built_in">self</span> trySomethingWithError:&amp;<span class="built_in">error</span>]) &#123;</div><div class="line">    // Handle <span class="built_in">Error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不应该：</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSError *<span class="built_in">error</span>;</div><div class="line">[<span class="built_in">self</span> trySomethingWithError:&amp;<span class="built_in">error</span>];</div><div class="line"><span class="keyword">if</span> (<span class="built_in">error</span>) &#123;</div><div class="line">    // Handle <span class="built_in">Error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在成功的情况下，有些 Apple 的 APIs 记录垃圾值( garbage values )到错误参数(如果 non-NULL )，那么判断错误值会导致 false 负值和 crash。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例对象应该使用线程安全模式来创建共享实例。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype)sharedInstance </span>&#123;</div><div class="line">    static id <span class="keyword">sharedInstance </span>= nil<span class="comment">;</span></div><div class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</div><div class="line">        <span class="keyword">sharedInstance </span>= [[self alloc] init]<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">    return <span class="keyword">sharedInstance;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这可以防止<a href="http://cocoasamurai.blogspot.com/2011/04/singletons-your-doing-them-wrong.html" target="_blank" rel="external">有时可能产生的崩溃</a></p>
<h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>换行符是一个很重要的主题，因为它的风格指南主要为了打印和网上的可读性。</p>
<p>例如：</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.productsRequest = <span class="comment">[<span class="comment">[SKProductsRequest alloc]</span> initWithProductIdentifiers:productIdentifiers]</span>;</div></pre></td></tr></table></figure>
<p>一行很长的代码应该分成两行代码，下一行用两个空格隔开。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.productsRequest = <span class="comment">[<span class="comment">[SKProductsRequest alloc]</span> </span></div><div class="line">  initWithProductIdentifiers:productIdentifiers];</div></pre></td></tr></table></figure>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>如果有一个以上的 import 语句，就对这些语句进行分组。每个分组的注释是可选的。<br>注：对于模块使用 @import 语法。</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Frameworks</span></div><div class="line">@<span class="keyword">import</span> QuartzCore;</div><div class="line">  </div><div class="line"><span class="comment">// Models</span></div><div class="line">#<span class="keyword">import</span> <span class="string">"NYTUser.h"</span></div><div class="line"></div><div class="line"><span class="comment">// Views</span></div><div class="line">#<span class="keyword">import</span> <span class="string">"NYTButton.h"</span></div><div class="line">#<span class="keyword">import</span> <span class="string">"NYTUserView.h"</span></div></pre></td></tr></table></figure>
<h2 id="飞博可接受的缩略词"><a href="#飞博可接受的缩略词" class="headerlink" title="飞博可接受的缩略词"></a>飞博可接受的缩略词</h2><table>
<thead>
<tr>
<th>缩略词</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>VC</td>
<td>ViewController</td>
</tr>
<tr>
<td>VM</td>
<td>ViewModel</td>
</tr>
</tbody>
</table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h3><p><a href="http://www.iwangke.me/objc-style-guide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></p>
<p><a href="http://linfuyan.com/apple-cocoa-coding-style-guide/">Apple 官方 Cocoa 编码规范</a></p>
<p><a href="http://www.csdn.net/article/2015-06-01/2824818-objective-c-style-guide/1" target="_blank" rel="external">Objective-C编码规范：26个方面解决iOS开发问题</a></p>
<p><a href="https://github.com/NYTimes/objective-c-style-guide/blob/master/README_zh-Hans.md" target="_blank" rel="external">纽约时报 移动团队 Objective-C 规范指南</a></p>
<h3 id="英文版"><a href="#英文版" class="headerlink" title="英文版"></a>英文版</h3><p><a href="https://google.github.io/styleguide/objcguide.xml" target="_blank" rel="external">Google Objective-C Style Guide</a></p>
<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html" target="_blank" rel="external">Coding Guidelines for Cocoa</a></p>
<p><a href="https://github.com/raywenderlich/objective-c-style-guide" target="_blank" rel="external">Raywenderlich.com Objective-C style guide</a></p>
<p><a href="https://github.com/NYTimes/objective-c-style-guide" target="_blank" rel="external">NYTimes Objective-C Style Guide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件编码&quot;&gt;&lt;a href=&quot;#文件编码&quot; class=&quot;headerlink&quot; title=&quot;文件编码&quot;&gt;&lt;/a&gt;文件编码&lt;/h2&gt;&lt;p&gt;源文件编码格式为 UTF-8&lt;/p&gt;
&lt;h2 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="iOS" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/iOS/"/>
    
    
      <category term="代码" scheme="http://linfuyan.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
      <category term="规范" scheme="http://linfuyan.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="iOS" scheme="http://linfuyan.com/tags/iOS/"/>
    
      <category term="指南" scheme="http://linfuyan.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="Objective-C" scheme="http://linfuyan.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Apple 官方 Cocoa 编码规范</title>
    <link href="http://linfuyan.com/apple-cocoa-coding-style-guide/"/>
    <id>http://linfuyan.com/apple-cocoa-coding-style-guide/</id>
    <published>2015-11-10T08:06:39.000Z</published>
    <updated>2015-11-18T08:32:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编码命名基础"><a href="#编码命名基础" class="headerlink" title="编码命名基础"></a>编码命名基础</h2><p>原文：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-BBCHBFAH" target="_blank" rel="external">Code Naming Basics</a></p>
<h3 id="一般性原则"><a href="#一般性原则" class="headerlink" title="一般性原则"></a>一般性原则</h3><h4 id="清晰性"><a href="#清晰性" class="headerlink" title="清晰性"></a>清晰性</h4><ul>
<li>最好是既清晰又简短，但不要为简短而丧失清晰性</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>insertObject:atIndex:</td>
<td>好</td>
</tr>
<tr>
<td>insert:at:</td>
<td>不清晰：要插入什么？”at”表示什么？</td>
</tr>
<tr>
<td>removeObjectAtIndex:</td>
<td>好</td>
</tr>
<tr>
<td>removeObject:</td>
<td>这样也不错，因为方法是移除作为参数的对象</td>
</tr>
<tr>
<td>remove</td>
<td>不清晰；要移除什么?</td>
</tr>
</tbody>
</table>
<ul>
<li>名称通常不缩写，即使名称很长，也要拼写完全</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>destinationSelection</td>
<td>好</td>
</tr>
<tr>
<td>destSel</td>
<td>不清晰</td>
</tr>
<tr>
<td>setBackgroundColor</td>
<td>好</td>
</tr>
<tr>
<td>setBkgdColor</td>
<td>不清晰</td>
</tr>
</tbody>
</table>
<p>你可能会认为某个缩写广为人知，但有可能并非如此，尤其是当你的代码被来自不同文化和语言背景的开<br>发人员所使用时。</p>
<ul>
<li><p>然而，你可以使用少数非常常见，历史悠久的缩写。请参考：”可接受的缩略名”一节</p>
</li>
<li><p>避免使用有歧义的 API 名称，如那些能被理解成多种意思的方法名称</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>sendPort</td>
<td>是发送端口还是返回一个发送端口?</td>
</tr>
<tr>
<td>displayName</td>
<td>是显示一个名称还是返回用户界面中控件的标题?</td>
</tr>
</tbody>
</table>
<h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><ul>
<li>尽可能使用与 Cocoa 编程接口命名保持一致的名称。如果你不太确定某个命名的一致性，请浏览一下头文件或参考文档中的范例</li>
<li>在使用多态方法的类中，命名的一致性非常重要。在不同类中实现相同功能的方法应该具有相同的名称</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (int)tag</td>
<td>在 NSView， NSCell， NSControl 中有定义</td>
</tr>
<tr>
<td>- (void)setStringValue:(NSString *)</td>
<td>在许多 Cocoa classes 中有定义</td>
</tr>
</tbody>
</table>
<blockquote>
<p>请参考“方法参数”一节。</p>
</blockquote>
<h4 id="不要自我指涉"><a href="#不要自我指涉" class="headerlink" title="不要自我指涉"></a>不要自我指涉</h4><ul>
<li>不要名称自我指涉</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSString</td>
<td>好</td>
</tr>
<tr>
<td>NSStringObject</td>
<td>自我指涉</td>
</tr>
</tbody>
</table>
<ul>
<li>掩码(可使用位操作进行组合)和用作通知名称的常量不受该约定限制</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSUnderlineByWordMask</td>
<td>好</td>
</tr>
<tr>
<td>NSTableViewColumnDidMoveNotification</td>
<td>好</td>
</tr>
</tbody>
</table>
<h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h3><p>前缀是名称的重要组成部分。它们可以区分软件的功能范畴。通常，软件会被打包成一个框架或多个紧密 相关的框架(如 Foundation 和 Application Kit 框架)。前缀可以防止第三方开发者与苹果公司之间的命 名冲突(同样也可防止苹果内部不同框架之间的命名冲突)</p>
<ul>
<li>前缀有规定的格式。它由两到三个大写字符组成，不能使用下划线与子前缀</li>
</ul>
<table>
<thead>
<tr>
<th>前缀</th>
<th>Cocoa 框架</th>
</tr>
</thead>
<tbody>
<tr>
<td>NS</td>
<td>Foundation</td>
</tr>
<tr>
<td>NS</td>
<td>Application Kit</td>
</tr>
<tr>
<td>AB</td>
<td>Address Book</td>
</tr>
<tr>
<td>IB</td>
<td>Interface Builder</td>
</tr>
</tbody>
</table>
<ul>
<li>命名 class， protocol， structure， 函数，常量时使用前缀；命名成员方法时不使用前缀，因为方法已经在它所在类的命名空间种；同理，命名结构体字段时也不使用前缀</li>
</ul>
<h3 id="书写约定"><a href="#书写约定" class="headerlink" title="书写约定"></a>书写约定</h3><p>在为 API 元素命名时，请遵循如下一些简单的书写约定</p>
<ul>
<li><p>对于包含多个单词的名称，不要使用标点符号作为名称的一部分或作为分隔符(下划线，破折号等)； 此外，大写每个单词的首字符并将这些单词连续拼写在一起。请注意以下限制:</p>
<ul>
<li>方法名小写第一个单词的首字符，大写后续所有单词的首字符。方法名不使用前缀。如:  <code>fileExistsAtPath:isDirectory:</code> 如果方法名以一个广为人知的大写首字母缩略词开头，该规则不适用，如: <code>NSImage</code> 中的 <code>TIFFRepresentation</code></li>
<li>函数名和常量名使用与其关联类相同的前缀，并且要大写前缀后面所有单词的首字符。如: <code>NSRunAlertPanel</code> ， <code>NSCellDisabled</code></li>
<li>避免使用下划线来表示名称的私有属性。苹果公司保留该方式的使用。如果第三方这样使用可能会导致命名冲突，他们可能会在无意中用自己的方法覆盖掉已有的私有方法，这会导致严重的后果。请参考”私有方法”一节以了解私有 API 的命名约定的建议</li>
</ul>
</li>
</ul>
<h3 id="类与协议命名"><a href="#类与协议命名" class="headerlink" title="类与协议命名"></a>类与协议命名</h3><p>类名应包含一个明确 述该类(或类的对象)是什么或做什么的名词。类名要有合适的前缀(请参考“前缀” 一节)。Foundation 及 Application Kit 有很多这样例子，如:NSString， NSData， NSScanner， NSApplication， NSButton 以及 NSEvent。</p>
<p>协议应该根据对方法的行为分组方式来命名。</p>
<ul>
<li>大多数协议仅组合一组相关的方法，而不关联任何类，这种协议的命名应该使用动名词(ing)，以不与 类名混淆。</li>
</ul>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSLocking</td>
<td>好</td>
</tr>
<tr>
<td>NSLock</td>
<td>不好，看起来像类名</td>
</tr>
</tbody>
</table>
<ul>
<li>有些协议组合一些彼此无关的方法(这样做是避免创建多个独立的小协议)。这样的协议倾向于与某 个类关联在一起，该类是协议的主要体现者。在这种情形，我们约定协议的名称与该类同名。NSObject 协议就是这样一个例子。这个协议组合一组彼此无关的方法，有用于查询对象在其类层次中位置的方 法，有使之能调用特殊方法的方法以及用于增减引用计数的方法。由于 NSObject 是这些方法的主要 体现者，所以我们用类的名称命名这个协议。</li>
</ul>
<h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>头文件的命名方式很重要，我们可以根据其命名知晓头文件的内容。</p>
<ul>
<li>声明孤立的类或协议:将孤立的类或协议声明放置在单独的头文件中，该头文件名称与类或协议同名</li>
</ul>
<table>
<thead>
<tr>
<th>头文件</th>
<th>声明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSApplication</td>
<td>NSApplication类</td>
</tr>
</tbody>
</table>
<ul>
<li>声明相关联的类或协议:将相关联的声明(类，类别及协议) 放置在一个头文件中，该头文件名称与主要的类/类别/协议的名字相同。</li>
</ul>
<table>
<thead>
<tr>
<th>头文件</th>
<th>声明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSString.h</td>
<td>NSString 和 NSMutableString 类</td>
</tr>
<tr>
<td>NSLock.h</td>
<td>NSLocking 协议和 NSLock， NSConditionLock， NSRecursiveLock 类</td>
</tr>
</tbody>
</table>
<ul>
<li>包含框架头文件:每个框架应该包含一个与框架同名的头文件，该头文件包含该框架所有公开的头文件。</li>
</ul>
<table>
<thead>
<tr>
<th>头文件</th>
<th>框架</th>
</tr>
</thead>
<tbody>
<tr>
<td>Foundation.h</td>
<td>Foundation.framework</td>
</tr>
</tbody>
</table>
<ul>
<li><p>为已有框架中的某个类扩展 API:如果要在一个框架中声明属于另一个框架某个类的范畴类的方法， 该头文件的命名形式为:原类名+“Additions”。如 Application Kit 中的 NSBundleAdditions.h</p>
</li>
<li><p>相关联的函数与数据类型:将相联的函数，常量，结构体以及其他数据类型放置到一个头文件中，并以合适的名字命名。如 Application Kit 中的 NSGraphics.h </p>
</li>
</ul>
<h2 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h2><p>原文：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html#//apple_ref/doc/uid/20001282-BCIGIJJF" target="_blank" rel="external">Naming Methods</a></p>
<h3 id="一般性规则"><a href="#一般性规则" class="headerlink" title="一般性规则"></a>一般性规则</h3><p>为方法命名时，请考虑如下一些一般性规则:</p>
<ul>
<li>小写第一个单词的首字符，大写随后单词的首字符，不使用前缀。请参考“书写约定”一节。有两种例 外情况:1，方法名以广为人知的大写字母缩略词(如 TIFF or PDF)开头;2，私有方法可以使用统 一的前缀来分组和辨识，请参考“私有方法”一节</li>
<li>表示对象行为的方法，名称以动词开头:</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">invokeWithTarget:</span>(id)<span class="string">target:</span>- (<span class="keyword">void</span>)<span class="string">selectTabViewItem:</span>(NSTableViewItem *)tableViewItem</div></pre></td></tr></table></figure>
<p>名称中不要出现 do 或 does，因为这些助动词没什么实际意义。也不要在动词前使用副词或形容词修饰</p>
<ul>
<li>如果方法返回方法接收者的某个属性，直接用属性名称命名。不要使用 get，除非是间接返回一个或 多个值。请参考“访问方法”一节。</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (NSSize)cellSize</td>
<td>对</td>
</tr>
<tr>
<td>- (NSSize)calcCellSize</td>
<td>错</td>
</tr>
<tr>
<td>- (NSSize)getCellSize</td>
<td>错</td>
</tr>
</tbody>
</table>
<ul>
<li>参数要用 述该参数的关键字命名</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;</td>
<td>对</td>
</tr>
<tr>
<td>- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;</td>
<td>错</td>
</tr>
</tbody>
</table>
<ul>
<li>参数前面的单词要能述该参数。</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (id)viewWithTag:(int)aTag;</td>
<td>对</td>
</tr>
<tr>
<td>- (id)taggedView:(int)aTag;</td>
<td>错</td>
</tr>
</tbody>
</table>
<ul>
<li>细化基类中的已有方法:创建一个新方法，其名称是在被细化方法名称后面追加参数关键词</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (id)initWithFrame:(NSRect)frameRect;</td>
<td>NSView</td>
</tr>
<tr>
<td>- (id)initWithFrame:(NSRect)frameRect mode:(ind)aMode cellClass:(Class)factoryId numberOfRows:(int)rowsHigh numberOfColumns:(int)colsWide;</td>
<td>NSMatrix - NSView 的子类</td>
</tr>
</tbody>
</table>
<ul>
<li>不要使用 and 来连接用属性作参数关键字</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>- (int)runModalForDirectory:(NSString *)path file:(NSString *)name types:(NSArray *)fileTypes;</code></td>
<td>对</td>
</tr>
<tr>
<td><code>- (int)runModalForDirectory:(NSString *)path addFile:(NSString *)name addTypes:(NSArray *)fileTypes;</code></td>
<td>错</td>
</tr>
</tbody>
</table>
<p>虽然上面的例子中使用 add 看起来也不错，但当你方法有太多参数关键字时就有问题。</p>
<ul>
<li>如果方法 述两种独立的行为，使用 and 来串接它们</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (BOOL)openFile:(NSString <em>)fullPath withApplication:(NSString </em>)appName andDeactivate:(BOOL)flag;</td>
<td>NSWorkspace</td>
</tr>
</tbody>
</table>
<h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><p>访问方法是对象属性的读取与设置方法。其命名有特定的格式依赖于属性的 述内容。</p>
<ul>
<li>如果属性是用名词述的，则命名格式为:</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setNoun:(<span class="class"><span class="keyword">type</span>)<span class="title">aNoun</span>;</span>- (<span class="class"><span class="keyword">type</span>)<span class="title">noun</span>;</span></div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setgColor:<span class="params">(NSColor *)</span>aColor; </div><div class="line">- <span class="params">(NSColor *)</span>color;</div></pre></td></tr></table></figure>
<ul>
<li>如果属性是用形容词述的，则命名格式为:</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setAdjective:<span class="params">(BOOL)</span>flag;- <span class="params">(BOOL)</span>isAdjective;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setEditable:<span class="params">(BOOL)</span>flag; </div><div class="line">- <span class="params">(BOOL)</span>isEditable;</div></pre></td></tr></table></figure>
<ul>
<li>如果属性是用动词 述的，则命名格式为:(动词要用现在时时态)</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setVerbObject:<span class="params">(BOOL)</span>flag;- <span class="params">(BOOL)</span>verbObject;</div></pre></td></tr></table></figure>
<p>例如：</p>
<pre><code>- (void)setShowAlpha:(BOOL)flag; 
- (BOOL)showsAlpha;
</code></pre><ul>
<li>不要使用动词的过去分词形式作形容词使用</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (void)setAcceptsGlyphInfo:(BOOL)flag;</td>
<td>对</td>
</tr>
<tr>
<td>- (BOOL)acceptsGlyphInfo;</td>
<td>对</td>
</tr>
<tr>
<td>- (void)setGlyphInfoAccepted:(BOOL)flag;</td>
<td>错</td>
</tr>
<tr>
<td>- (BOOL)glyphInfoAccepted;</td>
<td>错</td>
</tr>
</tbody>
</table>
<ul>
<li>可以使用情态动词(can， should， will 等)来 高清晰性，但不要使用 do 或 does</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>- (void)setCanHide:(BOOL)flag;</td>
<td>对</td>
</tr>
<tr>
<td>- (BOOL)canHide;</td>
<td>对</td>
</tr>
<tr>
<td>- (void)setShouldCloseDocument:(BOOL)flag;</td>
<td>对</td>
</tr>
<tr>
<td>- (void)shouldCloseDocument;</td>
<td>对</td>
</tr>
<tr>
<td>- (void)setDoseAcceptGlyphInfo:(BOOL)flag;</td>
<td>错</td>
</tr>
<tr>
<td>- (BOOL)doseAcceptGlyphInfo;</td>
<td>错</td>
</tr>
</tbody>
</table>
<ul>
<li>只有在方法需要间接返回多个值的情况下，才使用 get</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>- (void)getLineDash:(float *)pattern count:(int *)count phase:(float *)phase;</code></td>
<td>NSBezierPath</td>
</tr>
</tbody>
</table>
<p>像上面这样的方法，在其实现里应允许接受 NULL 作为其 in/out 参数，以表示调用者对一个或多个返回 值不感兴趣。</p>
<h3 id="委托方法"><a href="#委托方法" class="headerlink" title="委托方法"></a>委托方法</h3><p>委托方法是那些在特定事件发生时可被对象调用，并声明在对象的委托类中的方法。它们有独特的命名约<br>定，这些命名约定同样也适用于对象的数据源方法</p>
<ul>
<li>名称以标示发送消息的对象的类名开头，省略类名的前缀并小写类第一个字符</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>tableView:<span class="params">(NSTableView *)</span>tableView shouldSelectRow:<span class="params">(int)</span>row;</div><div class="line">- <span class="params">(BOOL)</span>application:<span class="params">(NSApplication *)</span>sender openFile:<span class="params">(NSString *)</span>filename;</div></pre></td></tr></table></figure>
<ul>
<li>冒号紧跟在类名之后(随后的那个参数表示委派的对象)。该规则不适用于只有一个 sender 参数的方法</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>applicationOpenUntitledFile:<span class="params">(NSApplication *)</span>sender;</div></pre></td></tr></table></figure>
<ul>
<li>上面的那条规则也不适用于响应通知的方法。在这种情况下，方法的唯一参数表示通知对象</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>windowDidChangeScreen:<span class="params">(NSNotification *)</span>notification;</div></pre></td></tr></table></figure>
<ul>
<li>用于通知委托对象操作即将发生或已经发生的方法名中要使用 did 或 will</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>browserDidScroll:<span class="params">(NSBrowser *)</span>sender;</div><div class="line">- <span class="params">(NSUndoManager *)</span>windowWillReturnUndoManager:<span class="params">(NSWindow *)</span>window;</div></pre></td></tr></table></figure>
<ul>
<li>用于询问委托对象可否执行某操作的方法名中可使用 did 或 will，但最好使用 should</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>windowShouldClose:<span class="params">(id)</span>sender;</div></pre></td></tr></table></figure>
<h3 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h3><p>管理对象(集合中的对象被称之为元素)的集合类，约定要具备如下形式的方法:</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>addElement:<span class="params">(elementType)</span>adObj;</div><div class="line">- <span class="params">(void)</span>removeElement:<span class="params">(elementType)</span>anObj;</div><div class="line">- <span class="params">(NSArray *)</span>elements;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>addLayoutManager:<span class="params">(NSLayoutManager *)</span>adObj;</div><div class="line">- <span class="params">(void)</span>removeLayoutManager:<span class="params">(NSLayoutManager *)</span>anObj;</div><div class="line">- <span class="params">(NSArray *)</span>layoutManagers;</div></pre></td></tr></table></figure>
<p>集合方法命名有如下一些限制和约定:</p>
<ul>
<li>如果集合中的元素无序，返回 NSSet，而不是 NSArray</li>
<li>如果将元素插入指定位置的功能很重要，则需具备如下方法:</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">insertElement:</span>(elementType)anObj <span class="string">atIndex:</span>(<span class="keyword">int</span>)index; </div><div class="line">- (<span class="keyword">void</span>)<span class="string">removeElementAtIndex:</span>(<span class="keyword">int</span>)index;</div></pre></td></tr></table></figure>
<p>集合方法的实现要考虑如下细节:</p>
<ul>
<li>以上集合类方法通常负责管理元素的所有者关系，在 add 或 insert 的实现代码里会 retain 元素，在 remove 的实现代码中会 release 元素</li>
<li>当被插入的对象需要持有指向集合对象的指针时，通常使用 set… 来命名其设置该指针的方法，且不 要 retain 集合对象。比如上面的 insertLayerManager:atIndex: 这种情形，NSLayoutManager 类使 用如下方法:</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>setTextStorage:<span class="params">(NSTextStorage *)</span>textStorage; </div><div class="line">- <span class="params">(NSTextStorage *)</span>textStorage;</div></pre></td></tr></table></figure>
<p>通常你不会直接调用 setTextStorage:，而是覆写它。</p>
<p>另一个关于集合约定的例子来自 NSWindow 类:</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>addChildWindow:<span class="params">(NSWindow *)</span>childWin ordered:<span class="params">(NSWindowOrderingMode)</span>place; </div><div class="line">- <span class="params">(void)</span>removeChildWindow:<span class="params">(NSWindow *)</span>childWin;</div><div class="line">- <span class="params">(NSArray *)</span>childWindows;- <span class="params">(NSWindow *)</span>parentWindow;</div><div class="line">- <span class="params">(void)</span>setParentWindow:<span class="params">(NSWindow *)</span>window;</div></pre></td></tr></table></figure>
<h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>命名方法参数时要考虑如下规则:</p>
<ul>
<li>如同方法名，参数名小写第一个单词的首字符，大写后继单词的首字符。如:removeObject:(id)anObject</li>
<li>不要在参数名中使用 pointer 或 ptr，让参数的类型来说明它是指针</li>
<li>避免使用 one， two，…，作为参数名</li>
<li>避免为节省几个字符而缩写</li>
</ul>
<p>按照 Cocoa 惯例，以下关键字与参数联合使用:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">..<span class="selector-class">.action</span>:(SEL)aSelector</div><div class="line">..<span class="selector-class">.alignment</span>:(int)mode</div><div class="line">..<span class="selector-class">.atIndex</span>:(int)index</div><div class="line">..<span class="selector-class">.content</span>:(NSRect)aRect</div><div class="line">..<span class="selector-class">.doubleValue</span>:(double)aDouble</div><div class="line">..<span class="selector-class">.floatValue</span>:(<span class="attribute">float</span>)aFloat</div><div class="line">..<span class="selector-class">.font</span>:(NSFont *)fontObj</div><div class="line">..<span class="selector-class">.frame</span>:(NSRect)frameRect</div><div class="line">..<span class="selector-class">.intValue</span>:(int)anInt</div><div class="line">..<span class="selector-class">.keyEquivalent</span>:(NSString *)charCode</div><div class="line">..<span class="selector-class">.length</span>:(int)numBytes</div><div class="line">..<span class="selector-class">.point</span>:(NSPoint)aPoint</div><div class="line">..<span class="selector-class">.stringValue</span>:(NSString *)aString</div><div class="line">..<span class="selector-class">.tag</span>:(int)anInt..<span class="selector-class">.target</span>:(id)anObject..<span class="selector-class">.title</span>:(NSString *)aString</div></pre></td></tr></table></figure>
<h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>大多数情况下，私有方法命名相同与公共方法命名约定相同，但通常我们约定给私有方法添加前缀，以便 与公共方法区分开来。即使这样，私有方法的名称很容易导致特别的问题。当你设计一个继承自 Cocoa framework 某个类的子类时，你无法知道你的私有方法是否不小心覆盖了框架中基类的同名方法。<br>Cocoa framework 的私有方法名称通常以下划线作为前缀(如:_fooData)，以标示其私有属性。基于这 样的事实，遵循以下两条建议：</p>
<ul>
<li>不要使用下划线作为你自己的私有方法名称的前缀，Apple 保留这种用法。</li>
<li>若要继承 Cocoa framework 中一个超大的类(如:NSView)，并且想要使你的私有方法名称与基类 中的区别开来，你可以为你的私有方法名称添加你自己的前缀。这个前缀应该具有唯一性，如基于你 公司的名称，或工程的名称，并以“XX_”形式给出。比如你的工程名为”Byte Flogger”，那么就可以是 “BF_addObject:”</li>
</ul>
<p>尽管为私有方法名称添加前缀的建议与前面类中方法命名的约定冲突，这里的意图有所不同:为了防止不<br>小心地覆盖基类中的私有方法。</p>
<h2 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h2><p>原文：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingFunctions.html#//apple_ref/doc/uid/20001283-BAJGGCAD" target="_blank" rel="external">Naming Functions</a></p>
<p>Objective-C 允许通过函数(C 形式的函数) 述行为，就如成员方法一样。 你应当优先使用函数，而不 是类方法，如果隐含的类为单例或在处理函数子系统时。</p>
<p>函数命名应该遵循如下几条规则:</p>
<ul>
<li>函数命名与方法命名相似，但有两点不同:<ol>
<li>它们有前缀，其前缀与你使用的类和常量的前缀相同</li>
<li>大写前缀后紧跟的第一个单词首字符</li>
</ol>
</li>
<li>大多数函数名称以动词开头，这个动词 述该函数的行为</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSHighlightRect</span></div><div class="line"><span class="built_in">NSDeallocateObject</span></div></pre></td></tr></table></figure>
<p>查询属性的函数有个更多的规则要遵循:</p>
<ul>
<li>查询第一个参数的属性的函数，省略动词</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">NSEventMaskFromType</span>(<span class="built_in">NSEventType</span> type) </div><div class="line"><span class="keyword">float</span> <span class="built_in">NSHeight</span>(<span class="built_in">NSRect</span> rect)</div></pre></td></tr></table></figure>
<ul>
<li>返回值为引用的方法，使用 Get</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">NSGetSizeAndAlignment</span>(<span class="keyword">const</span> <span class="keyword">char</span> *typePtr, <span class="keyword">unsigned</span> <span class="keyword">int</span>*sizep, <span class="keyword">unsigned</span> <span class="keyword">int</span> *alignp)</div></pre></td></tr></table></figure>
<ul>
<li>返回 boolean 值的函数，名称使用判断动词 is/does 开头</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> <span class="built_in">NSDecimalIsNotANumber</span>(<span class="keyword">const</span> <span class="built_in">NSDecimal</span> *decimal)</div></pre></td></tr></table></figure>
<h2 id="实例变量与数据类型命名"><a href="#实例变量与数据类型命名" class="headerlink" title="实例变量与数据类型命名"></a>实例变量与数据类型命名</h2><p>原文：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-BAJGIIJE" target="_blank" rel="external">Naming Properties and Data Types</a></p>
<p>这一节 述实例变量，常量，异常以及通知的命名约定。</p>
<h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>在为类添加实例变量是要注意:</p>
<ul>
<li>避免创建 public 实例变量</li>
<li>使用 @private，@protected 显式限定实例变量的访问权限</li>
<li>确保实例变量名简明扼要地述了它所代表的属性</li>
</ul>
<p>如果实例变量别设计为可被访问的，确保编写了访问方法</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量命名规则根据常量创建的方式不同而大不同。</p>
<h4 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h4><ul>
<li>使用枚举来定义一组相关的整数常量</li>
<li>枚举常量与其 typedef 命名遵守函数命名规则。如来自 NSMatrix.h 中的例子：(本例中的 typedef tag (_NSMatrixMode) 不是必须的)</li>
</ul>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef <span class="class"><span class="keyword">enum</span> <span class="title">_NSMatrixMode</span> &#123; </span></div><div class="line">	NSRadioModeMatrix = <span class="number">0</span>, </div><div class="line">	NSHighlightModeMatrix = <span class="number">1</span>,</div><div class="line">	NSListModeMatrix = <span class="number">2</span>, </div><div class="line">	NSTrackModeMatrix = <span class="number">3</span>&#125; NSMatrixMode;</div></pre></td></tr></table></figure>
<ul>
<li>位掩码常量可以使用不具名枚举。如:</li>
</ul>
<pre><code>enum {
    NSBorderlessWindowMask = 0,
    NSTitledWindowMask = 1 &lt;&lt; 0,
    NSClosableWindowMask = 1 &lt;&lt; 1,
    NSMiniaturizableWindowMask 1 &lt;&lt; 2,
    NSResizableWindowMask = 1&lt;&lt; 3
};
</code></pre><h4 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h4><ul>
<li>使用 const 来修饰浮点常量或彼此没有关联的整数常量</li>
<li>枚举常量命名规则与函数命名规则相同。const 常量命名范例:</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">float</span> <span class="built_in">NSLightGray</span>;</div></pre></td></tr></table></figure>
<h4 id="其他常量"><a href="#其他常量" class="headerlink" title="其他常量"></a>其他常量</h4><ul>
<li>通常不使用 #define 来创建常量。如上面所述，整数常量请使用枚举，浮点数常量请使用 const</li>
<li>使用大写字母来定义预处理编译宏。如:#ifdef DEBUG</li>
<li>编译器定义的宏名首尾都有双下划线。如:<strong>MACH</strong></li>
<li>为 notification 名及 dictionary key 定义字符串常量，从而能够利用编译器的拼写检查，减少书写错误。Cocoa 框架供了很多这样的范例:</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APPKIT_EXTERN <span class="built_in">NSString</span> *<span class="built_in">NSPrintCopies</span>;</div></pre></td></tr></table></figure>
<p>实际的字符串值在实现文件中赋予。(注意:APPKIT_EXTERN 宏等价于 Objective-C 中 extern)</p>
<h3 id="异常与通知"><a href="#异常与通知" class="headerlink" title="异常与通知"></a>异常与通知</h3><p>异常与通知的命名遵循相似的规则,但是它们有各自推荐的使用模式。</p>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>虽然你可以处于任何目的而使用异常(由 NSException 类及相关类实现)， Cocoa 通常不使用异常来处 理常规的， 可预料的错误。在这些情形下， 使用诸如 nil， NULL， NO 或错误代码之类的返回值。异常的典 型应用类似数组越界之类的编程错误。</p>
<p>异常由具有如下形式的全局 NSString 对象标识:</p>
<blockquote>
<p>[Prefix] + UniquePartOfName + Exception</p>
</blockquote>
<p>UniquePartOfName 部分是有连续的首字符大写的单词组成。例如:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSColorListIOException</span></div><div class="line"><span class="built_in">NSColorListNotEditableException</span></div><div class="line"><span class="built_in">NSDraggingException</span></div><div class="line"><span class="built_in">NSFontUnavailableException</span></div><div class="line"><span class="built_in">NSIllegalSelectorException</span></div></pre></td></tr></table></figure>
<h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><p>如果一个类有委托,那它的大部分通知可能由其委托的委托方法来处理。这些通知的名称应该能够反应其 响应的委托方法。比如,当应用程序 交 NSApplicationDidBecomeActiveNotification 通知时,全局 NSApplication 对象的委托会注册从而能够接收 applicaitonDidBecomeActive: 消息。</p>
<p>通知由具有如下形式的全局 NSString 对象标识:</p>
<blockquote>
<p>[相关联类的名称] + [Did 或 Will] + [UniquePartOfName] + Notification 例如: </p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSApplicationDidBecomeActiveNotification</span></div><div class="line"><span class="built_in">NSWindowDidMiniaturizeNotification</span></div><div class="line"><span class="built_in">NSTextViewDidChangeSelectionNotification</span></div><div class="line"><span class="built_in">NSColorPanelColorDidChangeNotification</span></div></pre></td></tr></table></figure>
<h2 id="可接受的缩略语"><a href="#可接受的缩略语" class="headerlink" title="可接受的缩略语"></a>可接受的缩略语</h2><p>原文：<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE" target="_blank" rel="external">Acceptable Abbreviations and Acronyms</a></p>
<p>在设计编程接口时，通常名称不要缩写。然而，下面列出的缩写要么是固定下来的要么是过去被广泛使用<br>的，所以你可以继续使用。关于缩写有一些额外的注意事项:</p>
<ul>
<li>标准 C 库中长期使用的缩写形式是可以接受的。如:”alloc”， “getc”</li>
<li>你可以在参数名中更自由地使用缩写。如:imageRep， col(column)， obj， otherWin</li>
</ul>
<h3 id="常见的缩写"><a href="#常见的缩写" class="headerlink" title="常见的缩写"></a>常见的缩写</h3><table>
<thead>
<tr>
<th>缩写</th>
<th>含义</th>
<th>缩写</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>alloc</td>
<td>Allocate</td>
<td>msg</td>
<td>Message</td>
</tr>
<tr>
<td>alt</td>
<td>Alternate</td>
<td>nib</td>
<td>Interface Builder archive</td>
</tr>
<tr>
<td>app</td>
<td>Application</td>
<td>pboard</td>
<td>Pasteboard</td>
</tr>
<tr>
<td>calc</td>
<td>Calculate</td>
<td>rect</td>
<td>Rectangle</td>
</tr>
<tr>
<td>dealloc</td>
<td>Deallocate</td>
<td>Rep</td>
<td>Representation</td>
</tr>
<tr>
<td>func</td>
<td>Function</td>
<td>temp</td>
<td>Temporary</td>
</tr>
<tr>
<td>horiz</td>
<td>Horizontal</td>
<td>vert</td>
<td>Vertical</td>
</tr>
<tr>
<td>info</td>
<td>Information</td>
<td>init</td>
<td>Initialize</td>
</tr>
<tr>
<td>max</td>
<td>Maximum</td>
</tr>
</tbody>
</table>
<h3 id="常见的略写"><a href="#常见的略写" class="headerlink" title="常见的略写"></a>常见的略写</h3><p>ASCII， PDF， XML， HTML， URL， RTF， HTTP， TIFF， JPG， GIF， LZW， ROM， RGB， CMYK， MIDI， FTP</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编码命名基础&quot;&gt;&lt;a href=&quot;#编码命名基础&quot; class=&quot;headerlink&quot; title=&quot;编码命名基础&quot;&gt;&lt;/a&gt;编码命名基础&lt;/h2&gt;&lt;p&gt;原文：&lt;a href=&quot;https://developer.apple.com/library/mac/do
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="iOS" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/iOS/"/>
    
    
      <category term="编程" scheme="http://linfuyan.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="代码" scheme="http://linfuyan.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
      <category term="规范" scheme="http://linfuyan.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="iOS" scheme="http://linfuyan.com/tags/iOS/"/>
    
      <category term="Ojbective-C" scheme="http://linfuyan.com/tags/Ojbective-C/"/>
    
      <category term="风格" scheme="http://linfuyan.com/tags/%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="指南" scheme="http://linfuyan.com/tags/%E6%8C%87%E5%8D%97/"/>
    
      <category term="Cocoa" scheme="http://linfuyan.com/tags/Cocoa/"/>
    
  </entry>
  
  <entry>
    <title>Android Task 与后退栈解析</title>
    <link href="http://linfuyan.com/task-and-back-stack/"/>
    <id>http://linfuyan.com/task-and-back-stack/</id>
    <published>2015-11-09T16:17:00.000Z</published>
    <updated>2015-11-09T10:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>应用程序通常包含多个 Activity。每个 Activity 围绕用户能够执行的指定动作类型和启动其他 Activity 来设计。例如，一个邮件应用程序有一个用来显示新信息列表的 Activity ，当用户选择一条信息，一个新的 Activity 打开用来查看信息。</p>
<p>一个 Activity 可以打开存在设备上的其他应用程序。例如，你的应用想要发送邮件信息，你可以定义一个意图来执行”发送”动作，并包含一些如邮箱地址和信息的数据。其他应用程序的 Activity 声明自己能够处理这种类型的意图，并打开。这个例子中，意图是想要发送邮件，因此邮件应用的创作 Activity 启动(如果多个 Activity 支持相同的意图，系统将让用户来选择)。当邮件发送完成，这个 Activity 退出，看起来就像是自己应用程序的一部分， Android 通过将这些 Activity 保存在相同的 Task 中来维持一致的用户体验。</p>
<p>Task 是用户在执行特定工作时与之交互的一系列 Activity 集合。 Activity 被排列在后退栈中，以每个 Activity 被打开的顺序排列。</p>
<p>对于大部分 Task 而言，设备的主屏幕都是起始位置。当用户触摸应用程序启动器或者主屏幕上的快捷方式时，应用程序的 Task 进入前台。如果应用程序的 Task 不存在(即应用程序最近没有被使用)，那么新的 Task 将被创建，并且应用程序打开的主 Activity 将作为 Task 的根 Activity。</p>
<p>当当前 Activity 启动另外的 Activity ， 新的 Activity 将被推到栈顶并获取焦点。之前的 Activity 仍然在栈中，但是被停止的。当 Activity 被停止时，系统保持了它的用户界面的当前状态。当用户按下返回按钮，当前 Activity 被从栈顶弹出，之前的 Activity 则恢复为之前 UI 所保存下来的状态。 栈中的 Activity 不会被重新排列，只能够被推入到栈中或者从栈中弹出。当被当前 Activity 启动时推入栈中，用户按下后退键时从栈中弹出。后退栈的操作遵循后进先出的原则。下图可视化的展示了随着时间推移 Activity 与后退栈中的关系。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/diagram_backstack.png" alt=""></p>
<p>如果用户继续按返回键，每个 Activity 都会从栈中被弹出来展示上一个 Activity ，直到回到主屏幕(或者回到运行 Task 开始的 Activity )。当所有的 Activity 从栈中移出， Task 就不存在了。</p>
<p>Task 是一个相互结合的单元，当用户启动新的 Task 或者通过按下 Home 键来返回主屏幕时，原来的 Task 进入后台。一旦进入后台， Task 中的所有 Activity 被停止，但是 Task 的后退栈中是完整的，只是失去了焦点。一个 Task 可以重新回到前台以便用户打开。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/diagram_multitasking.png" alt=""></p>
<p>假设，当前的 Task A 包含 3 个 Activity 在它的栈中，即当前 Activity 下有另外两个。用户按下 Home 键，从应用程序启动器新的应用程序。当主屏幕显示， Task A 进入后台。当新的应用程序启动，系统为新的应用程序启动了 Task B (其中包含自己 Activity 的栈)。在新的应用程序中玩了不久，用户再次回到主屏幕，并选择了先前 Task A 中启动的应用程序。这是 Task A 进入前台，堆栈中的 3 个 Activity 都是完整的，栈顶的 Activity 被恢复。这种情况下，用户可以通过返回主屏幕，再点击应用程序图标来启动。这是 Android 上多任务的一个实例。</p>
<blockquote>
<p>注意：多个 Task 可以同时被维持在后台。但如果用户同时运行太多的后台任务，系统会为了回收内存而销毁后台的 Activity ，这会引起 Activity 状态的丢失。</p>
</blockquote>
<p>由于后退栈中的 Activity 永远不会被重排，如果你的应用程序允许用户从多个 Activity 中启动一个特殊的 Activity ，那么，新的 Activity 实例将被创建并推入栈中，而不是将之前的其他 Activity 实例放到顶部。这样，应用程序中的一个 Activity 可能被实例化多次，如下图所示。当用户使用返回键导航回去时，每个 Activity 的实例将按照被打开的顺序来展示。但是，如果你不想让一个 Activity 被实例化多次，你可以修改这些行为。具体怎么做，在下一节的[管理  Task] 中介绍。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/diagram_multiple_instances.png" alt=""></p>
<p>总结一下 Activity 和 Task 的默认行为：</p>
<ol>
<li>当 Activity A 启动 Activity B 时， Activity A 被停止，但系统保存了它的状态，包括滚动的位置和输入的文本等。如果用户在 Activity B 时按下返回键， Activity A 会返回到其原来保存的状态。</li>
<li>当用户按下 Home 键离开 Task ，当前的 Activity 及它所在的 Task 进入后台。系统保持 Task 中每个 Activity 的状态。如果用户通过选择启动图标再次启动 Task ， Task 进入前台，并且在栈顶部的 Activity 被恢复。</li>
<li>如果用户按下返回键，当前的 Activity 被从栈中弹出并销毁。栈中之前的 Activity 被恢复。当 Activity 被销毁，系统不在保持 Activity 的状态。</li>
<li>Activity 可以被实例化多次，即使是来自其他的 Task 。</li>
</ol>
<h2 id="保存-Activity-状态"><a href="#保存-Activity-状态" class="headerlink" title="保存 Activity 状态"></a>保存 Activity 状态</h2><p>如上面所讨论的，当 Activity 被停止时，系统的默认行为会保留其状态。这样子，当用户导航回到之前的 Activity 时，将展示之前离开时留下的界面。尽管如此，当 Activity 即将被销毁或者必须要重建时，你依然可以使用回调方法来保持 Activity 的状态。</p>
<p>当系统停止某个 Activity 时，如果需要恢复系统的内存，系统将完全的销毁 Activity 。这种情况下， Activity 状态相关的信息便丢失了。但系统依然知道在后退栈中有 Activity 的一个位置，当 Activity 被带到前台时系统需要重建它，而不是恢复它。为了避免丢失用户以完成的工作，需要在 Activity 中通过实现 onSaveInstanceState() 方法来主动保持状态。</p>
<p>关于如何来保存 Activity 的状态的更多信息，可以查看 Activity 相关文档。</p>
<h2 id="管理-Task"><a href="#管理-Task" class="headerlink" title="管理 Task"></a>管理 Task</h2><p>上面描述的 Android 管理 Task 和后退栈的方式-将所有成功打开的 Activity 放在同一个 Task 及后进先出的堆栈中-在大部分应用程序中工作正常，也不需要担心 Activity 如何与 Task 相关联，以及如何存在后退栈中。有的时候，你想要中断这种普通的行为。也许你想要应用程序中的一个 Activity 打开时开启一个新的 Task ，而不是被放在当前 Task 中。也许你启动一个 Activity 时，想要把已经存在的实例带到前台，而不是在顶上创建一个新的实例。也许你想当用户离开 Task 的时候，后退栈中除了根 Activity 之外的清空其他 Activity 。</p>
<p>通过清单文件中 <code>&lt;activity&gt;</code> 元素的属性以及传递给 startActivity() 的 Intent 中的 flag 可以完成上面的工作，甚至更多其他工作。</p>
<p>可以使用的 <code>&lt;activity&gt;</code> 元素主要属性包括：</p>
<ul>
<li>taskAffinity</li>
<li>launchMode</li>
<li>allowTaskReparenting</li>
<li>clearTaskOnLaunch</li>
<li>alwaysRetainTaskState</li>
<li>finishOnTaskLaunch</li>
</ul>
<p>可以使用的主要 Intent 的 flag 包括：</p>
<ul>
<li>FLAG_ACTIVITY_NEW_TASK</li>
<li>FLAG_ACTIVITY_CLEAR_TOP</li>
<li>FLAG_ACTIVITY_SINGLE_TOP</li>
</ul>
<p>接下来的章节中，你将看到如何使用这些清单属性和 Intent 的 flag 来定义 Activity 如何与 Task 关联以及他们在后退栈中的行为。</p>
<blockquote>
<p><strong>警告：</strong> 大部分应用程序不应该干扰 Activity 和 Task 的默认行为。如果你觉得非常有必要修改这些默认行为，那么需要做出警告，并测试 Activity 启动以及通过返回键从其他 Activity 或 Task 返回的情况。测试导航是否会和用户所期待的行为冲突。</p>
</blockquote>
<h3 id="定义启动模式"><a href="#定义启动模式" class="headerlink" title="定义启动模式"></a>定义启动模式</h3><p>启动模式用来定义一个新的 Activity 实例如何与当前的 Task 关联。可以通过两种方式来定义不同的启动模式：</p>
<ul>
<li>使用清单文件：当你在清单文件中声明一个 Activity 时，可以指定 Activity 在启动时如何关联 Task。</li>
<li>使用 Intent flag ：调用 startActivity() 时，可以在 Intent 中包含 flag 来声明新的 Activity 与当前 Task 如何关联。</li>
</ul>
<p>这样，如果 Activity A 启动 Activity B ， Activity B 可以在它的清单中定义如何与当前 Task 关联， Activity A 同样可以请求 Activity B 如何与当前 Task 关联。如果都定义了 Activity B 如何与 Task 关联， Activity A 中通过 Intent 定义的请求优先于 Activity 在清单中定义的请求。</p>
<blockquote>
<p><strong>注意</strong>：某些在清单文件中有效的启动模式，在 Intent 中的 flag 是无效的，同样，某些 Intent 中有效的启动模式在清单里定义是无效的。</p>
</blockquote>
<p><strong>使用清单文件</strong></p>
<p>在清单文件中申明 Activity 时，使用 <code>&lt;activity&gt;</code> 元素的 launchMode 属性可以指定 Activity 如何与 Task 关联：</p>
<ul>
<li>“standard”（默认模式）</li>
</ul>
<p>系统创建新的 Activity 实例，这个实例位于启动它的 Activity 相同的栈，并且将意图传递给它。 Activity 可以被实例化多次，每个实例可以属于不同的 Task ，一个 Task 也能有多个实例。</p>
<ul>
<li>“singleTop”</li>
</ul>
<p>如果 Activity 的实例已经存在于当前 Task 的顶部，系统通过调用实例的 onNewIntent() 方法来传递意图到实例，而不是为 Activity 创建一个新的实例。 Activity 可以被实例化多次，每个实例可以属于不同的 Task ，一个 Task 可以有多个实例(除非后退栈顶部的 Activity 不是一个已经存在的 Activity 实例)。</p>
<p>例如，假设一个 Task 的后退栈包含根 Activity A ， Activity B ， Activity C 以及 Activity D 在顶部。一个意图到达 Activity D 。如果 D 的启动模式为 “standard” ，新的类实例将被启动，堆栈变成 A-B-C-D-D 。如果 D 的启动模式为 “singleTop” ，已经存在的 D 实例将通过 onNewIntent() 接收意图，一次它还在栈顶，而栈依然是 A-B-C-D 。如果一个意图到达 B ，新的 B 的实例被添加到堆栈中，即使它的启动模式是 “singleTop” 。</p>
<blockquote>
<p><strong>注意</strong>：当新的 Activity 实例被创建，用户可以按下返回按钮来返回到之前的 Activity 。但是当已经存在的 Activity 实例处理了新的 Intent ，用户无法按下返回键返回到通过 onNewIntent() 到来新的 Intent 前的 Activity 状态。</p>
</blockquote>
<ul>
<li>“singleTask”</li>
</ul>
<p>系统创建新的 Task 并在新的 Task 的根实例化 Activity 。如果已经有 Activity 的实例存在于独立的 Task 中，系统通过调用 onNewIntent() 将 Intent 路由到已存在的实例，而不是创建一个新的实例。每次只能有一个 Activity 的实例存在。</p>
<blockquote>
<p><strong>注意</strong>：虽然 Activity 在新的 Task 中打开，后退按钮依然可以返回到用户之前的 Activity 。</p>
</blockquote>
<ul>
<li>“singleInstance”</li>
</ul>
<p>除了系统不再启动其他的 Activity 到持有实例的 Task 中，其他的和 “singleTask” 一样。 这个 Activity 是它的 Task 的唯一成员。任何由它打开的 Activity 在一个独立的 Task 。</p>
<p>另外一个实例， Android 浏览器应用程序声明网页浏览器的 Activity 需要永远在自己的 Task 中打开，即在 <code>&lt;activity&gt;</code> 元素中指定 singleTask 启动模式。这意味着，如果你的应用程序要打开 Android 浏览器，它的 Activity 与你的应用程序将在不同的 Task 中。不论新的 Task 启动浏览器，或者浏览器已经有一个运行在后台的 Task， Task 将被带到前台处理新的 Intent 。</p>
<p>不论 Activity 是在新的 Task 中启动还是在相同的 Task 中启动，返回按钮总是能让用户返回到之前的 Activity 。如果你启动了一个指定 singleTask 启动模式的 Activity ，恰好这时有个 Activity 的实例在后台 Task 中，整个 Task 将进入前台。这种情况下，后退栈中包含在 Task 中的所有 Activity 进入前台，在栈的顶部。下图展示了这个过程。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/diagram_backstack_singletask_multiactivity.png" alt=""></p>
<p>更多的在清单中使用启动模式的信息，可以查看 <a href=""><activity>元素</activity></a> 相关文档，这里讨论更多关于 launchMode 属性及可接受的值。</p>
<blockquote>
<p><strong>注意</strong>：Activity 中通过 launchMode 属性指定的行为，可以通过启动 Activity 的意图的 flag 来覆盖。 </p>
</blockquote>
<p><strong>使用意图 flag</strong></p>
<p>启动一个 Activity 时，可以通过在 startActivity() 中传递意图的 flag 来修改 Activity 与 Task 之间的默认关联。可以用来修改默认行为的 flag 包括：</p>
<ul>
<li>FLAG_ACTIVITY_NEW_TASK</li>
</ul>
<p>在新的 Task 中启动 Activity 。如果要启动的 Activity 已经有在运行的 Task ， Task 将带着最后被保存的状态到前台， Activity 在 onNewIntent() 中接收新的意图。</p>
<p>这产生的效果与上节讨论的 “singleTask” 启动模式一致。</p>
<ul>
<li>FLAG_ACTIVITY_SINGLE_TOP</li>
</ul>
<p>如果被启动的 Activity 是当前 Activity (即在后退栈的顶部)，已存在的实例调用 onNewIntent() ，而不是创建一个新的 Activity 实例。</p>
<p>这产生的效果与上节讨论的 “singleTop” 启动模式一致。 </p>
<ul>
<li>FLAG_ACTIVITY_CLEAR_TOP</li>
</ul>
<p>如果被启动的 Activity 已经在当前 Task 中，那么所有在其顶部的 Activity 将被销毁，意图将通过 onNewIntent() 传递到被恢复的 Activity 实例，而不是创建一个新的实例。</p>
<p>没有启动模式可以产生这种行为。</p>
<p>FLAG_ACTIVITY_CLEAR_TOP 经常和 FLAG_ACTIVITY_NEW_TASK 结合使用。当在一起使用时，这些 flag 是一种在其他 Task 中定位已存在 Activity，并将其放入可以响应意图位置的方式。</p>
<h3 id="处理-affinities"><a href="#处理-affinities" class="headerlink" title="处理 affinities"></a>处理 affinities</h3><p>Affinity 表明 Activity 优先属于哪个 Task 。默认情况下，来自同一个应用程序的 Activity 相互间拥有一个 Affinity 。因此，同一个应用程序的 Activity 优先在同一个 Task 中。尽管如此，你可以修改一个 Activity 的默认 Affinity 。不同应用程序中定义的 Activity 可以共享一个 Affinity ，同一个应用程序中定义的 Activity 也可以被分配在不同的 Task Affinity 中。</p>
<p>通过给定 <code>&lt;activity&gt;</code> 元素的 taskAffinity 属性可以修改 Activity 的 Affinity 。</p>
<p>taskAffinity 属性是一个字符串，必须与申明在 <code>&lt;manifest&gt;</code> 元素中的默认包名不同。因为系统使用这个名称来识别应用程序的默认 Task Affinity 。</p>
<p>两种情况下使用 Affinity：</p>
<ul>
<li>当启动 Activity 的意图包含 FLAG_ACTIVITY_NEW_TASK flag 时。</li>
</ul>
<p>默认情况下，新的 Activity 被启动在调用 startActivity() 方法的 Activity 所在 Task 。被推入到调用者相同的后退栈。但如果传递给 startActivity() 的意图中包含 FLAG_ACTIVITY_NEW_TASK flag ，系统寻找另外的 Task 来存放 Activity 。通常是一个新的 Task 。但也不是必须的。当已经存在存在一个 Task 拥有相同的 Affinity 时， Activity 被启动到这个 Task 中，没有时，才启动新的 Task 。</p>
<p>如果这个 flag 使得 Activity 启动到新的 Task 中，用户又按下 Home 键离开它，这里将有许多种方式来让用户导航回 Task 。某些入口（如通知管理器）总是在外部 Task 中启动 Activity ，而不是在自己内部，因此调用 startActivity() 总是在意图中传递 FLAG_ACTIVITY_NEW_ACTIVITY 。如果你需要一个 Activity 可以被外部的入口调用，则使用这个 flag ，需要注意的是用户有独立的方式来返回到启动的 Task ，如通过启动器图标。</p>
<ul>
<li>当一个 Activity 有 allowTaskReparenting 属性并设置为 true 。</li>
</ul>
<h3 id="清空后退栈"><a href="#清空后退栈" class="headerlink" title="清空后退栈"></a>清空后退栈</h3><p>如果用户离开 Task 一段时间，系统将清空 Task 中除根 Activity 之外的所有 Activity 。当用户再次回到 Task ，只有根 Activity 将被回复。系统行为之所以如此，是因为在经历一段相对长的时间，用户将放弃之前所做的一些事情，而返回 Task 是为了开始其他新的事情。</p>
<p>这里有一些 Activity 的属性可以用来修改这个行为：</p>
<ul>
<li>alwaysRetainTaskState</li>
</ul>
<p>如果在 Task 的根 Activity 中将这个属性设置为 true ，上面提到的默认行为将不会发生。 即时经过很长一段时间， Task 也将在栈中保持所有的 Activity 。</p>
<ul>
<li>clearTaskOnLaunch</li>
</ul>
<p>如果在 Task 的根 Activity 中将这个属性设置为 true ，无论用户离开 Task 或是返回它，堆栈将被清空只剩下根 Activity。换句话说，这与 alwaysRetainTaskState 刚刚相反。即时在离开很短的时间，用户也将返回 Task 的初始状态。</p>
<ul>
<li>finishOnTaskLaunch</li>
</ul>
<p>这个属性类似 clearTaskOnLaunch ，但是这个仅作用于单个 Activity ，而不是整个 Task 。这能引起任何 Activity 消失，包括根 Activity 。当它被设置为 true ， Activity 仅仅为当前会话维持 Task 的部分。如果用户离开或者过会儿返回 Task 都不在了。</p>
<h3 id="启动-Task"><a href="#启动-Task" class="headerlink" title="启动 Task"></a>启动 Task</h3><p>通过给定某个 Activity 包含 “android.intent.action.MAIN” 为指定动作， “android.intent.category.LAUNCHER” 为指定类别的意图过滤器，可以将 Activity 作为 Task 的入口。实例如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">...</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">...</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种类型的意图过滤器在应用程序启动器上显示 Activity 的图标和标签。由于这种原因，”singleTask” 和 “singleInstance” 两种启动模式标记 Activity 初始化 Task 只能在 Activity 拥有 ACTION_MAIN 和 CATEGORY_LAUNCHER 过滤器时使用。想象一下如果没有这些过滤器将发生什么：一个意图启动了 “singleTask” 的 Activity ，初始化了 Task ，用户在这个 Task 上玩耍了一段时间，然后按下了 Home 键。Task 就进入了后台且不可见。现在用户无法再返回到 Task ，因为应用程序启动器上没有显示…</p>
<p>在那些不需要用户返回到 Activity 的情况，设置 <code>&lt;activity&gt;</code> 元素的 finishOnTaskLaunch 为 true 。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/guide/components/tasks-and-back-stack.html" target="_blank" rel="external">https://developer.android.com/guide/components/tasks-and-back-stack.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用程序通常包含多个 Activity。每个 Activity 围绕用户能够执行的指定动作类型和启动其他 Activity 来设计。例如，一个邮件应用程序有一个用来显示新信息列表的 Activity ，当用户选择一条信息，一个新的 Activity 打开用来查看信息。&lt;/p
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Android" scheme="http://linfuyan.com/tags/Android/"/>
    
      <category term="Activity" scheme="http://linfuyan.com/tags/Activity/"/>
    
      <category term="Task" scheme="http://linfuyan.com/tags/Task/"/>
    
      <category term="后退栈" scheme="http://linfuyan.com/tags/%E5%90%8E%E9%80%80%E6%A0%88/"/>
    
  </entry>
  
</feed>
