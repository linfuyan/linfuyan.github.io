<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悠城札记 - 关注但不限于 Android/iOS/nodejs 的 hexo 博客</title>
  <subtitle>关注但不限于 Android、iOS、nodejs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linfuyan.com/"/>
  <updated>2017-08-21T09:51:26.000Z</updated>
  <id>http://linfuyan.com/</id>
  
  <author>
    <name>linfuyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel思维导图之Laravel入门指南</title>
    <link href="http://linfuyan.com/mindmap-laravel-start-guide/"/>
    <id>http://linfuyan.com/mindmap-laravel-start-guide/</id>
    <published>2017-08-06T12:48:00.000Z</published>
    <updated>2017-08-21T09:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/%e7%b2%be%e8%bf%9b%e8%84%91%e5%9b%be%e4%b9%8bLaravel%e5%85%a5%e9%97%a8%e6%8c%87%e5%8d%97.jpg" alt="精进脑图之Laravel入门指南"></p>
<blockquote>
<p>本系列思维导图整理自 Laravel 5.4 版本官方文档。</p>
<p>思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：<strong>up2048</strong>，并回复“<strong>精进脑图</strong>”来获取。</p>
</blockquote>
<p>今天我们就通过 4 张思维导图来快速看 Laravel 5.4 入门指南。</p>
<a id="more"></a>
<h2 id="Laravel-安装"><a href="#Laravel-安装" class="headerlink" title="Laravel 安装"></a>Laravel 安装</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/Laravel%e5%ae%89%e8%a3%85.png" alt="Laravel 安装"></p>
<h2 id="Laravel-配置信息"><a href="#Laravel-配置信息" class="headerlink" title="Laravel 配置信息"></a>Laravel 配置信息</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/Laravel%e9%85%8d%e7%bd%ae%e4%bf%a1%e6%81%af.png" alt="Laravel 配置信息"></p>
<h2 id="Laravel-文件夹结构"><a href="#Laravel-文件夹结构" class="headerlink" title="Laravel 文件夹结构"></a>Laravel 文件夹结构</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/Laravel%e6%96%87%e4%bb%b6%e5%a4%b9%e7%bb%93%e6%9e%84.png" alt="Laravel 结构"></p>
<h2 id="Laravel-请求生命周期"><a href="#Laravel-请求生命周期" class="headerlink" title="Laravel 请求生命周期"></a>Laravel 请求生命周期</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/Laravel%e8%af%b7%e6%b1%82%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f.png" alt="Laravel 请求生命周期"></p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>接下来，本人会继续对 Laravel 做比较系统的学习，会以思维导图的形式做梳理并于大家分享。这些文章都将首发在微信公众号：up2048 上。欢迎大家扫描下面的二维码，我们一起学习，分享，讨论，反思。</p>
<p>- EOF -</p>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTE5MzYzOA==&amp;mid=2649861276&amp;idx=1&amp;sn=61e039b1eb87a330b84d1a70dbe72c0a&amp;chksm=8341d0d5b43659c32a5ec6849c9fbfa17303bb7fd9f623e9d2b1cd4f1e82b9b61c92d48a5013#rd" target="_blank" rel="external">十五张思维导图带你快速学习PHP言语基础</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7sbydj.com1.z0.glb.clouddn.com/static/images/%e7%b2%be%e8%bf%9b%e8%84%91%e5%9b%be%e4%b9%8bLaravel%e5%85%a5%e9%97%a8%e6%8c%87%e5%8d%97.jpg&quot; alt=&quot;精进脑图之Laravel入门指南&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本系列思维导图整理自 Laravel 5.4 版本官方文档。&lt;/p&gt;
&lt;p&gt;思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：&lt;strong&gt;up2048&lt;/strong&gt;，并回复“&lt;strong&gt;精进脑图&lt;/strong&gt;”来获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们就通过 4 张思维导图来快速看 Laravel 5.4 入门指南。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="思维导图" scheme="http://linfuyan.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="php" scheme="http://linfuyan.com/tags/php/"/>
    
      <category term="laravel" scheme="http://linfuyan.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>十五张思维导图带你快速学习PHP语言基础</title>
    <link href="http://linfuyan.com/mindmap-php-base/"/>
    <id>http://linfuyan.com/mindmap-php-base/</id>
    <published>2017-08-03T12:48:00.000Z</published>
    <updated>2017-08-21T09:55:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/精进脑图之PHP基础.png" alt="精进脑图之PHP基础"></p>
<blockquote>
<p>在打算系统的学习 Laravel 之前，我抽空看了 PHP 语言基础，并且绘制了各个部分的思维导图，以方便自己从一些图片就可以查看相关知识的全貌。</p>
<p>这部分思维导图整理自菜鸟教程的 PHP 教程。</p>
<p>思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：<strong>up2048</strong>，并回复“<strong>精进脑图</strong>”来获取。</p>
</blockquote>
<p>下面我们就通过 15 张思维导图来快速学习 PHP 语言基础。</p>
<a id="more"></a>
<h2 id="0x00-PHP-简介"><a href="#0x00-PHP-简介" class="headerlink" title="0x00 PHP 简介"></a>0x00 PHP 简介</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP简介.png" alt="PHP简介"></p>
<h2 id="0x01-PHP-安装"><a href="#0x01-PHP-安装" class="headerlink" title="0x01 PHP 安装"></a>0x01 PHP 安装</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP安装.png" alt="PHP安装"></p>
<h2 id="0x02-PHP-语法"><a href="#0x02-PHP-语法" class="headerlink" title="0x02 PHP 语法"></a>0x02 PHP 语法</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP语法.png" alt="PHP语法"></p>
<h2 id="0x03-PHP-数据类型"><a href="#0x03-PHP-数据类型" class="headerlink" title="0x03 PHP 数据类型"></a>0x03 PHP 数据类型</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP数据类型.png" alt="PHP数据类型"></p>
<h2 id="0x04-PHP-变量"><a href="#0x04-PHP-变量" class="headerlink" title="0x04 PHP 变量"></a>0x04 PHP 变量</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP变量.png" alt="PHP变量"></p>
<h2 id="0x05-PHP-数组"><a href="#0x05-PHP-数组" class="headerlink" title="0x05 PHP 数组"></a>0x05 PHP 数组</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP数组.png" alt="PHP数组"></p>
<h2 id="0x06-PHP-常量"><a href="#0x06-PHP-常量" class="headerlink" title="0x06 PHP 常量"></a>0x06 PHP 常量</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP常量.png" alt="PHP常量"></p>
<h2 id="0x07-PHP-超级全局变量"><a href="#0x07-PHP-超级全局变量" class="headerlink" title="0x07 PHP 超级全局变量"></a>0x07 PHP 超级全局变量</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP超级全局变量.png" alt="PHP超级全局变量"></p>
<h2 id="0x08-PHP-魔术变量"><a href="#0x08-PHP-魔术变量" class="headerlink" title="0x08 PHP 魔术变量"></a>0x08 PHP 魔术变量</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP魔术变量.png" alt="PHP魔术变量"></p>
<h2 id="0x09-PHP-运算符"><a href="#0x09-PHP-运算符" class="headerlink" title="0x09 PHP 运算符"></a>0x09 PHP 运算符</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP运算符.png" alt="PHP运算符"></p>
<h2 id="0x0A-PHP-流程语句"><a href="#0x0A-PHP-流程语句" class="headerlink" title="0x0A PHP 流程语句"></a>0x0A PHP 流程语句</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP流程语句.png" alt="PHP流程语句"></p>
<h2 id="0x0B-PHP-函数"><a href="#0x0B-PHP-函数" class="headerlink" title="0x0B PHP 函数"></a>0x0B PHP 函数</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP函数.png" alt="PHP函数"></p>
<h2 id="0x0C-PHP-命名空间"><a href="#0x0C-PHP-命名空间" class="headerlink" title="0x0C PHP 命名空间"></a>0x0C PHP 命名空间</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP命名空间.png" alt="PHP命名空间"></p>
<h2 id="0x0D-PHP-面向对象"><a href="#0x0D-PHP-面向对象" class="headerlink" title="0x0D PHP 面向对象"></a>0x0D PHP 面向对象</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP面向对象.png" alt="PHP面向对象"></p>
<h2 id="0x0E-PHP-错误与异常"><a href="#0x0E-PHP-错误与异常" class="headerlink" title="0x0E PHP 错误与异常"></a>0x0E PHP 错误与异常</h2><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/PHP错误与异常.png" alt="PHP错误与异常"></p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>接下来，本人会对 Laravel 做比较系统的学习，会以思维导图的形式做梳理并于大家分享。这些文章都将首发在微信公众号：up2048 上。欢迎大家扫描下面的二维码，我们一起学习，分享，讨论，反思。</p>
<h2 id="EOF"><a href="#EOF" class="headerlink" title="- EOF -"></a>- EOF -</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7sbydj.com1.z0.glb.clouddn.com/static/images/精进脑图之PHP基础.png&quot; alt=&quot;精进脑图之PHP基础&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在打算系统的学习 Laravel 之前，我抽空看了 PHP 语言基础，并且绘制了各个部分的思维导图，以方便自己从一些图片就可以查看相关知识的全貌。&lt;/p&gt;
&lt;p&gt;这部分思维导图整理自菜鸟教程的 PHP 教程。&lt;/p&gt;
&lt;p&gt;思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：&lt;strong&gt;up2048&lt;/strong&gt;，并回复“&lt;strong&gt;精进脑图&lt;/strong&gt;”来获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们就通过 15 张思维导图来快速学习 PHP 语言基础。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://linfuyan.com/tags/PHP/"/>
    
      <category term="思维导图" scheme="http://linfuyan.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>【小白必读】微信小程序 https 支持导致的问题及配置 https 支持的流程</title>
    <link href="http://linfuyan.com/weapp-https/"/>
    <id>http://linfuyan.com/weapp-https/</id>
    <published>2017-05-25T06:26:00.000Z</published>
    <updated>2017-05-25T06:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近泡在好几个微信小程序QQ群里，发现大家提的好多问题是由于微信小程序的 https 支持引起的，这篇文章里面对于微信小程序的 https 相关问题做一些说明。</p>
</blockquote>
<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><p>哪些情况可能是由于 https 的配置导致的？</p>
<p>1. 小程序页面出现白屏</p>
<p>大部分的小程序页面需要通过服务器接口返回的数据进行填充之后才能展示，由于 https 的配置错误，导致数据无法获取到，表现在小程序的界面上就是这个页面没有数据，看起来白屏。有的小伙伴儿在开发的时候是能拿到数据，显示没有问题的，而提交审核以后却因为没有显示数据而不通过，就是这个原因。</p>
<p>2. 应该显示图片的部分没有内容显示</p>
<p>这个的原因和第一个其实是一样的，返回的图片的地址是 <code>http://</code> 开头，或者返回图片路径不对。所有无法加载出来。</p>
<p>3. 调用 <code>wx.downloadFile/wx.uploadFile</code> 失败</p>
<p>出现上面这些问题时，终端上的调试信息差不多是这样：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/wxapp-https-debug.png" alt="微信https问题调试"></p>
<h2 id="问题缘起"><a href="#问题缘起" class="headerlink" title="问题缘起"></a>问题缘起</h2><p><strong>正式上线的微信小程序仅支持 https 的请求，包括 <code>wx.request</code>, <code>wx.uploadFile</code>, <code>wx.downloadFile</code> 等 API，以及其他支持网络资源的组件，如 <code>&lt;image&gt;</code></strong>。</p>
<p>具体可以参看相关的 API 说明。</p>
<p>很多小伙伴儿疑惑，我的小程序接口不是 https 的呀，网上获取到的很多实例代码也都不是，为什么在微信 web 开发者工具里面都可以正常的跑起来呢？有更多的人可能在疑惑，为啥很多实例代码跑起来以后白屏或者图片不显示呢？</p>
<p>上面提到一个限定：<strong>正式上线的微信小程序</strong>仅支持 https 请求。正式环境为了安全，那开发环境也按照正式环境的标准来要求，就会有很多的不方便了。所以在开发环境下，微信小程序是可以支持 http 请求的，这在微信 web 开发者工具中可以配置。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/wxapp-https-switch.png" alt="微信https开关"></p>
<p>如上图，勾选最后的选项，开发环境下，不需要 https 请求，也能够获取到网络请求的数据了。所以从网络上下载了实例代码的小伙伴儿，如果出现白屏或者图片不显示，检查一下请求的 url，检查一下这块的配置，再跑起来看看是不是已经可以了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>确定了问题是因为没有 https 支持导致的，那接下来该怎么解决呢？</p>
<p><strong>显然解决方案是为来自服务端的请求加上 https 支持，为 <code>wx.uploadFile</code> 等 API 的请求域名加上 https 支持。</strong></p>
<p>为微信小程序配置 https 支持的步骤如下：</p>
<ol>
<li>具有部署服务端代码的空间及访问服务的域名</li>
<li>根据需要申请到域名对应的 https 证书</li>
<li>配置 web 服务器，使其支持 https</li>
<li>微信小程序后台配置对应的域名</li>
<li>微信小程序代码上的请求链接修改为 https</li>
</ol>
<h3 id="空间和域名"><a href="#空间和域名" class="headerlink" title="空间和域名"></a>空间和域名</h3><p>你的服务端代码最终是要部署到空间或者云服务器上的。最终上线的微信小程序服务器必须有域名，IP 地址是不支持的。所以你还必须有个域名。</p>
<p>空间/云服务器，域名哪里来，怎么申请，就不说了。如果你在公司，应该有专门的人来搞这个，或者已经都有了。如果你是个人，以前没接触过，可能需要花时间了解一下。</p>
<h3 id="https-证书申请"><a href="#https-证书申请" class="headerlink" title="https 证书申请"></a>https 证书申请</h3><p>有了域名，就可以针对域名申请 https 证书了。支持 https 的证书有许多这种，现在网上可以申请到免费的 https 证书。阿里云、七牛、腾讯云、let’s encrypt 等都有。具体这里也不展开。</p>
<h3 id="web-服务器配置"><a href="#web-服务器配置" class="headerlink" title="web 服务器配置"></a>web 服务器配置</h3><p>一般服务部署以后，是通过 web 服务器才访问到的。由于使用的技术五花八门，而你可能只接触到了开发环境，对最后的上线不太了解。这里只大略提一下。</p>
<p>大部分的开发人员，如果是 Java 开发后台，可能开发测试是在 tomcat 上跑的，本地测试经常访问 <code>http://localhost:8080</code> 这样；如果是 php，可能用的 phpstorm，运行起来以后，也是直接带个本地地址访问；又或者是 nodejs 的，命令行启动以后，内置的服务器就跑起来可以访问了；总而言之，最后的部署环境和开发时是不一样的。</p>
<p>针对不同的技术，有其自己特有的 https 配置方案。如果你是这种情况，根据需要查找资料吧。但一般企业应用有更通用的做法。</p>
<p>最后部署时，一般有 nginx 或者 apache，做反向代理及负载均衡等，然后才访问到真正的服务端业务代码。</p>
<p>举个例子：我用 Java 开发了后台服务程序，并且跑在 tomcat 上。然后正式对外时，我用 nginx 做反向代理。那么这个看起来就像下面图所示。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/server-deploy-arch.png" alt="服务端部署架构"></p>
<p>这时，通常就是对 nginx 做支持 https 的配置，以及配置反向代理。</p>
<h3 id="小程序后台配置"><a href="#小程序后台配置" class="headerlink" title="小程序后台配置"></a>小程序后台配置</h3><p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/https-required.png" alt="小程序后台配置 https"></p>
<p>当服务器的 https 支持配置完成以后，需要在小程序后台中配置上合法的服务器域名。必须针对不同的 API 使用，配置对应的域名。</p>
<h3 id="修改小程序代码，用-https-访问"><a href="#修改小程序代码，用-https-访问" class="headerlink" title="修改小程序代码，用 https 访问"></a>修改小程序代码，用 https 访问</h3><p>一切准备就绪，接下来就是修改小程序上的请求代码，用 https 访问。再将开发工具上的 https 验证的开发打开。这时候应该程序正常响应了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是 https 配置导致的小程序问题，以及配置 https 支持需要的流程。每个部分都只粗略地提到，之所以没有具体说明，是因为每块都有挺多的内容可以讲。而针对小伙伴儿们不同的环境，又会有各种不同的方案。流程在这里了，每块具体内容大家自己查资料。后续我也可能针对具体内容写一些文章。欢迎到微信公众号“非典型程序员(up2048)”给我留言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近泡在好几个微信小程序QQ群里，发现大家提的好多问题是由于微信小程序的 https 支持引起的，这篇文章里面对于微信小程序的 https 相关问题做一些说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题汇总&quot;&gt;&lt;a href=&quot;#问
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="微信" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="微信" scheme="http://linfuyan.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="小程序" scheme="http://linfuyan.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="https" scheme="http://linfuyan.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>在 Android 上开始使用 Kotlin</title>
    <link href="http://linfuyan.com/android-kotlin-get-started/"/>
    <id>http://linfuyan.com/android-kotlin-get-started/</id>
    <published>2017-05-18T04:00:00.000Z</published>
    <updated>2017-05-18T10:29:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自：<a href="https://developer.android.com/kotlin/get-started.html" target="_blank" rel="external">https://developer.android.com/kotlin/get-started.html</a></p>
</blockquote>
<p>Android Studio 3.0 完整的支持 Kotlin，因此下面的这些操作都很方便。包括通过 Kotlin 文件创建新的项目，添加新的 Kotlin 文件到已有项目中，或者将 Java 语言代码转为 Kotlin。同时，你也可以针对 Kotlin 代码来使用所有 Android Studio已有的工具，如自动补全，lint 检查，重构，调试等。</p>
<p>这篇文章将介绍如何再 Android Studio 中开始使用 Kotlin。</p>
<h2 id="创建新项目来使用-Kotlin"><a href="#创建新项目来使用-Kotlin" class="headerlink" title="创建新项目来使用 Kotlin"></a>创建新项目来使用 Kotlin</h2><p>在新项目中使用 Kotlin，仅需要在新项目向导中一个额外的点击：</p>
<ol>
<li>在 Android Studio 中，点击<strong>文件(File) &gt; 新建(New) &gt; 新项目(New Project)</strong>。或者你刚刚打开 Android Studio，看到了 Android Studio 的欢迎窗口，那么点击<strong>开始一个新的 Android Studio 项目</strong>。</li>
<li>在第一个屏幕，选中<strong>包含 Kotlin 支持(Include Kotlin Support)</strong>。就只有这一个唯一的区别。</li>
<li>点击<strong>下一步(Next)</strong>并继续后面的向导直到结束。</li>
</ol>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kotlin-new-project_2x.png" alt="kotlin-new-project"></p>
<p>当你选择了一个 Activity 模板，它将以 Kotlin 代码提供。现在，至于一些<strong>手机和平板</strong>的模板提供了惯用的 Kotlin 代码。其他的则是从 Java 模板自动转化为 Kotlin。你仍然得到的是 Kotlin 代码，但是某些代码没有使用 Kotlin 最佳的语言特性。</p>
<p>与 Java 文件一样，Kotlin 文件被保存在 <code>src/main/java/</code> 目录下。</p>
<h2 id="在现有项目中添加-Kotlin"><a href="#在现有项目中添加-Kotlin" class="headerlink" title="在现有项目中添加 Kotlin"></a>在现有项目中添加 Kotlin</h2><p>如果你想要添加 Kotlin 代码到现有的项目中，简单点击<strong>文件(File) &gt; 新建(New)</strong>，并从中选择一个 Android 模板。如果你没有在菜单中看到模板列表，需要先打开<strong>项目(Project)</strong>窗口，并选择你的 App 模块。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/new-template-menu_2x.png" alt="new-template-menu"></p>
<p>在展示的向导中，为<strong>源代码(Source Language)</strong>选择 Kotlin。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kotlin-new-activity_2x.png" alt="kotlin-new-activity"></p>
<p>继续后面的向导，直到结束。</p>
<p>此外，你可以点击<strong>文件(File) &gt; 新建(New) &gt; Kotlin文件/类(Kotlin File/Class)</strong>来创建基础文件。<strong>新建Kotlin文件/类</strong>窗口提供了不同文件类型的选择，但不用太在意你选择了那种文件。因为当你以后改变了声明方式， Kotlin 会自动切换文件类型。</p>
<p>默认情况下，新的 Kotlin 文件会被保存在 <code>src/main/java/</code> 中。你会发现 Kotlin 和 Java 文件在一个位置。如果你更喜欢将 Kotlin 文件与 Java 文件分开，你可以把 Kotlin 文件放到 <code>src/main/kotlin/</code> 目录下。这样做，你需要修改 sourceSets 的配置来包含该目录。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">   sourceSets &#123;</div><div class="line">       main<span class="selector-class">.java</span><span class="selector-class">.srcDirs</span> += <span class="string">'src/main/kotlin'</span></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="转换现有的-Java-代码为-Kotlin-代码"><a href="#转换现有的-Java-代码为-Kotlin-代码" class="headerlink" title="转换现有的 Java 代码为 Kotlin 代码"></a>转换现有的 Java 代码为 Kotlin 代码</h2><p>在 Android Studio 3.0 中，打开 Java 文件，并且选择<strong>代码(Code) &gt; 转换 Java 文件为 Kotlin 文件</strong>。</p>
<p>或者创建新的 Kotlin 文件(<strong>File &gt; New &gt; Kotlin File/Class</strong>)，然后粘贴 Java 代码到该文件里，当弹出提示时，点击<strong>是</strong>来转换代码到 Kotlin。你可以选中<strong>下次不再显示该对话框</strong>来取消同样操作时的提示。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kotlin-convert_2x.png" alt="kotlin-convert"></p>
<h2 id="Kotlin-如何来使用-Android-API"><a href="#Kotlin-如何来使用-Android-API" class="headerlink" title="Kotlin 如何来使用 Android API"></a>Kotlin 如何来使用 Android API</h2><p>Kotlin 提供了与 Java 语言完整的互操作性，所以调用 Android API 看起来与 Java 代码几乎一样。此外，你还可以将这些方法调用与Kotlin的语法特征相结合。</p>
<p>下面是一些如何在 Kotlin 中调用 Android API 的例子，同时对比 Java 的相同代码。</p>
<p><strong>在 Kotlin 中声明 Activity</strong></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">    setContentView(R.layout.activity)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>在 Java 中声明 Activity</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(<span class="type">R</span>.layout.activity);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Kotlin 中的 On-click listener</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">val fab = findViewById(R<span class="selector-class">.id</span><span class="selector-class">.fab</span>) as FloatingActionButton</div><div class="line">fab<span class="selector-class">.setOnClickListener</span> &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Java 中的 On-click listener</strong></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Kotlin 中的 Item click listener</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private val mOnNavigationItemSelectedListener</div><div class="line">    = BottomNavigationView<span class="selector-class">.OnNavigationItemSelectedListener</span> &#123; item -&gt;</div><div class="line">  when (item.itemId) &#123;</div><div class="line">    R<span class="selector-class">.id</span><span class="selector-class">.navigation_home</span> -&gt; &#123;</div><div class="line">      mTextMessage.setText(R<span class="selector-class">.string</span><span class="selector-class">.title_home</span>)</div><div class="line">      return@OnNavigationItemSelectedListener true</div><div class="line">    &#125;</div><div class="line">    R<span class="selector-class">.id</span><span class="selector-class">.navigation_dashboard</span> -&gt; &#123;</div><div class="line">      mTextMessage.setText(R<span class="selector-class">.string</span><span class="selector-class">.title_dashboard</span>)</div><div class="line">      return@OnNavigationItemSelectedListener true</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"> false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Java 中的 Item click listener</strong></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</div><div class="line">    = <span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">      <span class="keyword">case</span> R.id.navigation_home:</div><div class="line">        mTextMessage.setText(R.string.title_home);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">case</span> R.id.navigation_dashboard:</div><div class="line">        mTextMessage.setText(R.string.title_dashboard);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<p>如果你还没有入坑，那我告诉你，是时候学习 Kotlin 了。</p>
<p><a href="http://uprogrammer.cn/kotlin-in-chinese/index.html" target="_blank" rel="external">Kotlin 中文文档</a></p>
<p><a href="http://uprogrammer.cn/kotlin-for-android-developers-zh/index.html" target="_blank" rel="external">写给 Android 开发者的 Kotlin 教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;https://developer.android.com/kotlin/get-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.andro
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Android O" scheme="http://linfuyan.com/tags/Android-O/"/>
    
      <category term="Kotlin" scheme="http://linfuyan.com/tags/Kotlin/"/>
    
      <category term="Google IO 2017" scheme="http://linfuyan.com/tags/Google-IO-2017/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 成为 Android 官方语言，看看官方怎么说？</title>
    <link href="http://linfuyan.com/android-kotlin/"/>
    <id>http://linfuyan.com/android-kotlin/</id>
    <published>2017-05-18T03:21:00.000Z</published>
    <updated>2017-05-18T10:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自：<a href="https://developer.android.com/kotlin/index.html" target="_blank" rel="external">https://developer.android.com/kotlin/index.html</a></p>
</blockquote>
<p>伴随着开发者持续增长的兴趣，我们发现多年来 Android 开发中 Kotlin 被越来越多地采用。 Kotlin 具有很好的表现力，简洁，容易扩展，强大，并有优雅的可读写性。在可空性和不变性的处理上，有非常精彩的安全特性。这与我们想要让 Android 应用更加健壮和高效方面的投入相吻合。最重要的是，它与现有的 Android 语言及运行时可以相互操作。所以我们很高兴地让 Kotlin 成为 Android 上的官方语言。</p>
<a id="more"></a>
<p>如果你对使用 Kotlin 感兴趣，那么这将很容易开始。因为它可以与 Android 和 Android 平台上的 Java 和 C++ 搭配使用。所以你可以保持原有的代码，继续使用不同的 Android 库，并添加 Kotlin 代码到你的项目中。与其他多数语言不同， Kotlin 是可以双向使用的替代品。你可以从 Kotlin 调用 Java 语言，也可以从 Java 调用 Kotlin。</p>
<p>当然， IDE 的支持也是至关重要的，并且我们也已经拥有它。 Android Studio 是基于 JetBrains 开发的 IDE 产品 IntelliJ IDEA 来构建的。而正是这家公司发明了 Kotlin 语言。 JetBrains 的团队已经为能够让 Kotlin 在 IntelliJ IDEA 完美运行工作了很多年。所以我们将继承他们的辛勤工作。从 Android Studio 3.0 开始，对 Kotlin 的支持工具将直接集成在 Android Studio 中。</p>
<p>我们认为 Kotlin 非常适合 Android，不仅因为它为开发者提供了他们想要的，而且还因为它符合 Android 的精神。与 Android 一样， Kotlin 一直是 Apache 2 下开放源代码项目。它涉及整个社区，而不仅仅是一家公司。我们正在与 JetBrains 合作，把 Kotlin 转为一个非盈利的机构。</p>
<p>对于选择 Kotlin，正是我们对于“随着 Android 平台的不断发展和壮大，我们致力于开放开发者生态”的理念的重申。 Kotlin 语言的发展让我们感到兴奋。</p>
<hr>
<p>如果你还没有入坑，那我告诉你，是时候学习 Kotlin 了。</p>
<p><a href="http://uprogrammer.cn/kotlin-in-chinese/index.html" target="_blank" rel="external">Kotlin 中文文档</a></p>
<p><a href="http://uprogrammer.cn/kotlin-for-android-developers-zh/index.html" target="_blank" rel="external">写给 Android 开发者的 Kotlin 教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;https://developer.android.com/kotlin/index.html&quot;&gt;https://developer.android.com/kotlin/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;伴随着开发者持续增长的兴趣，我们发现多年来 Android 开发中 Kotlin 被越来越多地采用。 Kotlin 具有很好的表现力，简洁，容易扩展，强大，并有优雅的可读写性。在可空性和不变性的处理上，有非常精彩的安全特性。这与我们想要让 Android 应用更加健壮和高效方面的投入相吻合。最重要的是，它与现有的 Android 语言及运行时可以相互操作。所以我们很高兴地让 Kotlin 成为 Android 上的官方语言。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Android O" scheme="http://linfuyan.com/tags/Android-O/"/>
    
      <category term="Kotlin" scheme="http://linfuyan.com/tags/Kotlin/"/>
    
      <category term="Google IO 2017" scheme="http://linfuyan.com/tags/Google-IO-2017/"/>
    
  </entry>
  
  <entry>
    <title>Java Swing 代码打包成 Windows 上的 exe 文件</title>
    <link href="http://linfuyan.com/java-swing-drag-jar-exe/"/>
    <id>http://linfuyan.com/java-swing-drag-jar-exe/</id>
    <published>2017-03-16T05:30:00.000Z</published>
    <updated>2017-03-16T05:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>年前抽空给朋友做了个小东西。具体功能就不说了。对于他的最终需求，概括的说就是：需要一个满足功能的在 windows 上的 .exe 文件。桌面开发我不熟，后来基于 Java Swing 给实现了。在实现过程中，几个关键点记下来做备忘。</p>
<ol>
<li>拖拽文件到界面的输入框中，后续对文件进行处理。简化一下，拖拽文件到输入框，并获取文件路径。</li>
<li>项目的依赖是用 Gradle 来管理的，功能实现依赖第三方 jar，最终需要打包成一个可执行 jar。</li>
<li>将制作好的 jar 打包成 .exe 文件。</li>
</ol>
<a id="more"></a>
<h2 id="1-实现拖拽文件到指定控件，并获取文件路径"><a href="#1-实现拖拽文件到指定控件，并获取文件路径" class="headerlink" title="1. 实现拖拽文件到指定控件，并获取文件路径"></a>1. 实现拖拽文件到指定控件，并获取文件路径</h2><p>直接上核心代码，具体看注释。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.datatransfer.DataFlavor;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DnDConstants;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DropTarget;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DropTargetAdapter;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DropTargetDropEvent;</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 拖拽文件到控件,并处理</div><div class="line">     * @param component 要接受拖拽的控件</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> drag(Component component) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> DropTarget(component, DnDConstants.ACTION_COPY_OR_MOVE, <span class="keyword">new</span> DropTargetAdapter() &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 重写适配器的drop方法,实现自己需要的逻辑</span></div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> drop(DropTargetDropEvent event) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 如果拖入的文件格式受支持</span></div><div class="line">                    <span class="keyword">if</span> (event.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) &#123;</div><div class="line">                        <span class="comment">// 接收拖拽来的数据</span></div><div class="line">                        event.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);</div><div class="line">                        <span class="comment">// 读取传递过来的数据</span></div><div class="line">                        java.util.List&lt;File&gt; list = (java.util.List&lt;File&gt;) (event.getTransferable().getTransferData(DataFlavor.javaFileListFlavor));</div><div class="line">                        <span class="comment">// 对传递过来的数据做处理</span></div><div class="line">                        <span class="comment">// do what you want to do</span></div><div class="line">                        event.dropComplete(<span class="literal">true</span>); <span class="comment">// 指示拖拽操作已完成</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        event.rejectDrop(); <span class="comment">// 否则拒绝拖拽来的数据</span></div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="2-通过-Gradle-制作可执行的-jar-文件"><a href="#2-通过-Gradle-制作可执行的-jar-文件" class="headerlink" title="2. 通过 Gradle 制作可执行的 jar 文件"></a>2. 通过 Gradle 制作可执行的 jar 文件</h2><p>参考这里：<a href="http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle" target="_blank" rel="external">Creating runnable JAR with Gradle</a></p>
<p>里面提到了两种方案，一种是直接使用 application 插件，另一种是 shadowJar 插件。</p>
<p>我最终采用了 shadowJar 的方式实现，核心代码如下：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    <span class="attribute">repositories &#123;</span></div><div class="line">        maven &#123;</div><div class="line">            url "https://plugins<span class="variable">.gradle</span><span class="variable">.org</span>/m2/"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath "com<span class="variable">.github</span><span class="variable">.jengelman</span><span class="variable">.gradle</span><span class="variable">.plugins</span>:shadow:1.2.4"</div><div class="line">        classpath 'gradle<span class="variable">.plugin</span><span class="variable">.edu</span><span class="variable">.sc</span><span class="variable">.seis</span><span class="variable">.gradle</span>:launch4j:2.3.0'</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: 'java'</div><div class="line">apply plugin: 'com<span class="variable">.github</span><span class="variable">.johnrengelman</span><span class="variable">.shadow</span>'</div><div class="line"></div><div class="line">mainClassName = "your<span class="variable">.main</span><span class="variable">.ClassName</span>"</div><div class="line"></div><div class="line">shadowJar &#123;</div><div class="line">    baseName = 'your_jar_name'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打包的命令行如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew shadowJar</div></pre></td></tr></table></figure>
<p>完成后，就可以在 build/libs 目录下找到 <code>*-all.jar</code>。</p>
<p>使用 <code>java -jar your-app-all.jar</code> 运行，看下你的程序已经跑起来了。</p>
<h2 id="3-将-jar-制作成-windows-下的-exe-文件"><a href="#3-将-jar-制作成-windows-下的-exe-文件" class="headerlink" title="3. 将 jar 制作成 windows 下的 exe 文件"></a>3. 将 jar 制作成 windows 下的 exe 文件</h2><p>网上找了很多这方面的工具，最终我发现 launch4j 真是个好用的东西。</p>
<p>我使用的是 launch4j 的 mac 版。这东西是跨平台的。</p>
<p>由于 java 的运行离不开 jre 环境，而除了开发人员，正常用户电脑上基本没有环境。所以我们打包的时候，需要把 jre 一起打包。</p>
<p>mac 上用 launch4j 来将 jar 打包成在 windows 上运行的 exe，还有一点需要注意，就是用于打包的 jre 必须是 windows 下的。</p>
<p>最简单的 launch4j 配置只需两步，就可以把 jar 打包成 exe了。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/jar2exe-1.png" alt="launch4j 基础配置"></p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/jar2exe-2.png" alt="launch4j jre 配置"></p>
<p><strong>jre</strong> 要放置在最终打包的 exe 的同级目录下。这边主要是因为打包后的 exe 是通过相对路径来寻找依赖的 jre。如果配置错误，将导致后面的 exe 文件无法运行。</p>
<p>到这里，最终打包的 exe 是可以运行了。不过 jre 包和 exe 文件是分开的。可以把这些东西，放在一个文件夹下再压缩，最后分发给用户。</p>
<p>还可以把  jre 一起打包到 exe 中。以后有时间我在处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年前抽空给朋友做了个小东西。具体功能就不说了。对于他的最终需求，概括的说就是：需要一个满足功能的在 windows 上的 .exe 文件。桌面开发我不熟，后来基于 Java Swing 给实现了。在实现过程中，几个关键点记下来做备忘。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拖拽文件到界面的输入框中，后续对文件进行处理。简化一下，拖拽文件到输入框，并获取文件路径。&lt;/li&gt;
&lt;li&gt;项目的依赖是用 Gradle 来管理的，功能实现依赖第三方 jar，最终需要打包成一个可执行 jar。&lt;/li&gt;
&lt;li&gt;将制作好的 jar 打包成 .exe 文件。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="经验实践" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E7%BB%8F%E9%AA%8C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="swing" scheme="http://linfuyan.com/tags/swing/"/>
    
      <category term="shadowJar" scheme="http://linfuyan.com/tags/shadowJar/"/>
    
      <category term="launch4j" scheme="http://linfuyan.com/tags/launch4j/"/>
    
  </entry>
  
  <entry>
    <title>树莓派折腾记之第一天</title>
    <link href="http://linfuyan.com/raspberrypi-day1/"/>
    <id>http://linfuyan.com/raspberrypi-day1/</id>
    <published>2017-03-06T14:08:00.000Z</published>
    <updated>2017-03-06T14:08:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>周五晚上开箱晒图以后，直到周日才有时间开始折腾我的树莓派。</p>
<p>今天第一个小目标，就是点亮树莓派。</p>
<p>先说一下我自己拥有的设备。</p>
<ol>
<li>mac 电脑，没有 windows 系统。</li>
<li>没有键盘，有一个无线鼠标。</li>
<li>一台有 HDMI 接口的电视机。</li>
<li>网线一根</li>
</ol>
<p>另外就是我之前买回来的树莓派及配件了。</p>
<h2 id="Mac-上给树莓派安装-Raspbian"><a href="#Mac-上给树莓派安装-Raspbian" class="headerlink" title="Mac 上给树莓派安装 Raspbian"></a>Mac 上给树莓派安装 Raspbian</h2><p>树莓派支持的系统有很多，官方推荐的是 Raspbian。</p>
<h3 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h3><p>到<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="external">树莓派官网</a>下载 raspbian 的镜像文件。我的是 2017-03-02-raspbian-jessie.zip，1.57 G。解压出来成 2017-03-02-raspbian-jessie.img，有 4.39 G。</p>
<h3 id="格式化-SD-卡"><a href="#格式化-SD-卡" class="headerlink" title="格式化 SD 卡"></a>格式化 SD 卡</h3><p>使用 Mac 自带的磁盘工具，左侧选中对应的 SD 卡，点击右侧的“抹掉”标签，格式选择“MS-DOS(FAT)”，名称根据自己需要填写。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-format-sdcard.png" alt="格式化 SD 卡"></p>
<h3 id="命令行查看挂载的卷"><a href="#命令行查看挂载的卷" class="headerlink" title="命令行查看挂载的卷"></a>命令行查看挂载的卷</h3><p>打开 Mac 终端，在命令行中输入 <code>df -h</code></p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-df-h.png" alt="查看挂载的卷"></p>
<p>在这里可以看到挂载的 SD 卡，类似 <code>/dev/disk3s1</code>。</p>
<h3 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h3><p>在磁盘工具中，同样选中对应的 SD 卡，点击右侧标签上的卸载。</p>
<p>或者使用命令行工具：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diskutil unmount <span class="regexp">/dev/</span>disk3s1</div></pre></td></tr></table></figure>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-unmount.png" alt="卸载分区"></p>
<h3 id="确认-SD-卡设备的标识"><a href="#确认-SD-卡设备的标识" class="headerlink" title="确认 SD 卡设备的标识"></a>确认 SD 卡设备的标识</h3><p>在命令行中输入 <code>diskutil list</code></p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-diskutil-list.png" alt="确认SD卡标识"></p>
<p>其中，<code>/dev/disk3</code> 就是我们要安装系统的设备。记住这个标识，非常的重要。</p>
<h3 id="将-Raspbian-镜像写入-SD-卡"><a href="#将-Raspbian-镜像写入-SD-卡" class="headerlink" title="将 Raspbian 镜像写入 SD 卡"></a>将 Raspbian 镜像写入 SD 卡</h3><p>Mac 下使用 dd 命令来将系统镜像写入设备。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="selector-tag">dd</span> bs=<span class="number">4</span>m <span class="keyword">if</span>=<span class="number">2017</span>-<span class="number">03</span>-<span class="number">02</span>-raspbian-jessie<span class="selector-class">.img</span> of=/dev/disk3</div></pre></td></tr></table></figure>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-write-img.png" alt="写入系统镜像"></p>
<p>if 后面的参数标识镜像文件路径<br>of 后面的参数则是写入设备的标识</p>
<h3 id="卸载设备"><a href="#卸载设备" class="headerlink" title="卸载设备"></a>卸载设备</h3><p>写完以后，在通过 <code>diskutil unmountDisk</code> 命令卸载 SD 卡。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/mac-raspberry-unmount2.png" alt="卸载设备"></p>
<p>这样，安装有 Raspbian 系统的 SD 卡就准备好了。</p>
<blockquote>
<p>以上图示和我实际情况略有出入。是因为我直接使用了其他网友的图片。具体见后面的参考。</p>
</blockquote>
<h2 id="点亮树莓派，进入系统"><a href="#点亮树莓派，进入系统" class="headerlink" title="点亮树莓派，进入系统"></a>点亮树莓派，进入系统</h2><p>接下来，把 SD 卡装入树莓派，接上电源，用 HDMI 线连接电视机。打开电源开关，不出意外，一会儿电视机屏幕上就看到树莓派系统的画面了。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/raspberrypi-boot.gif" alt="树莓派开机启动"></p>
<p>之前看过的很多资料都说点亮系统以后，需要对树莓派进行各种配置。这时候系统却大大出乎我的意料了。因为系统出现树莓派欢迎画面以后，还在继续玩下进行，直到最后直接进入到桌面。这个过程我没有做任何操作。</p>
<p>就这样，很顺利的进入了系统。后来发现新版的系统默认会用 pi/raspberry 的账户自动登录系统。这个真的很方便，对于树莓派小白来讲，门槛降低了很多。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/raspberrypi-logon.jpeg" alt="自动登录树莓派"></p>
<p>然而接下来，我一下子不知道还能干什么。</p>
<ol>
<li>毕竟没有键盘，只有鼠标，系统里面也没有软键盘，根本无法输入。</li>
<li>原来想着及时没有屏幕，也可以通过 ssh 来操作树莓派系统，做很多事情。而新版的树莓派系统是默认关闭 ssh 的。</li>
<li>想要 ssh 我也不知道树莓派系统的 ip。</li>
</ol>
<h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><p>我插上无线鼠标，插上网线，随意点击的过程中，发现右上角的网卡配置上，是可以显示 ip 地址的。这样， ip 就有了。一阵欣喜。</p>
<p>而后，在系统的“首选项”中“树莓派配置”，我发现可以配置 ssh， vnc 等服务的开关。我在这里把 ssh 和 vnc 都打开了。</p>
<p>于是，我在 Mac 的终端里，输入</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">pi</span>@<span class="keyword">192</span>.<span class="keyword">168</span>.<span class="keyword">0</span>.<span class="keyword">5</span> // 这是我的树莓派 ip 地址，你的根据自己情况而定</div></pre></td></tr></table></figure>
<p>顺利地登录了。</p>
<p>此外，只用鼠标，我还配置了系统的语言，时区等，这些配置都有图形化的界面。</p>
<h2 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h2><p>Raspbian 是基于 debian 的，软件包管理工具是强大的 <code>apt</code>。为了能够快速的查找、安装各种软件，需要更新一下软件安装源。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vi</span> /etc/apt/sources.<span class="keyword">list</span></div></pre></td></tr></table></figure>
<p>从这个列表<a href="http://shumeipai.nxez.com/2013/08/31/raspbian-chinese-software-source.html" target="_blank" rel="external">Raspbian 中国软件源</a>中选择一两个源，按照 sources.list 的格式写入。然后执行下面的命令更新。注意：每次修改 <code>sources.list</code>，要使更新生效都必须执行此命令。</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></div></pre></td></tr></table></figure>
<h2 id="通过-VNC-控制树莓派桌面"><a href="#通过-VNC-控制树莓派桌面" class="headerlink" title="通过 VNC 控制树莓派桌面"></a>通过 VNC 控制树莓派桌面</h2><p>在网上看到很多篇关于远程控制树莓派桌面的文章，都是说需要安装 <code>tightvncserver</code>。其实是不需要的，新版的系统上已经内置了 vnc 服务 <code>RealVNC</code>，我们上面的设置中开启 vnc 就可以了。</p>
<p>而 <a href="https://www.realvnc.com/download/viewer/" target="_blank" rel="external">RealVNC</a> 在很多平台下都有客户端，包括 Mac，iOS，Android。我在 Mac 和 iOS 里都下载了 VNC Viewer 客户端，简单配置以后，就可以对树莓派进行远程桌面控制了。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/nvc-on-mac.jpeg" alt="mac vnc 客户端"></p>
<div align="center">mac 上的 VNC Viewer</div>

<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/vnc-on-ios.png" alt="ios vnc 客户端"></p>
<div align="center">iOS 上的 VNC Viewer</div>

<h2 id="安装-kodi，打造多媒体控制中心"><a href="#安装-kodi，打造多媒体控制中心" class="headerlink" title="安装 kodi，打造多媒体控制中心"></a>安装 kodi，打造多媒体控制中心</h2><p>网上大多数的教程都是说可以通过安装 <code>xbmc</code> 来将树莓派打造成多媒体控制中心。简单说就类似一个电视盒子。</p>
<p>其实 <code>xbmc</code> 已经是过去时了。现在叫 <code>kodi</code>, 我是通过命令行安装 <code>xbmc</code> 是才发现的，系统提醒我 <code>xbmc</code> 的包已经过时了。</p>
<p>等我缓过神来，发现树莓派系统的影音菜单里面包含有 <code>Kodi Media Center</code>。所以我不清楚是系统预装的，还是我通过命令行安装的。如果是命令行安装，大家执行如下命令就可以了。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install kodi</div></pre></td></tr></table></figure>
<p>安装完成以后，通过菜单可以打开 kodi。如果你在 VNC Viewer 上远程操作，是看不到 kodi 的界面的。<strong>只能在 HDMI 设备上看到</strong>。</p>
<h3 id="kodi-中文化及安装中文节目插件"><a href="#kodi-中文化及安装中文节目插件" class="headerlink" title="kodi 中文化及安装中文节目插件"></a>kodi 中文化及安装中文节目插件</h3><p>打开 kodi，默认是英文界面。如果想看自己需要的界面，则需要安装对应的插件。下面是插件项目地址：</p>
<p><a href="https://github.com/taxigps/xbmc-addons-chinese" target="_blank" rel="external">Addon scripts, plugins, and skins for XBMC Media Center. Special for chinese laguage.</a></p>
<p>具体安装步骤：</p>
<ol>
<li>下载<a href="https://github.com/taxigps/xbmc-addons-chinese/raw/master/repo/repository.xbmc-addons-chinese/repository.xbmc-addons-chinese-1.2.1.zip" target="_blank" rel="external">插件仓库</a>。</li>
<li>打开 kodi，导航到 系统(System) | 设置(Setting) | 插件(Add-ons)</li>
<li>选择 “从 zip 文件安装”</li>
<li>找到下载的 zip 所在路径，选择确认。</li>
</ol>
<p>以上插件仓库就添加完成了。具体的插件，在需要的时候选择安装就可以了。如点开视频-&gt;插件-&gt;获取更多-&gt;PPTV 等。</p>
<p>kodi 中文化步骤：</p>
<ol>
<li>导航到 系统(System) | 设置(Setting) | 外观(Appearance) | 皮肤(Skin)</li>
<li>修改皮肤的字体设置为 “基于 Arial(Arial based)”</li>
</ol>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/launch-kodi.jpeg" alt="kodi启动"></p>
<h3 id="通过安装-kodi-的客户端，在手机上控制-kodi"><a href="#通过安装-kodi-的客户端，在手机上控制-kodi" class="headerlink" title="通过安装 kodi 的客户端，在手机上控制 kodi"></a>通过安装 kodi 的客户端，在手机上控制 kodi</h3><p>可以在手机上下载 kodi 客户端来实现屏幕的控制。比如 iphone 在 AppStore 上搜索 kodi 就可以了。</p>
<p>要打开 kodi 的客户端控制，需要在 kodi 上进行配置。</p>
<p>1. 配置 Web 服务器</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-setting1.jpg" alt="配置 Web 服务器"></p>
<p>2. 开启 Zeroconf 协议</p>
<p>同样在 kodi 客户端上进行连接服务器的配置。 </p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-on-iphone.jpeg" alt="kodi客户端iphone"> <img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-operator-on-iphone" alt="kodi iphone遥控器"></p>
<p>下面是用 kodi 打开搜狐视频播放影片的截屏。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/kodi-movie.jpeg" alt="kodi播放影片"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总的来讲，今天的收获还是很大的。</p>
<ol>
<li>点亮系统比我想象的要简单。</li>
<li>也搞定了 ssh 登录，以后不用屏幕、外设来控制树莓派也很方便。</li>
<li>kodi 则让我觉得惊艳，尤其是通过手机来控制 kodi 以后，觉得比较酷。另外则是惊叹小小一块板子，看起视频来效果还是不错的。</li>
</ol>
<p>最大的感慨是，网络上的很多教程都过时了。比起那些教程，新版的 Raspbian 是在容易上手太多，很多东西也都预装好了，更加傻瓜化了。</p>
<p><strong>参考</strong></p>
<p><a href="http://www.5yun.org/9148.html" target="_blank" rel="external">Kodi播放器出现乱码的解决方法，超简单!</a></p>
<p><a href="http://www.jianshu.com/p/5dc83db2b78e" target="_blank" rel="external">mac 下安装树莓派系统</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周五晚上开箱晒图以后，直到周日才有时间开始折腾我的树莓派。&lt;/p&gt;
&lt;p&gt;今天第一个小目标，就是点亮树莓派。&lt;/p&gt;
&lt;p&gt;先说一下我自己拥有的设备。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mac 电脑，没有 windows 系统。&lt;/li&gt;
&lt;li&gt;没有键盘，有一个无线鼠标。&lt;/li
    
    </summary>
    
    
      <category term="raspberry pi" scheme="http://linfuyan.com/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>macOS Sierra 上通过 docker 安装 seafile 搭建家庭云盘</title>
    <link href="http://linfuyan.com/macOS-Sierra-docker-seafile/"/>
    <id>http://linfuyan.com/macOS-Sierra-docker-seafile/</id>
    <published>2017-03-06T07:42:00.000Z</published>
    <updated>2017-03-06T07:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>先上效果图。下图是 mac 客户端与 web 服务器的配合使用录屏。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/seafile.gif" alt="macOS-sierra-docker-seafile-demo"></p>
<h2 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h2><ol>
<li>安装 docker 比较简单。直接从<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="external">官网</a>下载安装文件，双击安装就可以了。和普通的 macOS app 一样。</li>
<li>对于 docker 操作要有基础的了解。可以参考 <a href="http://uprogrammer.cn/docker_practice/index.html" target="_blank" rel="external">docker 从入门到实践</a>。正常按照文中的步骤就可以顺利完成。</li>
<li>什么是 seafile？<a href="https://www.seafile.com/home/" target="_blank" rel="external">官网</a>为什么选了 seafile？<a href="https://www.zhihu.com/search?type=content&amp;q=seafile" target="_blank" rel="external">知乎</a>这里两个链接可以点击直接查看。更多的信息，大家自行了解。</li>
</ol>
<a id="more"></a>
<p>安装完成 docker，你就可以在终端中输入 <code>docker version</code>, 出现下面的反馈，我们就可以开始后面的事情了。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">version</span></div><div class="line">Clien<span class="variable">t:</span></div><div class="line"> Version:      <span class="number">1.13</span>.<span class="number">1</span></div><div class="line"> API <span class="keyword">version</span>:  <span class="number">1.26</span></div><div class="line"> Go <span class="keyword">version</span>:   go1.<span class="number">7.5</span></div><div class="line"> Git commi<span class="variable">t:</span>   <span class="number">092</span>cba3</div><div class="line"> Buil<span class="variable">t:</span>        Wed Feb  <span class="number">8</span> <span class="number">08</span>:<span class="number">47</span>:<span class="number">51</span> <span class="number">2017</span></div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      <span class="number">1.13</span>.<span class="number">1</span></div><div class="line"> API <span class="keyword">version</span>:  <span class="number">1.26</span> (minimum <span class="keyword">version</span> <span class="number">1.12</span>)</div><div class="line"> Go <span class="keyword">version</span>:   go1.<span class="number">7.5</span></div><div class="line"> Git commi<span class="variable">t:</span>   <span class="number">092</span>cba3</div><div class="line"> Buil<span class="variable">t:</span>        Wed Feb  <span class="number">8</span> <span class="number">08</span>:<span class="number">47</span>:<span class="number">51</span> <span class="number">2017</span></div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> Experimenta<span class="variable">l:</span> true</div></pre></td></tr></table></figure>
<p>seafile 服务器端目前有 Linux，Raspberry PI，Windows 版本，这也是在 macOS 上需要 docker 的原因。</p>
<h2 id="一、下载-docker-Ubuntu-16-04-镜像"><a href="#一、下载-docker-Ubuntu-16-04-镜像" class="headerlink" title="一、下载 docker Ubuntu 16.04 镜像"></a>一、下载 docker Ubuntu 16.04 镜像</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull daocloud.io/<span class="string">ubuntu:</span><span class="number">16.04</span></div></pre></td></tr></table></figure>
<p>由于官方的 docker 镜像仓库在国内链接很慢，这里可以选择 daocloud.io 的镜像仓库。上面的命令用来从镜像仓库中拉取tag为16.04的 ubuntu 版本。</p>
<h2 id="二、基于-Ubuntu-16-04-镜像更新源，安装必要工具"><a href="#二、基于-Ubuntu-16-04-镜像更新源，安装必要工具" class="headerlink" title="二、基于 Ubuntu 16.04 镜像更新源，安装必要工具"></a>二、基于 Ubuntu 16.04 镜像更新源，安装必要工具</h2><p>运行基于 daocloud.io/ubuntu:16.04 镜像的容器，并打开其终端。在容器内部，就和操作普通的 ubuntu 没有大的差别了。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> -i -t daocloud.io/ubuntu:16.04 /bin/bash</span></div></pre></td></tr></table></figure>
<p>更新 ubuntu 的源，并安装必要的软件。基础的 ubuntu 镜像，我们需要的软件工具都没有，所以我们需要先安装。由于官方的源，同样因为国内的关系，速度很慢，我们需要添加国内的软件源。参考：<a href="http://www.cnblogs.com/bovenson/p/5752213.html" target="_blank" rel="external">Ubuntu 16.04 几个国内更新源</a></p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span> // 更新软件源</div><div class="line">apt-<span class="built_in">get</span> install <span class="keyword">vim</span> // 安装 <span class="keyword">vim</span></div><div class="line"><span class="keyword">vi</span> /etc/apt/sources.<span class="keyword">list</span> // 编辑软件源配置文件，保存，退出</div><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span> // 每次修改 sources.<span class="keyword">list</span> 都要执行该命令，使更新源的修改生效</div></pre></td></tr></table></figure>
<p>更新到国内源以后，下载速度就快很多了。继续安装一些工具如 <code>wget</code>，<code>tree</code>，后面会用到。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install wget tree</div></pre></td></tr></table></figure>
<h2 id="三、在-ubuntu-上安装-seafile"><a href="#三、在-ubuntu-上安装-seafile" class="headerlink" title="三、在 ubuntu 上安装 seafile"></a>三、在 ubuntu 上安装 seafile</h2><p>官方有很详尽的<a href="https://manual-cn.seafile.com/deploy/using_mysql.html" target="_blank" rel="external">文档</a>，照着做下来就好了。这边我记录下自己的步骤。</p>
<p>通过 <code>wget</code> 从官网下载服务器端安装包。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c <span class="string">http:</span><span class="comment">//seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.0.8_x86-64.tar.gz</span></div></pre></td></tr></table></figure>
<p>下载完成后，按照如下建立目录：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> haiwen</div><div class="line">mv seafile-server_* haiwen</div><div class="line"><span class="built_in">cd</span> haiwen</div></pre></td></tr></table></figure>
<p>将 seafile-server_* 移动到 haiwen 目录下后</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -xzf seafile-server_*</div><div class="line"><span class="built_in">mkdir</span> installed</div><div class="line">mv seafile-server_* installed</div></pre></td></tr></table></figure>
<p>官方说明：这样设计目录的好处在于</p>
<ul>
<li>和 seafile 相关的配置文件都可以放在 haiwen 目录下，便于集中管理。</li>
<li>后续升级时，你只需要解压最新的安装包到 haiwen 目录下。</li>
</ul>
<h3 id="安装-seafile-社区版依赖的软件："><a href="#安装-seafile-社区版依赖的软件：" class="headerlink" title="安装 seafile 社区版依赖的软件："></a>安装 seafile 社区版依赖的软件：</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">apt-<span class="built_in">get</span> install mariadb-server // mariadb 是 mysql 的分支</div><div class="line">apt-<span class="built_in">get</span> install python2.<span class="number">7</span> <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-ldap <span class="keyword">python</span>-mysqldb <span class="keyword">python</span>-memcache <span class="keyword">python</span>-urllib3</div></pre></td></tr></table></figure>
<p>安装完成以后，需要修改mysql用户的密码，并启动 mysql 服务：</p>
<p>参考地址：<a href="http://blog.csdn.net/stubbornness1219/article/details/53445904" target="_blank" rel="external">Ubuntu 16.04 下重置 MySQL 5.7 密码</a></p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">service mysql start <span class="comment">// 启动 mysql 服务</span></div><div class="line">mysql <span class="comment">// 用空密码进入 mysql 管理命令行</span></div><div class="line">mysql&gt; use mysql <span class="comment">// 切换到 mysql 库</span></div><div class="line">mysql&gt; update mysql.user <span class="keyword">set</span> authentication_string=password(<span class="string">'123qwe'</span>) where <span class="comment">user=</span><span class="comment">'root'</span><span class="comment"> and Host =</span><span class="comment">'localhost'</span>; <span class="comment">// 修改为自己的密码</span></div><div class="line">mysql&gt; update user <span class="keyword">set</span> plugin=<span class="string">"mysql_native_password"</span>; </div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; quit;</div></pre></td></tr></table></figure>
<p>再重启，用新的密码登录，验证修改是否生效。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service mysql <span class="literal">start</span></div><div class="line">mysql -uroot -pnewpwd</div></pre></td></tr></table></figure>
<blockquote>
<p>在开始后面的步骤时，mysql 服务必须开启，否则会提示 mysql 相关的错误。</p>
</blockquote>
<p>进入 seafile-server-* 目录，并运行安装脚本，根据提示回答问题。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> seafile-server-*</div><div class="line">./setup-seafile-mysql.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>基本上使用默认就可以了。 </p>
<blockquote>
<ul>
<li><code>seafile server ip or domain</code> 会影响到后面的下载与上传，不过系统配置中可以修改。这里可以随意填写， 如：<code>127.0.0.1</code></li>
<li><code>seafile data dir</code> 是文件存储的位置，这个要记清楚。后面我们要配置 docker 容器的数据目录。</li>
</ul>
</blockquote>
<p>接下来，你会被要求选择一种创建 Seafile 数据库的方式:</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="code">-------------------------------------------------------</span></div><div class="line">Please choose a way to initialize seafile databases:</div><div class="line">-------------------------------------------------------</div><div class="line"></div><div class="line">[1] Create new ccnet/seafile/seahub databases</div><div class="line">[2] Use existing ccnet/seafile/seahub databases</div></pre></td></tr></table></figure>
<p>如果选择1, 你需要提供根密码. 脚本程序会创建数据库和用户。<br>如果选择2, ccnet/seafile/seahub 数据库应该已经被你（或者其他人）提前创建。</p>
<p><strong>我们选1</strong>，然后一路回车下来。</p>
<p>以上，我们已经完成了 seafile 社区版在 ubuntu 上的安装。</p>
<h3 id="关于-seafile-专业版"><a href="#关于-seafile-专业版" class="headerlink" title="关于 seafile 专业版"></a>关于 seafile 专业版</h3><p>seafile 社区版是没有用户使用限制的，专业版有。专业版的功能更加强大。如社区版无法预览 office，pdf 文件，仅提供下载到本地的功能，专业版可以在线预览。</p>
<p>专业版的安装与社区版类似。由于专业版的功能更强大，所以有更多的依赖，这就要在安装时安装更多其他的软件。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> install openjdk-<span class="number">8</span>-jre poppler-utils libpython2.<span class="number">7</span> <span class="keyword">python</span>-pip \</div><div class="line">mysql-server <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-mysqldb <span class="keyword">python</span>-memcache <span class="keyword">python</span>-ldap \</div><div class="line"><span class="keyword">python</span>-urllib3</div><div class="line"></div><div class="line">pip install boto requests</div><div class="line"><span class="keyword">ln</span> -<span class="keyword">sf</span> /usr/lib/jvm/java-<span class="number">8</span>-openjdk-amd64/jre/bin/java /usr/bin/</div><div class="line"></div><div class="line">apt-<span class="built_in">get</span> install libreoffice libreoffice-script-provider-<span class="keyword">python</span> // Office 预览</div><div class="line"></div><div class="line">apt-<span class="built_in">get</span> install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy // 字体支持</div></pre></td></tr></table></figure>
<p>专业版3人以下使用是不需要授权的。更多的人需要购买授权。家庭使用的话，免费的专业版也完全够用啦。哪里可以下载到专业版请看后面的问题。</p>
<h2 id="四、从-docker-容器中退出，制作-seafile-镜像"><a href="#四、从-docker-容器中退出，制作-seafile-镜像" class="headerlink" title="四、从 docker 容器中退出，制作 seafile 镜像"></a>四、从 docker 容器中退出，制作 seafile 镜像</h2><p>在上面的操作中，我们看到终端的左侧有类似下面的前置符：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@d63b87d071a4</span><span class="symbol">:/haiwen/</span></div></pre></td></tr></table></figure>
<p>这里的 <code>d63b87d071a4</code> 是这次打开容器的 ID，我们要基于此来提交我们刚才做的修改。否则我们再次启动 ubuntu:16.04 这个镜像时，所有的修改都丢失了。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m <span class="string">'install seafile'</span> -<span class="selector-tag">a</span> <span class="string">'user'</span> d63b87d071a4 seafile:v1</div></pre></td></tr></table></figure>
<p>这样，就可以创建一个本地的 seafile 仓库，标签为 v1 的镜像。<code>-m</code> 为这次提交添加注释， <code>-a</code> 说明添加的用户， <code>d63b87d071a4</code> 修改的容器ID，<code>seafile:v1</code> (仓库:标签)标识新建的镜像。<code>docker commit</code> 与 <code>git commit</code> 类似。</p>
<p>通过 <code>docker images</code> 查看本地镜像，类似如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">seafile              v1                  <span class="number">9621e0684187</span>        <span class="number">2</span> days ago          <span class="number">776</span> MB</div><div class="line">youshi/ubuntu        v2                  <span class="number">08913</span>c24e827        <span class="number">3</span> days ago          <span class="number">222</span> MB</div><div class="line">daocloud.io/ubuntu   <span class="number">16.04</span>               f49eec89601e        <span class="number">5</span> weeks ago         <span class="number">129</span> MB</div><div class="line">daocloud.io/ubuntu   <span class="number">14.04</span>               b969ab9f929b        <span class="number">5</span> weeks ago         <span class="number">188</span> MB</div></pre></td></tr></table></figure>
<h2 id="五、启动-docker-中的-seafile-服务"><a href="#五、启动-docker-中的-seafile-服务" class="headerlink" title="五、启动 docker 中的 seafile 服务"></a>五、启动 docker 中的 seafile 服务</h2><p>配置数据卷、端口映射，启动 seafile 容器：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -i -t -v [<span class="number">1</span>]<span class="symbol">:/haiwen/seafile-data</span> -v [<span class="number">2</span>]<span class="symbol">:/var/lib/mysql</span> -p <span class="number">10001</span><span class="symbol">:</span><span class="number">10001</span> -p <span class="number">12001</span><span class="symbol">:</span><span class="number">12001</span> -p <span class="number">8000</span><span class="symbol">:</span><span class="number">8000</span> -p <span class="number">8082</span><span class="symbol">:</span><span class="number">8082</span> <span class="symbol">seafile:</span>v1 /bin/bash</div></pre></td></tr></table></figure>
<ol>
<li><code>-v</code> 参数映射 mac 系统中的路径到 docker 容器中的路径，作为数据卷。这样容器中的数据就保存在物理磁盘上了。[1] mac 上需要映射到 seafile 同步文件存储的路径。[2] 需要映射到 mysql 存储的路径。</li>
<li><code>-p</code> 映射容器的端口到 mac 的端口，用于网络通信。 seafile 服务需要 10001，12001，8000，8082 共4个端口。8000 是浏览器访问网页服务的端口，8082是文件同步服务的端口。</li>
</ol>
<p>启动 mysql 服务：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql <span class="literal">start</span></div></pre></td></tr></table></figure>
<p>这时终端中提示报错也没有关系，是因为没有输入 mysql 的用户/密码导致的。</p>
<p>进入到 seafile-server-* 目录下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./seafile<span class="selector-class">.sh</span> start <span class="comment">// 启动 Seafile 服务</span></div><div class="line">./seahub<span class="selector-class">.sh</span> start <span class="comment">// 启动 Seahub 网站</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第一次启动 seahub 时，需要填写管理员账号，密码。</p>
</blockquote>
<p>以上，你在浏览器中输入 <code>127.0.0.1:8000</code>， 就可以看到 seafile 网站了。通过之前填写的管理员账户登录，就可以开始体验私有云的功能啦。</p>
<h2 id="六、问题"><a href="#六、问题" class="headerlink" title="六、问题"></a>六、问题</h2><h3 id="1-客户端无法下载-上传？"><a href="#1-客户端无法下载-上传？" class="headerlink" title="1. 客户端无法下载/上传？"></a>1. 客户端无法下载/上传？</h3><p>Seafile 可以支持桌面客户端、网页版、Android、iOS 客户端。客户端上设置你的服务器地址，用网站上配置的账号，就可以使用了。如果遇到无法上传、下载文件的问题。用管理员账号，进入系统管理后台-&gt;设置中，修改 <code>SERVICE_URL</code> 和 <code>FILE_SERVER_ROOT</code>。前者用作网站访问链接，会影响到分享的文件URL；后者则影响文件同步。两者需要都能够被访问到。因此，地址是内网的，你出了局域网就访问不到了。</p>
<h3 id="2-专业版如何获取？"><a href="#2-专业版如何获取？" class="headerlink" title="2. 专业版如何获取？"></a>2. 专业版如何获取？</h3><p>专业版的获取方法，请扫下面的二维码关注公众号，并回复 <code>seafilepro</code>。</p>
<p><div align="center"><br>    <img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/qrcode_for_gh_3ad92a8fc23c_860.jpg" width="80%"><br>    <span>关注公众号，回复 seafilepro</span></div></p>
<div>





















</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上效果图。下图是 mac 客户端与 web 服务器的配合使用录屏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7sbydj.com1.z0.glb.clouddn.com/seafile.gif&quot; alt=&quot;macOS-sierra-docker-seafile-demo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;〇、前言&quot;&gt;&lt;a href=&quot;#〇、前言&quot; class=&quot;headerlink&quot; title=&quot;〇、前言&quot;&gt;&lt;/a&gt;〇、前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装 docker 比较简单。直接从&lt;a href=&quot;https://www.docker.com/products/docker#/mac&quot;&gt;官网&lt;/a&gt;下载安装文件，双击安装就可以了。和普通的 macOS app 一样。&lt;/li&gt;
&lt;li&gt;对于 docker 操作要有基础的了解。可以参考 &lt;a href=&quot;http://uprogrammer.cn/docker_practice/index.html&quot;&gt;docker 从入门到实践&lt;/a&gt;。正常按照文中的步骤就可以顺利完成。&lt;/li&gt;
&lt;li&gt;什么是 seafile？&lt;a href=&quot;https://www.seafile.com/home/&quot;&gt;官网&lt;/a&gt;为什么选了 seafile？&lt;a href=&quot;https://www.zhihu.com/search?type=content&amp;amp;q=seafile&quot;&gt;知乎&lt;/a&gt;这里两个链接可以点击直接查看。更多的信息，大家自行了解。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="docker" scheme="http://linfuyan.com/tags/docker/"/>
    
      <category term="seafile" scheme="http://linfuyan.com/tags/seafile/"/>
    
      <category term="私有云" scheme="http://linfuyan.com/tags/%E7%A7%81%E6%9C%89%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu搭建ngrok服务器，尽享内网穿透技术带来的福利</title>
    <link href="http://linfuyan.com/ubuntu-ngrok/"/>
    <id>http://linfuyan.com/ubuntu-ngrok/</id>
    <published>2016-12-19T09:17:00.000Z</published>
    <updated>2016-12-19T14:13:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你做微信开发，一次又一次的发布、发现错误、调试、发布、发现错误、调试…的循环一定让你个人或是团队感到厌倦；<br>如果你接外包项目，在开发过程中，客户想要看一看开发中的进展，你一定为还没有可预览环境或者搭建环境产生的消耗而苦恼。<br>…<br>这一切的原因仅仅是因为你深处复杂的内网环境，被一个局域网阻断了与外部的直接联系。你一定希望有一样东西，能够冲破这层阻隔，为你的工作提高效率。<br>这篇文章我们介绍 ngrok，一个开源软件，可以用于提供内网穿透。</p>
<p>以下我记录下ngrok服务的搭建过程。</p>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>需要一个有公网IP的VPS</li>
<li>需要一个能够自由解析的域名</li>
</ol>
<h2 id="二、解析域名"><a href="#二、解析域名" class="headerlink" title="二、解析域名"></a>二、解析域名</h2><p>使用自己的域名，把域名解析到 VPS 的地址，解析方式如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ngrok<span class="selector-class">.uprogrammer</span><span class="selector-class">.cn</span> ----------&gt; A记录到你的 VPS IP</div><div class="line">*<span class="selector-class">.ngrok</span><span class="selector-class">.uprogrammer</span><span class="selector-class">.cn</span> ----------&gt; CNAME到ngrok<span class="selector-class">.uprogrammer</span><span class="selector-class">.cn</span></div></pre></td></tr></table></figure>
<h3 id="三、VPS-服务端安装-go-环境"><a href="#三、VPS-服务端安装-go-环境" class="headerlink" title="三、VPS 服务端安装 go 环境"></a>三、VPS 服务端安装 go 环境</h3><p>因为 ngrok 是由 go 语言开发的，所以需要安装 go 环境。</p>
<p>1. 从 <a href="https://golang.org/dl/" target="_blank" rel="external">go 官网</a>下载最新的 go 版本，并解压到 <code>/usr/local</code> 目录下。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -c https:<span class="comment">//storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz</span></div><div class="line">tar -C /usr/local -zxvf go1.<span class="number">7.4</span><span class="selector-class">.linux-amd64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div></pre></td></tr></table></figure>
<p>2. 设置相关环境变量</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 可以根据自己需要调整路径  </div><div class="line"><span class="keyword">echo</span> <span class="string">'export GOROOT=/usr/local/go'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'export PATH=$PATH:$GOROOT/bin'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'export GOPATH=$HOME/go'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'export GOROOT_BOOTSTRAP=/usr/local/go'</span> &gt;&gt; /etc/<span class="keyword">profile</span></div><div class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span></div></pre></td></tr></table></figure>
<p>3. 检查是否安装成功</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="keyword">version</span></div></pre></td></tr></table></figure>
<h3 id="四、安装-Git-环境"><a href="#四、安装-Git-环境" class="headerlink" title="四、安装 Git 环境"></a>四、安装 Git 环境</h3><p>由于我们通过 github 上的源码来安装 ngrok，所以需要先安装下 git。如果已经有 git环境，则直接跳过。</p>
<p>ubuntu 上可以直接通过 <code>apt-get install git</code> 来安装 git。完成以后，做相应的 git 配置，此处略过。</p>
<h3 id="五、Ubuntu-安装-ngrok"><a href="#五、Ubuntu-安装-ngrok" class="headerlink" title="五、Ubuntu 安装 ngrok"></a>五、Ubuntu 安装 ngrok</h3><p>1. 下载 ngrok，并修改参数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</div><div class="line">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git</div><div class="line"><span class="built_in">export</span> GOPATH=/usr/<span class="built_in">local</span>/ngrok/</div><div class="line"><span class="built_in">export</span> NGROK_DOMAIN=<span class="string">"ngrok.uprogrammer.cn"</span></div><div class="line"><span class="built_in">cd</span> ngrok</div></pre></td></tr></table></figure>
<p>2. 生成证书(必须)</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out rootCA<span class="selector-class">.key</span> <span class="number">2048</span></div><div class="line">openssl req -x509 -new -nodes -key rootCA<span class="selector-class">.key</span> -subj <span class="string">"/CN=$NGROK_DOMAIN"</span> -days <span class="number">5000</span> -out rootCA<span class="selector-class">.pem</span></div><div class="line">openssl genrsa -out server<span class="selector-class">.key</span> <span class="number">2048</span></div><div class="line">openssl req -new -key server<span class="selector-class">.key</span> -subj <span class="string">"/CN=$NGROK_DOMAIN"</span> -out server<span class="selector-class">.csr</span></div><div class="line">openssl x509 -req -<span class="keyword">in</span> server<span class="selector-class">.csr</span> -CA rootCA<span class="selector-class">.pem</span> -CAkey rootCA<span class="selector-class">.key</span> -CAcreateserial -out server<span class="selector-class">.crt</span> -days <span class="number">5000</span></div></pre></td></tr></table></figure>
<p>3. 将源代码目录下生成的证书文件复制到指定的位置</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp rootCA<span class="selector-class">.pem</span> assets/client/tls/ngrokroot<span class="selector-class">.crt</span></div><div class="line">cp server<span class="selector-class">.crt</span> assets/server/tls/snakeoil<span class="selector-class">.crt</span></div><div class="line">cp server<span class="selector-class">.key</span> assets/server/tls/snakeoil.key</div></pre></td></tr></table></figure>
<p>4. 如果是在国内的服务器，需要执行下面的修改，否则会由于网络原因产生库的依赖问题。香港或者国外的服务器就不需要了。</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/ngrok/src/ngrok/<span class="built_in">log</span>/logger.<span class="built_in">go</span></div><div class="line"><span class="built_in">log</span> <span class="string">"github.com/keepeye/log4go"</span></div></pre></td></tr></table></figure>
<p>5. 编译服务器，这里也同时编译了一个 linux 下的客户端。64位系统使用 amd64，如果是32位，需要修改成 amd386。<br>编译的时候，这里可能会遇到一个坑，后面会讲到。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/<span class="keyword">go</span>/src</div><div class="line">GOOS=linux GOARCH=amd64 ./<span class="keyword">make</span>.bash</div><div class="line"><span class="keyword">cd</span> /usr/local/ngrok/</div><div class="line">GOOS=linux GOARCH=amd64 <span class="keyword">make</span> release-server release-client</div></pre></td></tr></table></figure>
<p>编译 Mac 64 位客户端</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/<span class="keyword">go</span>/src</div><div class="line">GOOS=darwin GOARCH=amd64 ./<span class="keyword">make</span>.bash</div><div class="line"><span class="keyword">cd</span> /usr/local/ngrok/</div><div class="line">GOOS=darwin GOARCH=amd64 <span class="keyword">make</span> release-client</div></pre></td></tr></table></figure>
<p>编译 Windows 64位客户端</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/<span class="keyword">go</span>/src</div><div class="line">GOOS=windows GOARCH=amd64 ./<span class="keyword">make</span>.bash</div><div class="line"><span class="keyword">cd</span> /usr/local/ngrok/</div><div class="line">GOOS=windows GOARCH=amd64 <span class="keyword">make</span> release-client</div></pre></td></tr></table></figure>
<h2 id="六、服务端运行与使用"><a href="#六、服务端运行与使用" class="headerlink" title="六、服务端运行与使用"></a>六、服务端运行与使用</h2><p>1. 进入服务端目录，服务端程序文件名为 ngrokd，并执行相应命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok/bin</div><div class="line">./ngrokd -domain=<span class="string">"<span class="variable">$NGROK_DOMAIN</span>"</span> -httpAddr=<span class="string">":80"</span></div></pre></td></tr></table></figure>
<p>2. 返回类似如下的结果，则说明服务端运行成功</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.</span>(<span class="name">*PrefixLogger</span>).Info:83) [<span class="name">registry</span>] [<span class="name">tun</span>] No affinity cache specified</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.Info:112</span>) Listening for public http connections on [<span class="name">::</span>]:80</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.Info:112</span>) Listening for public https connections on [<span class="name">::</span>]:443</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.Info:112</span>) Listening for control and proxy connections on [<span class="name">::</span>]:4443</div><div class="line">[<span class="name">08:09:41</span> UTC <span class="number">2016/12</span>/19] [<span class="name">INFO</span>] (<span class="name">ngrok/log.</span>(<span class="name">*PrefixLogger</span>).Info:83) [<span class="name">metrics</span>] Reporting every <span class="number">30</span> seconds</div></pre></td></tr></table></figure>
<h2 id="七、客户端的运行与使用"><a href="#七、客户端的运行与使用" class="headerlink" title="七、客户端的运行与使用"></a>七、客户端的运行与使用</h2><p>1. 把刚刚从 VPS 服务器上生成的客户端服务器下载到本机，可以通过 <code>scp</code> 命令</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp username<span class="variable">@servername</span><span class="symbol">:/path/filename</span> /var/www/local_dir（本地目录）</div></pre></td></tr></table></figure>
<p>mac 客户端的位置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/ngrok/</span>bin<span class="regexp">/darwin_amd64/</span>ngrok</div></pre></td></tr></table></figure>
<p>windows 客户端的位置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/ngrok/</span>bin<span class="regexp">/windows_amd64/</span>ngrok.exe</div></pre></td></tr></table></figure>
<p>linux 客户端的位置：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/usr/</span>local<span class="regexp">/ngrok/</span>bin<span class="regexp">/ngrok</span></div></pre></td></tr></table></figure>
<p>2. 客户端程序下载到本地以后，在本地同一目录下新建名为 <code>ngrok.cfg</code> 的文件，文件内容如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">server_addr:</span> <span class="string">"ngrok.uprogrammer.cn:4443"</span></div><div class="line"><span class="string">trust_host_root_certs:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>3. 运行客户端</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">./ngrok -config=./ngrok.cfg -subdomain=test <span class="number">8080</span></div><div class="line"><span class="meta"># -subdomain参数指的是域名，例如这里是test.ngrok.uprogrammer.cn</span></div><div class="line"><span class="meta"># 后面的80是指本机端口，这里是指把本机的8080端口开放穿透</span></div><div class="line"><span class="meta"># windows运行客户端，请把./改成win风格的目录方式</span></div></pre></td></tr></table></figure>
<p>4. 返回类似如下的结果，则说明客户端运行成功</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Tunnel Status                 online                                                                                                        </div><div class="line">Version                       <span class="number">1.7</span>/<span class="number">1.7</span>                                                                                                       </div><div class="line">Forwarding                    http://<span class="keyword">test</span>.ngrok.uprogrammer.cn -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span>                                                            </div><div class="line">Forwarding                    https://<span class="keyword">test</span>.ngrok.uprogrammer.cn -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span>                                                           </div><div class="line">Web Interface                 <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">4040</span>                                                                                                </div><div class="line"># Conn                        <span class="number">0</span>                                                                                                             </div><div class="line">Avg Conn Time                 <span class="number">0.</span>00ms</div></pre></td></tr></table></figure>
<p>接下来，你就可以运行本地 8080 端口的程序，看一看是不是通过 <code>test.uprogrammer.cn</code> 就可以访问啦，也可以发给局域网之外的人来访问^ ^</p>
<h2 id="八、可能遇到的坑"><a href="#八、可能遇到的坑" class="headerlink" title="八、可能遇到的坑"></a>八、可能遇到的坑</h2><p>1. 出现以下错误提示：<code>$GOROOT_BOOTSTRAP must not be set to $GOROOT</code></p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">##### Building Go bootstrap tool.</div><div class="line">cmd/dist</div><div class="line"><span class="keyword">ERROR: </span>$GOROOT_BOOTSTRAP must not be set to $GOROOT</div><div class="line">Set $GOROOT_BOOTSTRAP to a working Go tree &gt;= Go 1.4.</div></pre></td></tr></table></figure>
<p>配置的 <code>$GOROOT_BOOTSTRAP</code> 和 <code>$GOROOT</code> 一致导致。可以复制一份 go 的源码到另外的路径，如 <code>/usr/local/go-copy</code>，同时 <code>export GOROOT_BOOTSTRAP=/usr/local/go-copy</code></p>
<p>2. 客户端可以连上，但域名不完全，显示如下：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Tunnel Status                 online</div><div class="line">Version                       <span class="number">1.7</span>/<span class="number">1.7</span></div><div class="line">Forwarding                    http://<span class="keyword">test</span>. -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span></div><div class="line">Forwarding                    https://<span class="keyword">test</span>. -&gt; <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">8080</span></div><div class="line">Web Interface                 <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">4040</span></div><div class="line"># Conn                        <span class="number">0</span></div><div class="line">Avg Conn Time                 <span class="number">0.</span>00ms</div></pre></td></tr></table></figure>
<p>这种错误是由于服务端运行时环境变量没有正确配置导致的，可以显示设置域名：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ngrokd -<span class="built_in">domain</span>=<span class="string">"ngrok.uprogrammer.cn"</span> -httpAddr=<span class="string">":80"</span></div></pre></td></tr></table></figure>
<p>3. 如果你对 VPS 服务器已经有其他程序占用 80 端口，而还需要 ngrok 通过80端口做内网穿透的话，可以通过 nginx 来做反向代理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你做微信开发，一次又一次的发布、发现错误、调试、发布、发现错误、调试…的循环一定让你个人或是团队感到厌倦；&lt;br&gt;如果你接外包项目，在开发过程中，客户想要看一看开发中的进展，你一定为还没有可预览环境或者搭建环境产生的消耗而苦恼。&lt;br&gt;…&lt;br&gt;这一切的原因仅仅是因为你
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ngrok" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/ngrok/"/>
    
    
      <category term="ngrok" scheme="http://linfuyan.com/tags/ngrok/"/>
    
      <category term="微信开发" scheme="http://linfuyan.com/tags/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
      <category term="内网穿透" scheme="http://linfuyan.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="ubuntu" scheme="http://linfuyan.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>为 lunr.js 添加中文支持</title>
    <link href="http://linfuyan.com/add-chinese-support-to-lunrjs/"/>
    <id>http://linfuyan.com/add-chinese-support-to-lunrjs/</id>
    <published>2016-11-09T02:32:00.000Z</published>
    <updated>2016-11-09T09:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你能找到这里，那么你应该是知道 lunr.js 的。 Ok， 那 lunr.js 是什么？<a href="http://lunrjs.com/" target="_blank" rel="external">官方网站</a>上说: “Simple full-text search in your browser”。翻译过来就是：浏览器上的简单的纯文本搜索工具。是的，它可以直接在浏览器上运行，不依赖服务端来完成对网页上纯文本的搜索功能，可以极大的提升通过网络服务器请求获取搜索结果时不流畅的搜索体验。用在博客等应用中，真是再好不过。然而，和大部分老外制作的工具一样，对于中文，老外的工具还是水土不服。对于中文网页搜索最大的问题就是，lunr.js 不支持中文搜索，由此还影响到一系列基于 lunr.js 制作的本地搜索工具，如 gitbook 内置的 gitbook-search-plugin 等，所以如果你在使用 gitbook 的搜索功能，发现输入中文出现错误结果不要大惊小怪。</p>
<p>不多说，以下基于当前 lunr.js 版本（commit id:6a978d1ebf1a0c08e1a76cd4f7f74ad5490e5937），添加了中文支持。</p>
<p>仓库地址：<a href="https://github.com/linfuyan/lunr.js" target="_blank" rel="external">https://github.com/linfuyan/lunr.js</a></p>
<p>有<a href="https://github.com/linfuyan/lunr.js/tree/un-participle" target="_blank" rel="external">未分词的中文支持版本</a>和<a href="https://github.com/linfuyan/lunr.js/tree/un-participle" target="_blank" rel="external">分词的中文支持版本</a>，位于仓库中不同的分支。</p>
<h2 id="未分词的中文支持版本"><a href="#未分词的中文支持版本" class="headerlink" title="未分词的中文支持版本"></a>未分词的中文支持版本</h2><p>中文支持的基本原理是，保证 lunr.js 在分析过程中中文字符不会被转义。因此在 trimmer 函数中对中文字符做过滤。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">lunr.trimmer = <span class="function"><span class="keyword">function</span> (<span class="params">token</span>) </span>&#123;</div><div class="line">  <span class="comment">//by ming300 check token is chinese then not replace   </span></div><div class="line">  <span class="keyword">if</span>(isChineseChar(token))&#123;</div><div class="line">    <span class="keyword">return</span> token;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> token</div><div class="line">    .replace(<span class="regexp">/^\W+/</span>, <span class="string">''</span>)</div><div class="line">    .replace(<span class="regexp">/\W+$/</span>, <span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> **check it contains Chinese (including Japanese and Korean)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isChineseChar</span>(<span class="params">str</span>)</span>&#123;     </div><div class="line">   <span class="keyword">var</span> reg = <span class="regexp">/[\u4E00-\u9FA5\uF900-\uFA2D]/</span>;  </div><div class="line">   <span class="keyword">return</span> reg.test(str);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，在分词部分 tokenizer 函数做些调整，添加如下关键代码：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var str = obj.toString().replace(/^<span class="symbol">\s</span>+/, '')</div><div class="line"></div><div class="line">  for (var i = str.length - 1; i &gt;= 0; i--) &#123;</div><div class="line">    if (/<span class="symbol">\S</span>/.test(str.charAt(i))) &#123;</div><div class="line">      str = str.substring(0, i + 1)</div><div class="line">      break</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var rs = str</div><div class="line">    .split(/[<span class="symbol">\ </span>|<span class="symbol">\~</span>|<span class="symbol">\`</span>|<span class="symbol">\!</span>|<span class="symbol">\@</span>|<span class="symbol">\#</span>|<span class="symbol">\$</span>|<span class="symbol">\%</span>|<span class="symbol">\^</span>|<span class="symbol">\&amp;</span>|<span class="symbol">\*</span>|<span class="symbol">\u</span>FE30-<span class="symbol">\u</span>FFA0|<span class="symbol">\(</span>|<span class="symbol">\)</span>|<span class="symbol">\-</span>|<span class="symbol">\_</span>|<span class="symbol">\+</span>|<span class="symbol">\=</span>|<span class="symbol">\|</span>|<span class="symbol">\\</span>|<span class="symbol">\[</span>|<span class="symbol">\]</span>|<span class="symbol">\&#123;</span>|<span class="symbol">\&#125;</span>|<span class="symbol">\;</span>|<span class="symbol">\:</span>|<span class="symbol">\"</span>|<span class="symbol">\'</span>|<span class="symbol">\,</span>|<span class="symbol">\&lt;</span>|<span class="symbol">\.</span>|<span class="symbol">\&gt;</span>|<span class="symbol">\/</span>|<span class="symbol">\?</span>]+/)</div><div class="line">    .map(function (token) &#123;</div><div class="line">      var t = token.replace(/[<span class="symbol">\ </span>|<span class="symbol">\~</span>|<span class="symbol">\`</span>|<span class="symbol">\!</span>|<span class="symbol">\@</span>|<span class="symbol">\#</span>|<span class="symbol">\$</span>|<span class="symbol">\%</span>|<span class="symbol">\^</span>|<span class="symbol">\&amp;</span>|<span class="symbol">\*</span>|<span class="symbol">\u</span>FE30-<span class="symbol">\u</span>FFA0|<span class="symbol">\(</span>|<span class="symbol">\)</span>|<span class="symbol">\-</span>|<span class="symbol">\_</span>|<span class="symbol">\+</span>|<span class="symbol">\=</span>|<span class="symbol">\|</span>|<span class="symbol">\\</span>|<span class="symbol">\[</span>|<span class="symbol">\]</span>|<span class="symbol">\&#123;</span>|<span class="symbol">\&#125;</span>|<span class="symbol">\;</span>|<span class="symbol">\:</span>|<span class="symbol">\"</span>|<span class="symbol">\'</span>|<span class="symbol">\,</span>|<span class="symbol">\&lt;</span>|<span class="symbol">\.</span>|<span class="symbol">\&gt;</span>|<span class="symbol">\/</span>|<span class="symbol">\?</span>]/g, '').toLowerCase()</div><div class="line">      return t;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>这里仅仅是基于英文中简单的通过空格进行分词的原则。因此会存在比较大的局限性。例如：”中文Chinese and English”，则直接被识别为”中文Chinese”、”and”、”English”，而无法将”中文”和”Chinese”再区分开。</p>
<p>相较于第二种方案的有点则是没有任何其他依赖，很轻量，适用于网页。而对基于网页标签进行的搜索则比较好，因为，标签本身就是简短，分散的。可以认为是分词好的。</p>
<h2 id="基于分词的中文支持版本"><a href="#基于分词的中文支持版本" class="headerlink" title="基于分词的中文支持版本"></a>基于分词的中文支持版本</h2><p>这个版本基于node-segment中文分词库，在未分词版本的基础上引入分词。功能自然更强大，不过由于分词库的依赖，导致整个包太大。由于需要读取文件形式的分词库，无法在浏览器上使用，但可以在 nodejs 服务端用。虽然做些修改，可以将分词库作为 js 文件 require 进来，但还是存在包太大的问题。</p>
<p>关键代码的修改也是在 lunr.js 中的 trimmer 和 tokenizer 方法中。不过需要注意的是，在 package.json 中添加对 node-segment 的依赖。</p>
<p>感谢以下两个仓库作者。</p>
<p><a href="https://github.com/ming300/lunr.js/" target="_blank" rel="external">https://github.com/ming300/lunr.js/</a></p>
<p><a href="https://github.com/nandy007/lunr.js" target="_blank" rel="external">https://github.com/nandy007/lunr.js</a></p>
<p>以及以下文章：</p>
<p><a href="http://blog.songjz.cn/jie-jue-lunr-jsde/" target="_blank" rel="external">我的建站路4：解决 lunr.js 的中文支持问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你能找到这里，那么你应该是知道 lunr.js 的。 Ok， 那 lunr.js 是什么？&lt;a href=&quot;http://lunrjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方网站&lt;/a&gt;上说: “Simple full-text 
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="搜索" scheme="http://linfuyan.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="lunr" scheme="http://linfuyan.com/tags/lunr/"/>
    
      <category term="分词" scheme="http://linfuyan.com/tags/%E5%88%86%E8%AF%8D/"/>
    
      <category term="node-segment" scheme="http://linfuyan.com/tags/node-segment/"/>
    
  </entry>
  
  <entry>
    <title>解决pip install时unsupported locale setting错误</title>
    <link href="http://linfuyan.com/locale_error_unsupported_locale_setting/"/>
    <id>http://linfuyan.com/locale_error_unsupported_locale_setting/</id>
    <published>2016-10-22T03:30:24.000Z</published>
    <updated>2016-10-22T03:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在安装 Shadowsocks 时，使用 <code>pip install</code> 命令出现了下面这个错误：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pip install shadowsocks</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"/usr/bin/pip"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    sys.<span class="keyword">exit</span>(main())</div><div class="line">  File <span class="string">"/usr/lib/python2.7/dist-packages/pip/__init__.py"</span>, line <span class="number">215</span>, <span class="keyword">in</span> main</div><div class="line">    locale.setlocale(locale.LC_ALL, <span class="string">''</span>)</div><div class="line">  File <span class="string">"/usr/lib/python2.7/locale.py"</span>, line <span class="number">581</span>, <span class="keyword">in</span> setlocale</div><div class="line">    return _setlocale(category, locale)</div><div class="line">locale.Error: unsupported locale setting</div></pre></td></tr></table></figure>
<p>其实是语言配置错误导致的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># <span class="selector-tag">locale</span> <span class="selector-tag">-a</span></div><div class="line"><span class="selector-tag">locale</span>: <span class="selector-tag">Cannot</span> <span class="selector-tag">set</span> <span class="selector-tag">LC_CTYPE</span> <span class="selector-tag">to</span> <span class="selector-tag">default</span> <span class="selector-tag">locale</span>: <span class="selector-tag">No</span> <span class="selector-tag">such</span> <span class="selector-tag">file</span> <span class="selector-tag">or</span> <span class="selector-tag">directory</span></div><div class="line"><span class="selector-tag">C</span></div><div class="line"><span class="selector-tag">C</span><span class="selector-class">.UTF-8</span></div><div class="line"><span class="selector-tag">en_AG</span></div><div class="line"><span class="selector-tag">en_AG</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_AU</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_BW</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_CA</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_DK</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_GB</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_HK</span><span class="selector-class">.utf8</span></div><div class="line"><span class="selector-tag">en_IE</span><span class="selector-class">.utf8</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>解决方案：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># <span class="keyword">export</span> LC_ALL=C</div></pre></td></tr></table></figure>
<p>Done!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在安装 Shadowsocks 时，使用 &lt;code&gt;pip install&lt;/code&gt; 命令出现了下面这个错误：&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="pip" scheme="http://linfuyan.com/tags/pip/"/>
    
      <category term="locale" scheme="http://linfuyan.com/tags/locale/"/>
    
  </entry>
  
  <entry>
    <title>在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网</title>
    <link href="http://linfuyan.com/shadowsocks-with-digitalocean/"/>
    <id>http://linfuyan.com/shadowsocks-with-digitalocean/</id>
    <published>2016-10-22T01:25:00.000Z</published>
    <updated>2016-10-22T03:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果下面这些情形你经常遇到：</p>
<blockquote>
<ol>
<li>经常会折腾各种各样的 Web 应用(Java、nodejs、python等各种语言环境)，但是国内的云服务无法提供对应的环境。</li>
<li>你只是临时的折腾这些应用，并不会长期的运营这些服务。国内的云服务费用昂贵，并需要持续较长时间购买。</li>
<li>虽然可能是临时或者短时间折腾这些服务，你也希望可以有稳定的 IP 或者域名来访问服务。而国内的云服务域名需要备案，而你却懒得折腾这些。</li>
<li>你经常有科学上网的需求，却苦于免费的 VPN 不稳定，稳定的却死贵。</li>
</ol>
</blockquote>
<p>那么，可能 DigitalOcean 是你需要的。请往下继续看。否则，你已经可以关闭这个页面了。</p>
<p>先说说 DigitalOcean：</p>
<blockquote>
<ol>
<li>可以把 DigitalOcean 看做是 VPS，你对上面的环境有完全的支配权，想折腾什么类型的 Web 应用都可以。</li>
<li>DigitalOcean 通过创建 droplet 来快速搭建基础环境，可视化的管理配置，轻而易举的可以与你的域名绑定。从而快速稳定的访问你的服务。</li>
<li>DigitalOcean 最低的收费是每月5美刀，并且按照使用时长(每小时结算)收费。创建的 droplet 如果关闭，则不再继续收费。非常适合需要临时折腾的你。而且，通过这个<strong><a href="https://m.do.co/c/c6ceb25187c4" target="_blank" rel="external">邀请链接</a></strong>进行注册，将自动赠送10美刀。</li>
<li>DigitalOcean 的旧金山节点，国内链接速度快，很适合通过搭建 Shadowsocks 来提供稳定靠谱的科学上网服务。</li>
</ol>
</blockquote>
<h2 id="在-DigitalOcean-上配置-droplet"><a href="#在-DigitalOcean-上配置-droplet" class="headerlink" title="在 DigitalOcean 上配置 droplet"></a>在 DigitalOcean 上配置 droplet</h2><p>注册 DigitalOcean 账户就不说了。需要提醒的是，使用 DigitalOcean 需要绑定银行卡。</p>
<p>新建 droplet 的步骤： </p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_1.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>1. 选择系统镜像，这里选了 ubuntu 16.04</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_2.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>2. 选择配置，这里选$5/月</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_3.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>3. 选择机房位置，旧金山的访问速度比较快</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_4.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>4. 添加 SSH key，用于后面远程登录的验证。具体操作可以看<a href="https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets" target="_blank" rel="external">官方文档</a>或者<a href="http://linfuyan.com/generating-ssh-keys/">生成SSH密钥</a>。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_5.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<p>5. 这样，不到1分钟时间，就创建好了一个 droplet，带有固定IP，还可以绑定域名。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/ss_do_6.png" alt="在DigitalOcean上搭建Shadowsocks来实现稳定靠谱的科学上网"></p>
<h2 id="安装并配置-Shadowsocks-服务"><a href="#安装并配置-Shadowsocks-服务" class="headerlink" title="安装并配置 Shadowsocks 服务"></a>安装并配置 Shadowsocks 服务</h2><p>在第一步中配置完 ssh key，就可以远程登录到 DigitalOcean 的 droplet 上，直接用 root 用户即可：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@your_droplet_ip</span></div></pre></td></tr></table></figure>
<p>刚才我们的 droplet 环境是 ubuntu 16.04，通过如下命令安装 shadowsocks：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get <span class="keyword">install</span> python-pip</div><div class="line">pip <span class="keyword">install</span> shadowsocks</div></pre></td></tr></table></figure>
<blockquote>
<p>我遇到了 <code>locale.Error: unsupported locale setting</code> 的问题，解决方案看这里：<a href="https://linfuyan.com/locale_error_unsupported_locale_setting/index.html">解决 pip install 时 locale.Error: unsupported locale setting 错误</a></p>
</blockquote>
<p>安装好以后，就可以通过以下指令启动服务：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssserver -p <span class="number">8836</span> -k `password` -m rc4-md5</div><div class="line"></div><div class="line"># 或者可以通过以下指令在后台启动shadowsocks的服务：</div><div class="line">ssserver -p <span class="number">8843</span> -k `password` -m rc4-md5 -d start</div><div class="line">ssserver -p <span class="number">8843</span> -k `password` -m rc4-md5 -d stop</div></pre></td></tr></table></figure>
<p>上面的指令方式不太方便，推荐通过文件配置的方式。新建一个 <code>/etc/shadowsocks.json</code> 文件，内容如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"server"</span>: <span class="string">"your_droplet_ip"</span>,</div><div class="line">    <span class="attr">"server_port"</span>: <span class="number">8388</span>,</div><div class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"your_password"</span>,</div><div class="line">    <span class="attr">"timeout"</span>: <span class="number">300</span>,</div><div class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来使用下面的指令启动服务：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span></div><div class="line"></div><div class="line">#或者在后台运行</div><div class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d start</div><div class="line">ssserver -c /etc/shadowsocks<span class="selector-class">.json</span> -d stop</div></pre></td></tr></table></figure>
<p>以上操作以后，就可以通过各种 Shadowsocks 客户端科学上网啦。稳定又靠谱！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果下面这些情形你经常遇到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;经常会折腾各种各样的 Web 应用(Java、nodejs、python等各种语言环境)，但是国内的云服务无法提供对应的环境。&lt;/li&gt;
&lt;li&gt;你只是临时的折腾这些应用，并不会长期的运营这些
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Shadowsocks" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Shadowsocks/"/>
    
    
      <category term="科学上网" scheme="http://linfuyan.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="DigitalOcean" scheme="http://linfuyan.com/tags/DigitalOcean/"/>
    
      <category term="Shadowsocks" scheme="http://linfuyan.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>形象的讲解 angular 中的 $q 与 promise</title>
    <link href="http://linfuyan.com/$q_and_promise_in_angular/"/>
    <id>http://linfuyan.com/$q_and_promise_in_angular/</id>
    <published>2016-07-06T08:17:10.000Z</published>
    <updated>2016-07-06T08:20:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>promise 不是 angular 首创的，作为一种编程模式，它出现在…1976年，比 javascript 还要古老得多。promise 全称是 Futures and promises。具体的可以参见 <a href="http://en.wikipedia.org/wiki/Futures_and_promises" target="_blank" rel="external">http://en.wikipedia.org/wiki/Futures_and_promises</a>。</p>
<p>而在 javascript 世界中，一个广泛流行的库叫做 Q 地址是 <a href="https://github.com/kriskowal/q" target="_blank" rel="external">https://github.com/kriskowal/q</a>，而 angular 中的 $q 就是从它引入的。 promise 解决的是异步编程的问题，对于生活在同步编程世界中的程序员来说，它可能比较难于理解，这也构成了 angular 入门门槛之一，本文将用生活中的一个例子对此做一个形象的讲解。</p>
<a id="more"></a>
<p>假设有一个家具厂，而它有一个 VIP 客户张先生。</p>
<p>有一天张先生需要一个豪华衣柜，于是，他打电话给家具厂说我需要一个衣柜，回头做好了给我送来，这个操作就叫 $q.defer，也就是延期，因为这个衣柜不是现在要的，所以张先生这是在发起一个可延期的请求。</p>
<p>同时，家具厂给他留下了一个回执号，并对他说：我们做好了会给您送过去，放心吧。这叫做 promise，也就是承诺。</p>
<p>这样，这个 defer 算是正式创建了，于是他把这件事记录在自己的日记上，并且同时记录了回执号，这叫做 deferred，也就是已延期事件。</p>
<p>现在，张先生就不用再去想着这件事了，该做什么做什么，这就是“异步”的含义。</p>
<p>假设家具厂在一周后做完了这个衣柜，并如约送到了张先生家（包邮哦，亲），这就叫做 deferred.resolve (衣柜)，也就是“已解决”。而这时候张先生只要签收一下这个（衣柜）参数就行了，当然，这个“邮包”中也不一定只有衣柜，还可以包含别的东西，比如厂家宣传资料、产品名录等。整个过程中轻松愉快，谁也没等谁，没有浪费任何时间。</p>
<p>假设家具厂在评估后发现这个规格的衣柜我们做不了，那么它就需要 deferred.reject (理由)，也就是“拒绝”。拒绝没有时间限制，可以发生在给出承诺之后的任何时候，甚至可能发生在快做完的时候。而且拒绝时候的参数也不仅仅限于理由，还可以包含一个道歉信，违约金之类的，总之，你想给他什么就给他什么，如果你觉得不会惹恼客户，那么不给也没关系。</p>
<p>假设家具厂发现，自己正好有一个符合张先生要求的存货，它就可以用 $q.when (现有衣柜)来把这个承诺给张先生，这件事就立即被解决了，皆大欢喜，张先生可不在乎你是从头做的还是现有的成品，只会惊叹于你们的效率之高。</p>
<p>假设这个家具厂对客户格外的细心，它还可能通过 deferred.notify (进展情况)给张先生发送进展情况的“通知”。</p>
<p>这样，整个异步流程就圆满完成，无论成功或者失败，张先生都没有往里面投入任何额外的时间成本。</p>
<p>好，我们再扩展一下这个故事：</p>
<p>张先生这次需要做一个桌子，三把椅子，一张席梦思，但是他不希望今天收到个桌子，明天收到个椅子，后天又得签收一次席梦思，而是希望家具厂做好了之后一次性送过来，但是他下单的时候又是分别下单的，那么他就可以重新跟家具厂要一个包含上述三个承诺的新承诺，这就是 $q.all (桌子承诺，椅子承诺，席梦思承诺)，这样，他就不用再关注以前的三个承诺了，直接等待这个新的承诺完成，到时候只要一次性签收了前面的这些承诺就行了。</p>
<blockquote>
<p>原文：<a href="http://www.ngnice.com/posts/126ee9cf6ddb68" target="_blank" rel="external">形象的讲解angular中的$q与promise</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;promise 不是 angular 首创的，作为一种编程模式，它出现在…1976年，比 javascript 还要古老得多。promise 全称是 Futures and promises。具体的可以参见 &lt;a href=&quot;http://en.wikipedia.org/wiki/Futures_and_promises&quot;&gt;http://en.wikipedia.org/wiki/Futures_and_promises&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而在 javascript 世界中，一个广泛流行的库叫做 Q 地址是 &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;https://github.com/kriskowal/q&lt;/a&gt;，而 angular 中的 $q 就是从它引入的。 promise 解决的是异步编程的问题，对于生活在同步编程世界中的程序员来说，它可能比较难于理解，这也构成了 angular 入门门槛之一，本文将用生活中的一个例子对此做一个形象的讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web前端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="angular" scheme="http://linfuyan.com/tags/angular/"/>
    
      <category term="$q" scheme="http://linfuyan.com/tags/q/"/>
    
      <category term="promise" scheme="http://linfuyan.com/tags/promise/"/>
    
      <category term="defer" scheme="http://linfuyan.com/tags/defer/"/>
    
      <category term="异步" scheme="http://linfuyan.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>React + React Router + Redux + Webpack 开发 SPA</title>
    <link href="http://linfuyan.com/React+ReactRouter+Redux+Webpack%E6%89%93%E9%80%A0SPA/"/>
    <id>http://linfuyan.com/React+ReactRouter+Redux+Webpack打造SPA/</id>
    <published>2016-06-26T14:30:00.000Z</published>
    <updated>2016-06-26T14:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间要做一个 Web app，于是对 ReactJS 作了些学习。没想到水比较深，由此探索了一套用于开发 SPA 的相关技术： React + React Router + Redex + Webpack。</p>
<p>这里先占个坑，后续再细写。相关的学习资料如下：</p>
<p><a href="http://uprogrammer.cn/react-tutorial-cn/index.html" target="_blank" rel="external">ReactJS 入门教程中文版</a></p>
<p><a href="http://uprogrammer.cn/react-router-cn/index.html" target="_blank" rel="external">React Router 中文文档</a></p>
<p><a href="http://uprogrammer.cn/redux-in-chinese/index.html" target="_blank" rel="external">Redux 中文文档</a></p>
<p><a href="http://uprogrammer.cn/webpack-handbook/index.html" target="_blank" rel="external">Webpack 中文手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间要做一个 Web app，于是对 ReactJS 作了些学习。没想到水比较深，由此探索了一套用于开发 SPA 的相关技术： React + React Router + Redex + Webpack。&lt;/p&gt;
&lt;p&gt;这里先占个坑，后续再细写。相关的学习资料如下：&lt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web前端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ReactJS" scheme="http://linfuyan.com/tags/ReactJS/"/>
    
      <category term="React Router" scheme="http://linfuyan.com/tags/React-Router/"/>
    
      <category term="Redux" scheme="http://linfuyan.com/tags/Redux/"/>
    
      <category term="Flux" scheme="http://linfuyan.com/tags/Flux/"/>
    
      <category term="Webpack" scheme="http://linfuyan.com/tags/Webpack/"/>
    
      <category term="SPA" scheme="http://linfuyan.com/tags/SPA/"/>
    
  </entry>
  
  <entry>
    <title>实例：使用 cheerio 抓取网页数据，并通过 ejs 模板输出静态页面</title>
    <link href="http://linfuyan.com/grab-web-page-by-cheerio-and-render-via-ejs/"/>
    <id>http://linfuyan.com/grab-web-page-by-cheerio-and-render-via-ejs/</id>
    <published>2016-04-10T02:33:38.000Z</published>
    <updated>2016-04-10T08:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章中，我将使用 cheerio 从 <a href="http://ss.uprogrammer.cn" target="_blank" rel="external">http://ss.uprogrammer.cn</a> 上抓取到免费的 shadowsocks 账号，然后通过 ejs 模板，输出成新的网页。</p>
<p><strong>cheerio</strong> 是 nodejs 的抓取页面模块，为服务器特别定制的，快速、灵活、实施的 jquery 核心实现，适合各种 Web 爬虫程序。详见: <a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="external">https://github.com/cheeriojs/cheerio</a></p>
<p><strong>ejs</strong> 是一个 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。详见： <a href="https://github.com/tj/ejs" target="_blank" rel="external">https://github.com/tj/ejs</a></p>
<p>下面的截图中显示，<a href="http://ss.upgrogrammer.cn" target="_blank" rel="external">http://ss.upgrogrammer.cn</a> 上有一个免费 shadowsocks 账号的展示区域。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/free-shadowsocks.png" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<p>并且通过 chrome 的审查元素，可以看到相关的源码。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/free-shadowsocks-2.png" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<p>那么，接下来，我们就要抓取这部分内容中的免费 shadowsocks 账号信息。</p>
<h2 id="新建-nodejs-项目，并安装相关依赖"><a href="#新建-nodejs-项目，并安装相关依赖" class="headerlink" title="新建 nodejs 项目，并安装相关依赖"></a>新建 nodejs 项目，并安装相关依赖</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> init</div><div class="line">...</div><div class="line"><span class="built_in">npm</span> install cheerio ejs --save</div></pre></td></tr></table></figure>
<p>以下图片显示了通过 <code>npm init</code> 命令创建 nodejs 项目的过程：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/npm_init_project.gif" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<h2 id="获取-http-ss-upgrammer-cn-完整网页内容"><a href="#获取-http-ss-upgrammer-cn-完整网页内容" class="headerlink" title="获取 http://ss.upgrammer.cn 完整网页内容"></a>获取 <a href="http://ss.upgrammer.cn" target="_blank" rel="external">http://ss.upgrammer.cn</a> 完整网页内容</h2><p>在使用 cheerio 来抓取我们所需的内容之前，我们要通过 http 模块，将完整页面先获取到。</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">	http.get(<span class="built_in">url</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">		<span class="built_in">var</span> data = <span class="string">""</span>;</div><div class="line">		res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">			data += chunk;</div><div class="line">		&#125;);</div><div class="line">		res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			callback(data);</div><div class="line">		&#125;)</div><div class="line">	&#125;).on(<span class="string">"err"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(e);</div><div class="line">		callback(<span class="literal">null</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上的代码片段通过 GET 方法获取对应 url 的数据，并通过 callback 传回。</p>
<h2 id="从获取到的完整页面中抓取免费账号信息"><a href="#从获取到的完整页面中抓取免费账号信息" class="headerlink" title="从获取到的完整页面中抓取免费账号信息"></a>从获取到的完整页面中抓取免费账号信息</h2><p>通过在浏览器中查看源代码(具体内容其实也就是我们通过上面的 <code>download</code> 函数返回的结构)，我们发现，这个页面结构是非常简单的。</p>
<ol>
<li>所有的免费账号信息都在 id 为 <code>account_container</code> 的 <code>&lt;div&gt;</code> 标签中。</li>
<li>所有的单条账号信息，都在 <code>&lt;div class=&quot;col-md-4 text-center&quot;&gt;...&lt;/div&gt;</code> 中。</li>
<li>单条账号中的信息，是连续的6个<code>&lt;h4&gt;</code>标签，按照服务器地址、端口号、密码、加密方式、状态、说明的方式存在。 </li>
</ol>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">download(<span class="string">"http://ss.uprogrammer.cn/"</span>, function(<span class="name">data</span>) &#123;</div><div class="line">	if (!data) &#123;</div><div class="line">		console.log('no data found')<span class="comment">;</span></div><div class="line">		return<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">    var accounts = []<span class="comment">;</span></div><div class="line">    </div><div class="line">	$ = cheerio.load(<span class="name">data</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">    // 通过 cheerio 的选择器获取免费账号信息单元</div><div class="line">	var ss = $('#account_container &gt; .col-md-4')<span class="comment">;</span></div><div class="line">	</div><div class="line">	for (<span class="name">var</span> i = <span class="number">0</span><span class="comment">; i &lt; ss.length; i++) &#123;</span></div><div class="line">		var s = &#123;&#125;<span class="comment">;</span></div><div class="line">		</div><div class="line">		// 解析服务器</div><div class="line">		var server = $(<span class="name">ss</span>[i]).children().first()<span class="comment">;</span></div><div class="line">		s['server'] = server.text().substr(<span class="number">7</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['server'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析端口</div><div class="line">		var port = $(<span class="name">server</span>).next()<span class="comment">;</span></div><div class="line">		s['port'] = port.text().substr(<span class="number">3</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['port'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析密码</div><div class="line">		var password = $(<span class="name">port</span>).next()<span class="comment">;</span></div><div class="line">		s['password'] = password.text().substr(<span class="number">4</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['password'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析加密方式</div><div class="line">		var encrypt = $(<span class="name">password</span>).next()<span class="comment">;</span></div><div class="line">		s['encrypt'] = encrypt.text().substr(<span class="number">5</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['encrypt'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析状态</div><div class="line">		var status = $(<span class="name">encrypt</span>).next()<span class="comment">;</span></div><div class="line">		s['status'] = status.text().substr(<span class="number">3</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['status'])<span class="comment">;</span></div><div class="line"></div><div class="line">        // 解析说明</div><div class="line">		var tip = $(<span class="name">status</span>).next()<span class="comment">;</span></div><div class="line">		s['tip'] = tip.text()<span class="comment">;</span></div><div class="line">		console.log(<span class="name">s</span>['tip'])<span class="comment">;</span></div><div class="line">		</div><div class="line">		account.push(<span class="name">s</span>)<span class="comment">;</span></div><div class="line">		console.log(<span class="string">"==="</span>)<span class="comment">;</span></div><div class="line">	&#125;</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>主要的代码片段如上，最终 <code>account</code> 变量中将保存所有的账号信息。</p>
<h2 id="将数据通过-ejs-模板渲染成新的页面"><a href="#将数据通过-ejs-模板渲染成新的页面" class="headerlink" title="将数据通过 ejs 模板渲染成新的页面"></a>将数据通过 ejs 模板渲染成新的页面</h2><p>我们需要定义一个模板文件 <code>template.ejs</code>，如下：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实例：使用 cheerio 抓取网页数据，并通过 ejs 模板输出静态页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">      <span class="vbscript">&lt;% servers.forEach(<span class="keyword">function</span>(<span class="built_in">server</span>)&#123; %&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>服务器地址:<span class="vbscript">&lt;%= <span class="built_in">server</span>.<span class="built_in">server</span> %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>端口:<span class="vbscript">&lt;%= <span class="built_in">server</span>.port %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>密码:<span class="vbscript">&lt;%= <span class="built_in">server</span>.password %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>加密方式:<span class="vbscript">&lt;%= <span class="built_in">server</span>.encrypt %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>状态:<span class="vbscript">&lt;%= <span class="built_in">server</span>.status %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="vbscript">&lt;%= <span class="built_in">server</span>.tip %&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="vbscript">&lt;% &#125;) %&gt;</span><span class="xml"></span></div><div class="line">  	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是一个非常简单的模板文件，只是说明传递数据与模板解析的功能。其中将接收名为 <code>servers</code> 的参数。</p>
<p>下面我们定义一个 <code>render</code> 函数，读取 <code>template.ejs</code> 模板文件，并根据传入的 <code>servers</code> 参数进行渲染，输出到 <code>index.html</code> 中。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(accounts)</span> </span>&#123;</div><div class="line">	fs.readFile(<span class="string">'./template.ejs'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e, v)</span> </span>&#123;</div><div class="line">      <span class="keyword">var</span> ret = v.toString();</div><div class="line">        </div><div class="line">      <span class="keyword">var</span> options = &#123;servers: accounts&#125;</div><div class="line">      <span class="keyword">var</span> template = ejs.render(ret, options);</div><div class="line">      fs.writeFile(<span class="string">'./index.html'</span>, template, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;         </div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK。完成上面的过程，整个程序结构如下：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/demo-cheerio-ejs-structure.png" alt="http://ss.uprogrammer.cn 科学上网，免费shadowsocks账号"></p>
<p>最后，在项目根目录中执行 <code>node index.js</code>， 正常在终端中可以看到日志输出，并生成 <code>index.html</code> 文件。通过浏览器打开 <code>index.html</code> 就可以验收成果啦。</p>
<p>完整的源码见：<a href="https://github.com/linfuyan/demo-cheerio-ejs" target="_blank" rel="external">https://github.com/linfuyan/demo-cheerio-ejs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章中，我将使用 cheerio 从 &lt;a href=&quot;http://ss.uprogrammer.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ss.uprogrammer.cn&lt;/a&gt; 上抓取到免费的 shadowsocks 账
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://linfuyan.com/tags/nodejs/"/>
    
      <category term="cheerio" scheme="http://linfuyan.com/tags/cheerio/"/>
    
      <category term="网页抓取" scheme="http://linfuyan.com/tags/%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/"/>
    
      <category term="爬虫" scheme="http://linfuyan.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="ejs" scheme="http://linfuyan.com/tags/ejs/"/>
    
      <category term="模板" scheme="http://linfuyan.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="shadowsocks" scheme="http://linfuyan.com/tags/shadowsocks/"/>
    
      <category term="科学上网" scheme="http://linfuyan.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>如何通过 JS 来修改浏览器地址</title>
    <link href="http://linfuyan.com/manipulating-url-using-javascript-without-freshing-the-page/"/>
    <id>http://linfuyan.com/manipulating-url-using-javascript-without-freshing-the-page/</id>
    <published>2016-04-04T07:07:03.000Z</published>
    <updated>2016-04-04T09:25:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到 jsdig.com 上的效果，发现随着输入的变化，浏览器地址栏中的地址会发生变化，很好奇。效果如下图：</p>
<p><img src="https://raw.githubusercontent.com/jaywcjlove/FED/gh-pages/img/fed.gif" alt="jsdig"></p>
<p>所以找了些资料。</p>
<p>现在的浏览器，可以在不刷新页面的情况下修改浏览器 URL。在浏览过程中，可以将浏览历史储存起来，当点击浏览器后退按钮的时候，还可以从浏览历史上获得回退的信息。主要的工作原理呢，是通过 History 对象的 pushState() 实现的。</p>
<p>直接上测试的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">"counter"</span>&gt;</span>点击按钮查看变化<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"update()"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  	<span class="keyword">var</span> counter = <span class="built_in">document</span>.getElementById(<span class="string">"counter"</span>);</div><div class="line">   	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  		<span class="keyword">var</span> stateObject = &#123;<span class="attr">id</span>: i&#125;;</div><div class="line">		<span class="keyword">var</span> title = <span class="string">"Wow Title "</span>+i;</div><div class="line">		<span class="keyword">var</span> newUrl = <span class="string">"?count="</span>+i;</div><div class="line">		history.pushState(stateObject, title, newUrl);</div><div class="line">		counter.innerHTML = <span class="built_in">window</span>.location.href;</div><div class="line">		i++;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">	  readState(event.state);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">readState</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	  counter.innerHTML = data.id;</div><div class="line">	&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>直接把上面的代码保存成静态网页，然后放到 web 服务器下访问就可以了。具体画面如下：</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/via_js_update_window_location_href.gif" alt="如何通过 JS 来修改浏览器地址"></p>
<p>参考：</p>
<p><a href="https://hasin.me/2013/10/16/manipulating-url-using-javascript-without-freshing-the-page/" target="_blank" rel="external">Manipulating browser URL using Javascript without refreshing the page</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到 jsdig.com 上的效果，发现随着输入的变化，浏览器地址栏中的地址会发生变化，很好奇。效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jaywcjlove/FED/gh-pages/img/f
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="JavaScript" scheme="http://linfuyan.com/tags/JavaScript/"/>
    
      <category term="浏览器地址" scheme="http://linfuyan.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 npm 打包发布 nodejs 程序包</title>
    <link href="http://linfuyan.com/publish_your_module_to_npm/"/>
    <id>http://linfuyan.com/publish_your_module_to_npm/</id>
    <published>2016-04-04T02:10:10.000Z</published>
    <updated>2016-04-04T02:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天写了个 gitbook 的 cnzz 统计插件，<a href="https://github.com/linfuyan/gitbook-plugin-cnzz" target="_blank" rel="external">源码见这里</a>，想要发布出来，再通过 <code>npm install</code> 的形式安装。</p>
<p>具体的步骤如下：</p>
<p>1. 在 npm 官网 <a href="https://www.npmjs.org" target="_blank" rel="external">https://www.npmjs.org</a> 申请一个账号，并且进行必要的验证。</p>
<blockquote>
<p>刚开始用的是网易邮箱注册，但似乎收不到官方的验证邮件，后来改用了 Gmail，可以注册了。</p>
</blockquote>
<p>2. 增加刚申请完成的用户名到 npm 环境中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm --registry <span class="string">http:</span><span class="comment">//registry.npmjs.org adduser</span></div><div class="line"><span class="string">Username:</span> your name</div><div class="line"><span class="string">Password:</span> your password</div><div class="line"><span class="string">Email:</span> (<span class="keyword">this</span> IS <span class="keyword">public</span>) yourmail<span class="meta">@host</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里要注意所使用的 registry。由于国内的网络环境，之前将默认的 registry 设置成了淘宝的 npm 源。这里需要调整回来。</p>
</blockquote>
<p>3. 进入到你的 npm 项目中，通过 <code>npm publish</code> 发布。</p>
<p>4. 再新建一个项目 nodejs 项目，通过 <code>npm install</code> 验证是否能够安装。</p>
<p>我在发布过程中，遇到了如下问题：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm ERR! no_perms Private mode enable, only admin can publish <span class="keyword">this</span> <span class="keyword">module</span>: gitbook-plugin-cnzz</div></pre></td></tr></table></figure>
<p>原因就是我默认使用的淘宝的 npm 源，添加了用户，但权限不对，在发布时同样添加 registry 就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天写了个 gitbook 的 cnzz 统计插件，&lt;a href=&quot;https://github.com/linfuyan/gitbook-plugin-cnzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码见这里&lt;/a&gt;，想要发布出来，再通过 &lt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://linfuyan.com/tags/nodejs/"/>
    
      <category term="npm" scheme="http://linfuyan.com/tags/npm/"/>
    
      <category term="打包" scheme="http://linfuyan.com/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="发布" scheme="http://linfuyan.com/tags/%E5%8F%91%E5%B8%83/"/>
    
      <category term="gitbook" scheme="http://linfuyan.com/tags/gitbook/"/>
    
      <category term="cnzz" scheme="http://linfuyan.com/tags/cnzz/"/>
    
  </entry>
  
  <entry>
    <title>在 IntelliJ IDEA 上创建基于 Gradle 的 SpringMVC 实例</title>
    <link href="http://linfuyan.com/create_springmvc_project_base_on_gradle_use_intellij_idea/"/>
    <id>http://linfuyan.com/create_springmvc_project_base_on_gradle_use_intellij_idea/</id>
    <published>2016-03-22T03:15:02.000Z</published>
    <updated>2016-03-22T03:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>注意：需要 IntelliJ IDEA 的 Ultimate 版本，用 Community 版本是不行的，因为需要支持 Web 项目。 Ultimate 版本是收费的，网上有破解。</p>
<p><img src="http://7sbydj.com1.z0.glb.clouddn.com/static/images/intellij_idea.png" alt="IntelliJ IDEA 版本"></p>
<p>我把具体的过程录制成了视频：</p>
<iframe frameborder="0" width="100%" height="400" src="http://v.qq.com/iframe/player.html?vid=r0188ue1mgk&tiny=0&auto=0" allowfullscreen></iframe>

<p>如果想要看高清的视频，可以扫描页面上的公众号二维码，关注并回复”firstspringmvc”来获取原始视频链接。</p>
<p>参考：</p>
<p><a href="http://note.youdao.com/share/web/file.html?id=f6818219990d6a031ef8b237e12c3ff4&amp;type=note" target="_blank" rel="external">intellij + gradle + tomcat + 热加载 + 测试 搭建java web开发环境</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意：需要 IntelliJ IDEA 的 Ultimate 版本，用 Community 版本是不行的，因为需要支持 Web 项目。 Ultimate 版本是收费的，网上有破解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7sbydj.com1.z0.glb.clo
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JavaWeb" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/JavaWeb/"/>
    
    
      <category term="Gradle" scheme="http://linfuyan.com/tags/Gradle/"/>
    
      <category term="IntelliJ IDEA" scheme="http://linfuyan.com/tags/IntelliJ-IDEA/"/>
    
      <category term="SpringMVC" scheme="http://linfuyan.com/tags/SpringMVC/"/>
    
      <category term="Spring" scheme="http://linfuyan.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mac OSX 10.11 通过 HomeBrew 安装 MySQL</title>
    <link href="http://linfuyan.com/install_mysql_via_brew_on_osx_eicapitan/"/>
    <id>http://linfuyan.com/install_mysql_via_brew_on_osx_eicapitan/</id>
    <published>2016-03-01T13:00:00.000Z</published>
    <updated>2016-03-08T14:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac OSX 升级到 EICapitan 之后，原来安装的 MySQL 就多多少少出现了问题。于是决定重装：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$ brew <span class="keyword">install</span> mysql</div><div class="line">==&gt; Installing dependencies <span class="keyword">for</span> mysql: openssl</div><div class="line">==&gt; Installing mysql dependency: openssl</div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/openssl<span class="number">-1.0</span><span class="number">.2</span>e_1.el_capitan</div><div class="line">######################################################################## <span class="number">100.0</span>%</div><div class="line">==&gt; Pouring openssl<span class="number">-1.0</span><span class="number">.2</span>e_1.el_capitan.bottle.tar.gz</div><div class="line">==&gt; Caveats</div><div class="line">A CA <span class="keyword">file</span> has been bootstrapped <span class="keyword">using</span> certificates <span class="keyword">from</span> the <span class="keyword">system</span></div><div class="line">keychain. <span class="keyword">To</span> <span class="keyword">add</span> additional certificates, place .pem files <span class="keyword">in</span></div><div class="line">  /usr/<span class="keyword">local</span>/etc/openssl/certs</div><div class="line"></div><div class="line"><span class="keyword">and</span> run</div><div class="line">  /usr/<span class="keyword">local</span>/opt/openssl/<span class="keyword">bin</span>/c_rehash</div><div class="line"></div><div class="line">This formula <span class="keyword">is</span> keg-<span class="keyword">only</span>, which means it was <span class="keyword">not</span> symlinked <span class="keyword">into</span> /usr/local.</div><div class="line"></div><div class="line">Apple has deprecated <span class="keyword">use</span> <span class="keyword">of</span> OpenSSL <span class="keyword">in</span> favor <span class="keyword">of</span> its own TLS <span class="keyword">and</span> crypto libraries</div><div class="line"></div><div class="line">Generally there <span class="keyword">are</span> <span class="keyword">no</span> consequences <span class="keyword">of</span> this <span class="keyword">for</span> you. <span class="keyword">If</span> you <span class="keyword">build</span> your</div><div class="line">own software <span class="keyword">and</span> it requires this formula, you<span class="string">'ll need to add to your</span></div><div class="line">build variables:</div><div class="line"></div><div class="line">    LDFLAGS:  -L/usr/local/opt/openssl/lib</div><div class="line">    CPPFLAGS: -I/usr/local/opt/openssl/include</div><div class="line"></div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/openssl/1.0.2e_1: 465 files, 11.9M</div><div class="line">==&gt; Installing mysql</div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/mysql-5.7.10.el_capitan.bot</div><div class="line">######################################################################## 100.0%</div><div class="line">==&gt; Pouring mysql-5.7.10.el_capitan.bottle.2.tar.gz</div><div class="line">==&gt; /usr/local/Cellar/mysql/5.7.10/bin/mysqld --initialize-insecure --user=lfy -</div><div class="line">==&gt; Caveats</div><div class="line">We've installed your MySQL <span class="keyword">database</span> <span class="keyword">without</span> a root password. <span class="keyword">To</span> secure it run:</div><div class="line">    mysql_secure_installation</div><div class="line"></div><div class="line"><span class="keyword">To</span> <span class="keyword">connect</span> run:</div><div class="line">    mysql -uroot</div><div class="line"></div><div class="line"><span class="keyword">To</span> have launchd <span class="keyword">start</span> mysql <span class="keyword">at</span> login:</div><div class="line">  <span class="keyword">ln</span> -sfv /usr/<span class="keyword">local</span>/opt/mysql<span class="comment">/*.plist ~/Library/LaunchAgents</span></div><div class="line">Then to load mysql now:</div><div class="line">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div><div class="line">Or, if you don't want/need launchctl, you can just run:</div><div class="line">  mysql.server start</div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/mysql/5.7.10: 12,677 files, 433.2M</div></pre></td></tr></table></figure>
<p>直接使用 <code>mysql -uroot</code>，出现如下错误提示：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ERROR </span>2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock'</div></pre></td></tr></table></figure>
<p>原因是 mysql 服务没有启动，故尝试 <code>mysql.server start</code>，结果如下，依然出错。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql.server <span class="keyword">start</span></div><div class="line"><span class="keyword">Starting</span> MySQL</div><div class="line">. <span class="keyword">ERROR</span>! The <span class="keyword">server</span> quit <span class="keyword">without</span> updating PID <span class="keyword">file</span> (/usr/<span class="keyword">local</span>/<span class="keyword">var</span>/mysql/bogon.pid).</div></pre></td></tr></table></figure>
<p>最终的处理方式是：</p>
<ol>
<li>通过 <code>mysqld</code> 直接启动 mysql。</li>
<li>由于 HomeBrew 安装的 mysql 默认root账户没有设置密码，故按照提示输入 <code>mysql_secure_installation</code> 来设置密码。</li>
<li>设置完成以后，就可以正常操作 mysql 了。</li>
</ol>
<p>HomeBrew 安装的 mysql 的数据存储位置为 <code>/usr/local/var/mysql</code>。 可以通过 <code>find / -name databasename</code> 的方式根据数据库名称找到具体位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Mac OSX 升级到 EICapitan 之后，原来安装的 MySQL 就多多少少出现了问题。于是决定重装：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="LAMP" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/LAMP/"/>
    
    
      <category term="MySQL" scheme="http://linfuyan.com/tags/MySQL/"/>
    
      <category term="Mac" scheme="http://linfuyan.com/tags/Mac/"/>
    
      <category term="HomeBrew" scheme="http://linfuyan.com/tags/HomeBrew/"/>
    
      <category term="OSX" scheme="http://linfuyan.com/tags/OSX/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X 上安装 MongoDB</title>
    <link href="http://linfuyan.com/install-mongodb-on-mac-os-x/"/>
    <id>http://linfuyan.com/install-mongodb-on-mac-os-x/</id>
    <published>2015-12-21T09:02:00.000Z</published>
    <updated>2015-12-21T09:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="external">Install MongoDB on OS X</a></p>
<p><strong>Mac OS X 的系统版本：EI Capitan (10.11.1)</strong></p>
<p>这里采用 HomeBrew 来安装 MongoDB。</p>
<a id="more"></a> 
<p>1. 升级 HomeBrew 到最新</p>
<blockquote>
<p>brew update</p>
</blockquote>
<p>2. 完成以后，通过以下命令安装</p>
<blockquote>
<p>brew install mongodb</p>
</blockquote>
<p>正常情况下按照上面步骤就可以完成安装，但是我这里遇到了一些问题。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Error: The `brew link` step did <span class="keyword">not</span> complete successfully</div><div class="line">The formula built, <span class="keyword">but</span> <span class="keyword">is</span> <span class="keyword">not</span> symlinked <span class="keyword">into</span> /usr/<span class="keyword">local</span></div><div class="line">Could <span class="keyword">not</span> symlink .</div><div class="line">/usr/<span class="keyword">local</span>/opt <span class="keyword">is</span> <span class="keyword">not</span> writable.</div><div class="line"></div><div class="line">You can <span class="keyword">try</span> again using:</div><div class="line">  brew link scons</div></pre></td></tr></table></figure>
<p>问题的原因就是 <code>/usr/local/opt</code> 目录不可写，正常情况下，在目前的 Mac OS X EI Capitan 上 <code>/usr/local</code> 是可写的，但其他的应用是可以修改其读写权限的。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Error: The /usr/local directory is not writable.</div><div class="line">Even if this directory was writable when you installed Homebrew, other</div><div class="line">software may <span class="keyword">change</span> permissions <span class="keyword">on</span> this directory. <span class="keyword">Some</span> <span class="keyword">versions</span> <span class="keyword">of</span> the</div><div class="line"><span class="string">"InstantOn"</span> component <span class="keyword">of</span> Airfoil <span class="keyword">are</span> known <span class="keyword">to</span> <span class="keyword">do</span> this.</div><div class="line"></div><div class="line">You should probably <span class="keyword">change</span> the ownership <span class="keyword">and</span> permissions <span class="keyword">of</span> /usr/<span class="keyword">local</span></div><div class="line">back <span class="keyword">to</span> your <span class="keyword">user</span> account.</div><div class="line">  sudo chown -R $(whoami):<span class="keyword">admin</span> /usr/<span class="keyword">local</span></div></pre></td></tr></table></figure>
<p>按照提示修改一下问题，重新 <code>brew install mongodb</code> 即可。如提示需要 <code>brew link</code>， 则按照提示操作。</p>
<p>3. 安装完成最终会出现如下提示来以不同方式开启 MongoDB。根据你的需要操作即可。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">lfys-MacBook-Pro: lfy$ brew install mongodb</div><div class="line">==&gt; Downloading https:<span class="comment">//homebrew.bintray.com/bottles/mongodb-3.2.0.el_capitan.bottle.tar.gz</span></div><div class="line">Already downloaded: /Library/Caches/Homebrew/mongodb-<span class="number">3.2</span>.<span class="number">0</span><span class="selector-class">.el_capitan</span><span class="selector-class">.bottle</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">==&gt; Pouring mongodb-<span class="number">3.2</span>.<span class="number">0</span><span class="selector-class">.el_capitan</span><span class="selector-class">.bottle</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></div><div class="line">==&gt; Caveats</div><div class="line">To have launchd start mongodb at login:</div><div class="line">  ln -sfv /usr/local/opt/mongodb<span class="comment">/*.plist ~/Library/LaunchAgents</span></div><div class="line">Then to load mongodb now:</div><div class="line">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist</div><div class="line">Or, if you don't want/need launchctl, you can just run:</div><div class="line">  mongod --config /usr/local/etc/mongod.conf</div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/mongodb/3.2.0: 17 files, 208M</div></pre></td></tr></table></figure>
<p>这里我执行了下面的命令：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config <span class="regexp">/usr/</span>local<span class="regexp">/etc/m</span>ongod.conf</div></pre></td></tr></table></figure>
<p>4. 在新的终端窗口中输入 <code>mongo</code> 就可以进行 MongoDB 的操作了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/&quot;&gt;Install MongoDB on OS X&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mac OS X 的系统版本：EI Capitan (10.11.1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里采用 HomeBrew 来安装 MongoDB。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nodejs" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/nodejs/"/>
    
    
      <category term="MongoDB" scheme="http://linfuyan.com/tags/MongoDB/"/>
    
      <category term="Mac" scheme="http://linfuyan.com/tags/Mac/"/>
    
      <category term="HomeBrew" scheme="http://linfuyan.com/tags/HomeBrew/"/>
    
  </entry>
  
</feed>
