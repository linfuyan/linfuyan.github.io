<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿阿燃</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linfuyan.com/"/>
  <updated>2020-03-12T14:41:30.133Z</updated>
  <id>http://linfuyan.com/</id>
  
  <author>
    <name>Aaron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux 查看占用端口的进程</title>
    <link href="http://linfuyan.com/linux-port-taken-up/"/>
    <id>http://linfuyan.com/linux-port-taken-up/</id>
    <published>2020-03-12T14:38:00.000Z</published>
    <updated>2020-03-12T14:41:30.133Z</updated>
    
    <content type="html"><![CDATA[<p>在 linux 上，我们经常会遇到端口被占用，导致应用程序无法启动的情况，这时候就需要知道到底是哪个进程或是哪个程序占用了这个端口，以便进行后面的处理。</p><p>这里总结了几种方式。</p><a id="more"></a><h2 id="使用-ss-查看"><a href="#使用-ss-查看" class="headerlink" title="使用 ss 查看"></a>使用 ss 查看</h2><p>ss 一般用于转储套接字统计信息。它还可以显示所有类型的套接字统计信息，包括 PACKET、TCP、UDP、DCCP、RAW、Unix 域等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~# ss -lntpd | grep :80</span><br><span class="line">tcp    LISTEN   0        100               0.0.0.0:8080           0.0.0.0:*      users:(("java",pid=9184,fd=28))</span><br><span class="line">tcp    LISTEN   0        128                     *:80                   *:*      users:(("docker-proxy",pid=8935,fd=4))</span><br></pre></td></tr></table></figure><h2 id="使用-netstat-查看"><a href="#使用-netstat-查看" class="headerlink" title="使用 netstat 查看"></a>使用 netstat 查看</h2><p>netstat 能够显示网络连接、路由表、接口统计信息、伪装连接以及多播成员。目前 netstat 已经过时了，都推荐使用 ss 来代替。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~# netstat -tnlp | grep :80</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      9184/java</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      8935/docker-proxy</span><br></pre></td></tr></table></figure><h2 id="使用-lsof-查看"><a href="#使用-lsof-查看" class="headerlink" title="使用 lsof 查看"></a>使用 lsof 查看</h2><p>lsof (list open files) 是一个列出系统上被进程打开的文件的相关信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~# lsof -i tcp:80</span><br><span class="line">COMMAND    PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">docker-pr 8935 root    4u  IPv6 324024693      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure><h2 id="使用-fuser-查看"><a href="#使用-fuser-查看" class="headerlink" title="使用 fuser 查看"></a>使用 fuser 查看</h2><p>fuser 可以显示出当前哪个程序在使用磁盘上的某个文件、挂载点、甚至网络端口，并给出程序进程的详细信息。fuser 只把 PID 输出到标准输出，其他的都输出到标准错误输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~# fuser 80/tcp</span><br><span class="line">80/tcp:               8935</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 linux 上，我们经常会遇到端口被占用，导致应用程序无法启动的情况，这时候就需要知道到底是哪个进程或是哪个程序占用了这个端口，以便进行后面的处理。&lt;/p&gt;
&lt;p&gt;这里总结了几种方式。&lt;/p&gt;
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="linux" scheme="http://linfuyan.com/tags/linux/"/>
    
      <category term="端口占用" scheme="http://linfuyan.com/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://linfuyan.com/docker-go-mod-golang/"/>
    <id>http://linfuyan.com/docker-go-mod-golang/</id>
    <published>2020-02-18T03:08:44.365Z</published>
    <updated>2020-02-18T07:53:22.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-中运行-go-mod-管理-golang-项目及交叉编译"><a href="#docker-中运行-go-mod-管理-golang-项目及交叉编译" class="headerlink" title="docker 中运行 go mod 管理 golang 项目及交叉编译"></a>docker 中运行 go mod 管理 golang 项目及交叉编译</h1><p>最近在找一个将 html 转化为 md 的工具，后来发现 <a href="https://github.com/TruthHun/html2md" target="_blank" rel="noopener">html2md</a> 这个项目还不错，打算基于它做些改造。不过 html2md 是个 golang 项目，而我自己不想在电脑上安装 golang 环境，故便考虑通过 docker 来编译这个项目。以下对过程做些记录。</p><blockquote><p>说明：下文中的 <code>$go-lab</code> 为自己电脑上的某个目录。</p></blockquote><h2 id="docker-中安装-golang-环境"><a href="#docker-中安装-golang-环境" class="headerlink" title="docker 中安装 golang 环境"></a>docker 中安装 golang 环境</h2><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull golang</span><br></pre></td></tr></table></figure><p>新建 gopath 目录及项目源码目录 projects，将在运行容器时做映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker 中默认 /go 为 gopath</span></span><br><span class="line">mkdir $go-lab/go </span><br><span class="line"><span class="meta">#</span><span class="bash"> 用于存放 golang 项目源码</span></span><br><span class="line">mkdir $go-lab/projects</span><br></pre></td></tr></table></figure><blockquote><p>需要将项目源码目录与 gopath 目录分开，这是 go mod 的要求。</p></blockquote><p>进入 <code>projects</code> 下载 html2md 项目源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $go-lab/projects</span><br><span class="line">git clone https://github.com/TruthHun/html2md</span><br></pre></td></tr></table></figure><h2 id="在-docker-容器中运行"><a href="#在-docker-容器中运行" class="headerlink" title="在 docker 容器中运行"></a>在 docker 容器中运行</h2><p>运行容器并进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $go-lab</span><br><span class="line">docker run --rm -it -v $PWD/go:/go -v $PWD/projects:/root --name html2md golang bash</span><br></pre></td></tr></table></figure><p>在容器中设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><blockquote><p><strong>关键</strong>：GOPROXY 代理最好要设置，因为 golang 的许多依赖是被 GFW 给墙了，不设置带来会导致依赖无法下载。</p></blockquote><h2 id="编译-go-mod-管理的项目"><a href="#编译-go-mod-管理的项目" class="headerlink" title="编译 go mod 管理的项目"></a>编译 go mod 管理的项目</h2><p>下载依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/html2md</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载依赖包，内容会存放在容器内 /go/pkg/mod 目录中</span></span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><blockquote><p><code>go mod init project_name</code>： 用 go mod 初始化目录</p><p><code>go mod tidy</code>： 会同步依赖包，添加需要的，移除多余的</p><p><code>go mod download</code>：下载依赖</p><p><code>go clean -modcache</code>： 清除缓存</p></blockquote><p>编写 golang 项目，引用 html2md 库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir $go-lab/demo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 html2md.go 文件</span></span><br><span class="line">vi $go-lab/demo/html2md.go</span><br></pre></td></tr></table></figure><p><code>html2md.go</code> 文件内容如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"github.com/TruthHun/html2md"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    args := os.Args</span><br><span class="line">    <span class="keyword">if</span> args == <span class="literal">nil</span> || <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        Usage()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    input := args[<span class="number">1</span>]</span><br><span class="line">    output := args[<span class="number">2</span>]</span><br><span class="line">    fmt.Println(<span class="string">"input file is: "</span>, input, <span class="string">"\noutput file is: "</span>, output)</span><br><span class="line"></span><br><span class="line">    b, _ := ioutil.ReadFile(input)</span><br><span class="line">    md := html2md.Convert(<span class="keyword">string</span>(b))</span><br><span class="line">    ioutil.WriteFile(output, []<span class="keyword">byte</span>(md), <span class="number">0777</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Usage = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Usagge: ---"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build html2md.go</span><br></pre></td></tr></table></figure><blockquote><p>编译完成后，在目录下生成 html2md 可执行文件。</p></blockquote><p>测试 html2md 工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html2md code.html code.md</span><br></pre></td></tr></table></figure><blockquote><p>查看是否正确生成 code.md</p></blockquote><h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><p>golang 提供了完备的交叉编译环境。docker 中直接通过 <code>go build</code> 生成的执行文件只能在 linux 环境下运行。通过交叉编译，可以很方便的编译在 mac 或者 windows 下运行的可执行文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译 mac 可用的可执行文件，生成 html2md</span></span><br><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build html2md.go</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译 windows 下的可执行文件，生成 html2md.exe</span></span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build html2md.go</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/rxbook/p/7081499.html" target="_blank" rel="noopener">Go语言获取命令行参数</a></p><p><a href="https://www.cnblogs.com/GodBug/p/7890311.html" target="_blank" rel="noopener">go build 不同系统下的可执行文件</a></p><p><a href="https://studygolang.com/articles/26335" target="_blank" rel="noopener">五分钟用Docker快速搭建Go开发环境</a></p><p><a href="https://studygolang.com/articles/20716" target="_blank" rel="noopener">golang内置包管理工具go mod简明教程</a></p><p><a href="https://segmentfault.com/a/1190000019724582" target="_blank" rel="noopener">go - 使用 go mod 管理项目依赖</a></p><p><a href="https://www.cnblogs.com/wt11/p/11340386.html" target="_blank" rel="noopener">go安装以及使用gomod、 goland设置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-中运行-go-mod-管理-golang-项目及交叉编译&quot;&gt;&lt;a href=&quot;#docker-中运行-go-mod-管理-golang-项目及交叉编译&quot; class=&quot;headerlink&quot; title=&quot;docker 中运行 go mod 管理 g
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql 中身份证字段脱敏</title>
    <link href="http://linfuyan.com/desensitization-in-mysql/"/>
    <id>http://linfuyan.com/desensitization-in-mysql/</id>
    <published>2019-06-16T14:17:31.230Z</published>
    <updated>2019-06-17T12:19:27.589Z</updated>
    
    <content type="html"><![CDATA[<p>在数据的使用与传输过程中，经常需要将敏感信息脱敏的过程。比如需要将用户信息表中的身份证号码中间 几位进行隐藏等等。</p><h2 id="脱敏方法"><a href="#脱敏方法" class="headerlink" title="脱敏方法"></a>脱敏方法</h2><p>mysql 中常用的脱敏方法有以下两种。</p><h3 id="CONCAT-、LEFT-和-RIGHT-字符串函数组合使用"><a href="#CONCAT-、LEFT-和-RIGHT-字符串函数组合使用" class="headerlink" title="CONCAT()、LEFT() 和 RIGHT() 字符串函数组合使用"></a>CONCAT()、LEFT() 和 RIGHT() 字符串函数组合使用</h3><ul><li>CONCAT(str1, str2, …)：返回结果为连接参数产生的字符串</li><li>LEFT(str, len)：返回从字符串 str 开始的最左 len 字符</li><li>RIGHT(str, len)：从字符串 str 开始，返回最右 len 字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CONCAT</span>(<span class="keyword">LEFT</span>(identity_card_no, <span class="number">6</span>), <span class="string">'********'</span> , <span class="keyword">RIGHT</span>(identity_card_no, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT()"></a>INSERT()</h3><ul><li>INSERT(str, pos, len, newstr)：返回字符串 str, 其子字符串起始于 pos 位置和长期被字符串 newstr 取代的 len 字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">INSERT</span>(identity_card_no, <span class="number">7</span>, <span class="number">8</span>, <span class="string">'********'</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><h2 id="从查询结果中更新数据"><a href="#从查询结果中更新数据" class="headerlink" title="从查询结果中更新数据"></a>从查询结果中更新数据</h2><pre><code># update select 语句（注意：必须使用 inner join）# 语法 update ta inner join (select yy from tb) tc on ta.id = tc.id set ta.xx = tc.yy-- 行政处罚信息表UPDATE T_XYXX_XZCFXX oriINNER JOIN (SELECT  uuid,  INSERT ( FDDBR, 1, 1, &apos;*&apos; ) AS NAME,  CONCAT(  &apos;000000&apos;,  &apos;****&apos;,  RIGHT ( FDDBRZJHM, 8 )   ) AS idcardno FROM  T_XYXX_XZCFXX   ) nosense ON ori.uuid = nosense.uuid   SET ori.FDDBR = nosense.NAME,  ori.FDDBRZJHM = nosense.idcardno;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数据的使用与传输过程中，经常需要将敏感信息脱敏的过程。比如需要将用户信息表中的身份证号码中间 几位进行隐藏等等。&lt;/p&gt;
&lt;h2 id=&quot;脱敏方法&quot;&gt;&lt;a href=&quot;#脱敏方法&quot; class=&quot;headerlink&quot; title=&quot;脱敏方法&quot;&gt;&lt;/a&gt;脱敏方法&lt;/h2&gt;
      
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="mysql" scheme="http://linfuyan.com/tags/mysql/"/>
    
      <category term="身份证" scheme="http://linfuyan.com/tags/%E8%BA%AB%E4%BB%BD%E8%AF%81/"/>
    
      <category term="脱敏" scheme="http://linfuyan.com/tags/%E8%84%B1%E6%95%8F/"/>
    
  </entry>
  
  <entry>
    <title>从代码组织看团队治理之案例一</title>
    <link href="http://linfuyan.com/code-organize-and-team-management-one/"/>
    <id>http://linfuyan.com/code-organize-and-team-management-one/</id>
    <published>2019-05-15T14:50:00.000Z</published>
    <updated>2019-12-09T14:29:58.400Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.uprogrammer.cn/15579278505835.jpg" alt="微服务代码组织"></p><p>这是一张打满马赛克的图。</p><p>嗯，把你的思绪拉回来先。我来介绍下团队的一些简单背景。</p><a id="more"></a><p>我们部门在基于 spring cloud 做微服务的实践。业务上在公司内部相对独立，部门内部有几个团队负责不同的项目。在部门内部希望生产的代码等可以跨几个团队共用，以满足不同项目快速开发的需求。</p><p>开头的图片展示的是其中一个团队目前代码的组织方式。</p><ul><li>xxxx-yyyy-config 项目是分布式配置中心。</li><li>xxxx-yyyy-zuul 项目是 API 网关。</li><li>xxxx-yyyy-eureka 项目是服务注册中心。</li><li>xxxx-yyyy-fileupload、xxxx-yyyy-workflow 等是提供特定功能的微服务。</li><li>xxxx-yyyy-common 项目，从命名上来看，是一个提供公共功能的服务。在其中 <code>xxxx.yyyy.common.feign</code> 包下聚合了其他微服务所实现能力的声明。</li></ul><p>在一个团队内部，这样的设计具有一定的合理性。</p><p>将这个团队作为一个内聚的单元，通过 common 项目来聚合内部各个微服务提供的能力，统一暴露，很好的使用了一个外观模式。外部不必关心内部实现细节，只需专注在接口上。对内部来讲，各个服务的能力汇总到 common 中，便于管理。</p><p>但是，请回顾一下之前我提到的团队的背景。这个团队只是部门中的一个，其生产的代码需要能在部门中共享与复用。</p><p>这时的 common 项目却对部门其他团队关上了门。纵然这个团队生产的多数代码可以通过复制的形式减少其他团队的工作量，但由于 common 包含了众多这个团队业务本身的东西，在其他团队中使用时必定需要做较大的调整。</p><p>是时候打破 common 这扇门了，让门内已有的微服务走入到其他团队中。那该怎么做呢？</p><p>每个微服务对外声明自己的能力，不聚合在 common 中。每个微服务独立维护。内部负责实现自己对外声明的能力，外部使用微服务声明能力的接口。调整一下代码的组织，实例如下：</p><p><img src="http://img.uprogrammer.cn/15579307669911.jpg" alt=""></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|- xxx-yyy-zzz                       // 主项目</span></span><br><span class="line">  <span class="string">|- xxx-yyy-zzz-api               // 子项目，负责声明微服务提供的能力，Feign 接口</span></span><br><span class="line">  <span class="string">|- xxx-yyy-zzz-service         // 实现微服务对外承诺的能力</span></span><br></pre></td></tr></table></figure><p>如上面代码块中的显示，api 子项目负责声明微服务提供的能力，以 Feign 接口的形式暴露，可以独立打包为 jar，并需要的项目引用。service 子项目负责实现微服务声明的能力。</p><p>这样，每个微服务成为高内聚的单元，可以供其他团队复用。微服务的维护人员，不必局限在原来小团队中，而是放眼整个部门，同时专注维护微服务本身。在团队治理上，也打破了原来几个团队之间的无形屏障。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.uprogrammer.cn/15579278505835.jpg&quot; alt=&quot;微服务代码组织&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一张打满马赛克的图。&lt;/p&gt;
&lt;p&gt;嗯，把你的思绪拉回来先。我来介绍下团队的一些简单背景。&lt;/p&gt;
    
    </summary>
    
      <category term="技术管理" scheme="http://linfuyan.com/categories/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="代码组织" scheme="http://linfuyan.com/tags/%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87/"/>
    
      <category term="团队管理" scheme="http://linfuyan.com/tags/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>xxx.app 已损坏，打不开。您应该将它移到废纸篓</title>
    <link href="http://linfuyan.com/xxx-app-is-broken/"/>
    <id>http://linfuyan.com/xxx-app-is-broken/</id>
    <published>2019-05-13T06:32:00.000Z</published>
    <updated>2019-05-13T06:41:01.090Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 在安装一些 app 的时候，由于自身安全机制，会出现类似如下的提示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cornerstone<span class="selector-class">.app</span> 已损坏，打不开。您应该将它移到废纸篓。</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果你要继续安装，需要打开<code>系统偏好设置-安全性与隐私-通用</code>，在<code>允许从以下位置下载应用中</code>选择<code>任何来源</code>。之后就可以正常安装了。</p><p>如果上面的操作没有看到<code>任何来源</code>的选项。通过以下命令开启。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl <span class="comment">--master-disable</span></span><br></pre></td></tr></table></figure><p>安装完成以后，通过以下命令隐藏<code>任何来源</code>选项。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl <span class="comment">--master-enable</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 在安装一些 app 的时候，由于自身安全机制，会出现类似如下的提示：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Cornerstone&lt;span class=&quot;selector-class&quot;&gt;.app&lt;/span&gt; 已损坏，打不开。您应该将它移到废纸篓。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="mac" scheme="http://linfuyan.com/tags/mac/"/>
    
      <category term="安装" scheme="http://linfuyan.com/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="安全" scheme="http://linfuyan.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>搭建 spring cloud eureka server 高可用集群</title>
    <link href="http://linfuyan.com/build-spring-cloud-eureka-server-ha/"/>
    <id>http://linfuyan.com/build-spring-cloud-eureka-server-ha/</id>
    <published>2019-04-23T08:33:00.000Z</published>
    <updated>2019-04-23T09:40:32.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><h3 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h3><p>通过 <a href="http://start.spring.io" target="_blank" rel="noopener">start.spring.io</a> 生成项目代码，添加 <code>web</code>, <code>actuator</code>, <code>eureka server</code> 依赖。</p><p><img src="http://img.uprogrammer.cn/15560087270363.jpg" alt="通过 start.spring.io 生成代码"></p><p>解压源码包，在 idea 中打开项目。</p><a id="more"></a><p>在 <code>application.properties</code> 中添加以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-cloud-eureka-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示是否注册自身到eureka服务器，默认为 <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> eureka.client.register-with-eureka=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否从eureka上获取注册信息，默认为 <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> eureka.client.fetch-registry=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><h3 id="创建不同实例配置"><a href="#创建不同实例配置" class="headerlink" title="创建不同实例配置"></a>创建不同实例配置</h3><p>新建 <code>application-server1.properties</code>，<code>application-server2.properties</code>，<code>application-server3.properties</code> 三个文件，用于配置 3 个 eureka server 实例。</p><p><code>application-server1.properties</code> 内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.<span class="attribute">profiles</span>=server1</span><br><span class="line">server.<span class="attribute">port</span>=8761</span><br><span class="line"></span><br><span class="line">eureka.instance.<span class="attribute">hostname</span>=server1</span><br><span class="line"></span><br><span class="line">eureka.client.service-url.<span class="attribute">defaultZone</span>=http://server2:8762/eureka,http://server3:8763/eureka</span><br></pre></td></tr></table></figure><p><code>application-server2.properties</code> 内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.<span class="attribute">profiles</span>=server2</span><br><span class="line">server.<span class="attribute">port</span>=8762</span><br><span class="line"></span><br><span class="line">eureka.instance.<span class="attribute">hostname</span>=server2</span><br><span class="line"></span><br><span class="line">eureka.client.service-url.<span class="attribute">defaultZone</span>=http://server1:8761/eureka,http://server3:8763/eureka</span><br></pre></td></tr></table></figure><p><code>application-server3.properties</code> 内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.<span class="attribute">profiles</span>=server3</span><br><span class="line">server.<span class="attribute">port</span>=8763</span><br><span class="line"></span><br><span class="line">eureka.instance.<span class="attribute">hostname</span>=server3</span><br><span class="line"></span><br><span class="line">eureka.client.service-url.<span class="attribute">defaultZone</span>=http://server1:8761/eureka,http://server2:8762/eureka</span><br></pre></td></tr></table></figure><h3 id="激活注册服务器"><a href="#激活注册服务器" class="headerlink" title="激活注册服务器"></a>激活注册服务器</h3><p>主启动类添加 <code>@EnableEurekaServer</code> 来激活注册服务器。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ltd.pinshi.springcloudeurekaserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServerApplication</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SpringCloudEurekaServerApplication.<span class="keyword">class</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-hosts"><a href="#配置-hosts" class="headerlink" title="配置 hosts"></a>配置 hosts</h2><p>由于 3 个实例都运行在一台机器上，需要在 hosts 文件上做下配置。Mac 下为 <code>/etc/hosts</code>，在结尾添加以下映射，保存退出。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>       <span class="selector-tag">server1</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>       <span class="selector-tag">server2</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>       <span class="selector-tag">server3</span></span><br></pre></td></tr></table></figure><h2 id="启动-Eureka-Server-实例"><a href="#启动-Eureka-Server-实例" class="headerlink" title="启动 Eureka Server 实例"></a>启动 Eureka Server 实例</h2><h3 id="通过-idea-运行"><a href="#通过-idea-运行" class="headerlink" title="通过 idea 运行"></a>通过 idea 运行</h3><p><img src="http://img.uprogrammer.cn/15560094309585.jpg" alt="通过 idea 运行 eureka server 实例"></p><p>在 idea 右上角 <strong>Edit Configurations…</strong> 新建 3 个运行配置。在 <em>Program arguments</em> 中设置 <code>--spring.profiles.active=server1</code> 相应的启动场景。</p><p>点击右上角 <strong>Run</strong> 来启动实例。</p><h3 id="通过-jar-运行"><a href="#通过-jar-运行" class="headerlink" title="通过 jar 运行"></a>通过 jar 运行</h3><p>进入项目根目录，执行 <code>mvn clean package</code>。在 target 子目录下会生成 <code>spring-cloud-eureka-server-0.0.1-SNAPSHOT.jar</code> 文件。</p><p>通过以下命令分别启动 3 个实例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-cloud-eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT<span class="selector-class">.jar</span> --spring<span class="selector-class">.profiles</span><span class="selector-class">.active</span>=server1 </span><br><span class="line">java -jar spring-cloud-eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT<span class="selector-class">.jar</span> --spring<span class="selector-class">.profiles</span><span class="selector-class">.active</span>=server2</span><br><span class="line">java -jar spring-cloud-eureka-server-<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT<span class="selector-class">.jar</span> --spring<span class="selector-class">.profiles</span><span class="selector-class">.active</span>=server3</span><br></pre></td></tr></table></figure><h2 id="查看实例"><a href="#查看实例" class="headerlink" title="查看实例"></a>查看实例</h2><p>浏览器输入 <a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a>，内容如下：</p><p><img src="http://img.uprogrammer.cn/15560104281048.jpg" alt=""><br><img src="http://img.uprogrammer.cn/15560104567968.jpg" alt=""></p><p><a href="http://localhost:8762" target="_blank" rel="noopener">http://localhost:8762</a>，<a href="http://localhost:8763" target="_blank" rel="noopener">http://localhost:8763</a> 内容相似。</p><p>需要注意的是 <strong>DS Replicas</strong> 部分的内容。</p><p>通过 <strong>Instances currently registered with Eureka</strong> 可以看到注册了 3 个实例。</p><p><strong>General Info</strong> 中的 <code>registered-replicas</code>，<code>unavailable-replicas</code>，<code>available-replicas</code> 可以通过停止某个实例观察变化。</p><h2 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h2><p>在 <code>application.properties</code> 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表示是否注册自身到eureka服务器，默认为 <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> eureka.client.register-with-eureka=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否从eureka上获取注册信息，默认为 <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> eureka.client.fetch-registry=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><p>大家可以取消这两个选项的注释，查看浏览器的内容显示。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目代码&quot;&gt;&lt;a href=&quot;#项目代码&quot; class=&quot;headerlink&quot; title=&quot;项目代码&quot;&gt;&lt;/a&gt;项目代码&lt;/h2&gt;&lt;h3 id=&quot;生成项目&quot;&gt;&lt;a href=&quot;#生成项目&quot; class=&quot;headerlink&quot; title=&quot;生成项目&quot;&gt;&lt;/a&gt;生成项目&lt;/h3&gt;&lt;p&gt;通过 &lt;a href=&quot;http://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;start.spring.io&lt;/a&gt; 生成项目代码，添加 &lt;code&gt;web&lt;/code&gt;, &lt;code&gt;actuator&lt;/code&gt;, &lt;code&gt;eureka server&lt;/code&gt; 依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.uprogrammer.cn/15560087270363.jpg&quot; alt=&quot;通过 start.spring.io 生成代码&quot;&gt;&lt;/p&gt;
&lt;p&gt;解压源码包，在 idea 中打开项目。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="springcloud" scheme="http://linfuyan.com/tags/springcloud/"/>
    
      <category term="eureka" scheme="http://linfuyan.com/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>解决 ssh 连接因闲置时间过长导致掉线的问题</title>
    <link href="http://linfuyan.com/ssh-disconnect/"/>
    <id>http://linfuyan.com/ssh-disconnect/</id>
    <published>2019-04-17T06:26:00.000Z</published>
    <updated>2019-04-17T06:34:23.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>修改 <code>/etc/ssh/sshd_config</code></p><p>找到如下两行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ClientAliveInterval 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ClientAliveCountMax 3</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 客户端每隔多少秒向服务发送一个心跳数据</span></span><br><span class="line">ClientAliveInterval 30 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端多少秒没有相应，服务器自动断掉连接</span></span><br><span class="line">ClientAliveCountMax 86400</span><br></pre></td></tr></table></figure><p>重启 sshd 服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service sshd restart</span></span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><a href="https://www.cnblogs.com/wanghetao/p/3872919.html" target="_blank" rel="noopener">解决ssh登录后闲置时间过长而断开连接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方案一&quot;&gt;&lt;a href=&quot;#方案一&quot; class=&quot;headerlink&quot; title=&quot;方案一&quot;&gt;&lt;/a&gt;方案一&lt;/h3&gt;&lt;p&gt;修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到如下两行：&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ssh" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/ssh/"/>
    
    
      <category term="ssh" scheme="http://linfuyan.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下 SSH 通过 .pem 登录</title>
    <link href="http://linfuyan.com/mac-ssh-with-pem/"/>
    <id>http://linfuyan.com/mac-ssh-with-pem/</id>
    <published>2019-04-17T06:12:00.000Z</published>
    <updated>2019-04-17T06:19:39.375Z</updated>
    
    <content type="html"><![CDATA[<p>1. 基础命令如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -<span class="selector-tag">i</span> key<span class="selector-class">.pem</span> </span><br><span class="line">ssh -<span class="selector-tag">i</span> key<span class="selector-class">.pem</span> root@ip</span><br></pre></td></tr></table></figure><p>如果出现报错，说明文件的权限太大了，修改下权限。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">600</span> <span class="type">key</span>.pem</span><br></pre></td></tr></table></figure><p>2. 通过 ssh-add 添加 .pem 文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> -k key.pem</span></span><br></pre></td></tr></table></figure><p>这样就可以通过 <code>ssh root@ip</code> 直接登录了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1. 基础命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="ssh" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/ssh/"/>
    
    
      <category term="ssh" scheme="http://linfuyan.com/tags/ssh/"/>
    
      <category term="密钥" scheme="http://linfuyan.com/tags/%E5%AF%86%E9%92%A5/"/>
    
  </entry>
  
  <entry>
    <title>开启 Mac 自带的 Apache，配置 PHP 和虚拟主机</title>
    <link href="http://linfuyan.com/mac_apache_php_enable/"/>
    <id>http://linfuyan.com/mac_apache_php_enable/</id>
    <published>2019-03-30T00:53:10.000Z</published>
    <updated>2019-03-30T01:32:27.025Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 系统本身就预装了 Apache 和 PHP 。分别通过 <code>apachectl -version</code> 和 <code>php -v</code> 进行查看。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  apachectl -version</span><br><span class="line">Server version: Apache/2.4.34 (Unix)</span><br><span class="line">Server built:   Aug 17 2018 18:35:43</span><br><span class="line">➜  php -v</span><br><span class="line">PHP 7.1.23 (cli) (built: Nov  7 2018 18:20:35) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Apache-相关命令"><a href="#Apache-相关命令" class="headerlink" title="Apache 相关命令"></a>Apache 相关命令</h3><p>启动：<code>sudo apachectl start</code></p><p>停止：<code>sudo apachectl stop</code></p><p>重启：<code>sudo apachectl restart</code></p><p>查看版本号：<code>sudo apachectl -v</code></p><h3 id="添加-php-模块"><a href="#添加-php-模块" class="headerlink" title="添加 php 模块"></a>添加 php 模块</h3><p>通过 vi 打开 apache 的配置文件，配置文件需要超级权限才能进行读写。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/apache2/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>找到下面这行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LoadModule php7_module libexec/apache2/libphp7.so</span></span><br></pre></td></tr></table></figure><p>去掉前面的 <code>#</code> 注释。</p><p>保存，退出，重启 apache 就可以生效了。</p><h3 id="配置-mysite-虚拟站点"><a href="#配置-mysite-虚拟站点" class="headerlink" title="配置 mysite 虚拟站点"></a>配置 mysite 虚拟站点</h3><h4 id="1-新建一个文件夹，作为你虚拟站点的物理存储位置"><a href="#1-新建一个文件夹，作为你虚拟站点的物理存储位置" class="headerlink" title="1. 新建一个文件夹，作为你虚拟站点的物理存储位置"></a>1. 新建一个文件夹，作为你虚拟站点的物理存储位置</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /Users/your_user/...your_site</span><br></pre></td></tr></table></figure><h4 id="2-在-httpd-conf-中开启虚拟主机支持"><a href="#2-在-httpd-conf-中开启虚拟主机支持" class="headerlink" title="2. 在 httpd.conf 中开启虚拟主机支持"></a>2. 在 <code>httpd.conf</code> 中开启虚拟主机支持</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> /etc/apache2/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>找到下面这行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">Include</span> /private/etc/apache2/extra/httpd-vhosts.conf</span></span><br></pre></td></tr></table></figure><p>去掉前面的 <code>#</code> 注释。</p><h4 id="3-添加-DocumentRoot"><a href="#3-添加-DocumentRoot" class="headerlink" title="3. 添加 DocumentRoot"></a>3. 添加 DocumentRoot</h4><p>找到 <code>httpd.conf</code> 中的如下内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot <span class="string">"/Library/WebServer/Documents"</span></span><br><span class="line">&lt;Directory <span class="string">"/Library/WebServer/Documents"</span> &gt;</span><br><span class="line"><span class="string">...</span></span><br><span class="line">&lt;<span class="string">/Directory</span>&gt;</span><br></pre></td></tr></table></figure><p>复制一份，直接添加到这段后面。</p><p>修改其中的 <code>/Library/WebServer/Documents</code> 为上面建好的文件夹路径 <code>/Users/your_user/...your_site</code>。</p><p>保存，退出 <code>httpd.conf</code>。</p><h4 id="4-添加虚拟主机配置"><a href="#4-添加虚拟主机配置" class="headerlink" title="4. 添加虚拟主机配置"></a>4. 添加虚拟主机配置</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>apache2<span class="regexp">/extra/</span>httpd-vhost.conf</span><br></pre></td></tr></table></figure><p>在最后添加如下代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'localhost' 虚拟主机</span></span><br><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/Library/WebServer/Documents"</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> localhost</span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="string">"/private/var/log/apache2/localhost-error_log"</span></span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="string">"/private/var/log/apache2/localhost-access_log"</span> common </span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"><span class="comment"># 'mysite' 虚拟主机</span></span><br><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/Users/your_user/...your_site"</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> mysite</span><br><span class="line">    <span class="attribute">ErrorLog</span> <span class="string">"/private/var/log/apache2/mysite-error_log"</span></span><br><span class="line">    <span class="attribute">CustomLog</span> <span class="string">"/private/var/log/apache2/mysite-access_log"</span> common </span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>保存退出。重启 apache 服务。</p><h4 id="5-修改-etc-hosts"><a href="#5-修改-etc-hosts" class="headerlink" title="5. 修改 /etc/hosts"></a>5. 修改 <code>/etc/hosts</code></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure><p>添加 <code>127.0.0.1 mysite</code>，保存退出。</p><h4 id="6-添加-info-php"><a href="#6-添加-info-php" class="headerlink" title="6. 添加 info.php"></a>6. 添加 info.php</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi <span class="regexp">/Users/y</span>our_user<span class="regexp">/...your_site/i</span>nfo.php</span><br></pre></td></tr></table></figure><p><code>info.php</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> phpinfo();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>保存退出。</p><h4 id="7-浏览器中测试"><a href="#7-浏览器中测试" class="headerlink" title="7. 浏览器中测试"></a>7. 浏览器中测试</h4><p>在浏览器中输入 <a href="http://mysite/info.php]" target="_blank" rel="noopener">http://mysite/info.php</a>，查看结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 系统本身就预装了 Apache 和 PHP 。分别通过 &lt;code&gt;apachectl -version&lt;/code&gt; 和 &lt;code&gt;php -v&lt;/code&gt; 进行查看。&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  apachectl -version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server version: Apache/2.4.34 (Unix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server built:   Aug 17 2018 18:35:43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;➜  php -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP 7.1.23 (cli) (built: Nov  7 2018 18:20:35) ( NTS )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copyright (c) 1997-2018 The PHP Group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
      <category term="LAMP" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/LAMP/"/>
    
    
      <category term="Apache" scheme="http://linfuyan.com/tags/Apache/"/>
    
      <category term="Mac" scheme="http://linfuyan.com/tags/Mac/"/>
    
      <category term="PHP" scheme="http://linfuyan.com/tags/PHP/"/>
    
      <category term="VirtualHost" scheme="http://linfuyan.com/tags/VirtualHost/"/>
    
  </entry>
  
  <entry>
    <title>docker 搭建 zookeeper 集群</title>
    <link href="http://linfuyan.com/docker-zookeeper-cluster/"/>
    <id>http://linfuyan.com/docker-zookeeper-cluster/</id>
    <published>2019-03-22T09:11:08.000Z</published>
    <updated>2019-03-22T09:16:43.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Zookeeper-基本使用"><a href="#1-Zookeeper-基本使用" class="headerlink" title="1. Zookeeper 基本使用"></a>1. Zookeeper 基本使用</h2><h3 id="下载-zookeeper-镜像"><a href="#下载-zookeeper-镜像" class="headerlink" title="下载 zookeeper 镜像"></a>下载 zookeeper 镜像</h3><p>默认下载最新版本，指定版本可以在 zookeeper 后面添加 tag，如 <code>zookeeper:latest</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper</span><br></pre></td></tr></table></figure><h3 id="启动-zookeeper-镜像。"><a href="#启动-zookeeper-镜像。" class="headerlink" title="启动 zookeeper 镜像。"></a>启动 zookeeper 镜像。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name first-zk -d zookeeper</span><br></pre></td></tr></table></figure><p>这个命令会创建名为 first-zk 的 zookeeper 容器，在后台运行，并默认导出 2181 端口。</p><a id="more"></a><h3 id="测试-zookeeper-容器"><a href="#测试-zookeeper-容器" class="headerlink" title="测试 zookeeper 容器"></a>测试 zookeeper 容器</h3><p>以下命令通过输出日志可以查看 zk 运行情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f first-zk</span><br></pre></td></tr></table></figure><h3 id="客户端连接-zk-服务器"><a href="#客户端连接-zk-服务器" class="headerlink" title="客户端连接 zk 服务器"></a>客户端连接 zk 服务器</h3><p>1. 在已创建的 first-zk 容器中，执行 zkCli.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it first-zk zkCli.sh</span><br></pre></td></tr></table></figure><p>2. 新建 zookeeper 容器作为客户端，并连接到 first-zk：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --link first-zk zookeeper zkCli.sh -server first-zk</span><br></pre></td></tr></table></figure><blockquote><p>这里 <code>--link first-zk</code> 通过 docker 的 link 机制来访问 first-zk 容器；<br><code>--rm</code> 在容器退出后会自动删除容器；<br><code>zkCli.sh -server first-zk</code> 则启动 zkCli.sh 命令，连接到 first-zk。</p></blockquote><p>zkCli.sh 常用命令的使用，请参考<a href="">这里</a>。</p><h2 id="2-Zookeeper-集群搭建"><a href="#2-Zookeeper-集群搭建" class="headerlink" title="2. Zookeeper 集群搭建"></a>2. Zookeeper 集群搭建</h2><h3 id="编写-docker-compose-yml-文件"><a href="#编写-docker-compose-yml-文件" class="headerlink" title="编写 docker-compose.yml 文件"></a>编写 docker-compose.yml 文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    zk1:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">zk1</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"2181:2181"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zk1:2888:3888</span> <span class="string">server.2=zk2:2888:3888</span> <span class="string">server.3=zk3:2888:3888</span></span><br><span class="line"><span class="attr">    zk2:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">zk2</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"2182:2181"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zk1:2888:3888</span> <span class="string">server.2=zk2:2888:3888</span> <span class="string">server.3=zk3:2888:3888</span></span><br><span class="line"><span class="attr">    zk3:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">zk3</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"2183:2181"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            ZOO_SERVERS:</span> <span class="string">server.1=zk1:2888:3888</span> <span class="string">server.2=zk2:2888:3888</span> <span class="string">server.3=zk3:2888:3888</span></span><br></pre></td></tr></table></figure><p>在这个配置文件中，docker 运行了 3 个 zookeeper 镜像，通过 <code>ports</code> 字段分别将本地的 2181, 2182, 2183 端口绑定到对应容器的 2181 端口上。</p><blockquote><p><code>ZOO_MY_ID</code> 和 <code>ZOO_SERVERS</code> 是搭建 Zookeeper 集群需要的两个环境变量。<br><code>ZOO_MY_ID</code> 标识服务的 id，为 1-255 之间的整数，必须在集群中唯一。<br><code>ZOO_SERVERS</code> 是集群中的主机列表。</p></blockquote><p>在 <code>docker-compose.yml</code> 所在目录下执行 <code>COMPOSE_PROJECT_NAME=docker-zk-cluster docker-compose up</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  docker-zk-cluster COMPOSE_PROJECT_NAME=docker-zk-cluster docker-compose up</span><br><span class="line"></span><br><span class="line">Creating network "docker-zk-cluster_default" with the default driver</span><br><span class="line">Creating zk2 ... done</span><br><span class="line">Creating zk1 ... done</span><br><span class="line">Creating zk3 ... done</span><br><span class="line">Attaching to zk3, zk1, zk2</span><br><span class="line">zk3    | ZooKeeper JMX enabled by default</span><br><span class="line">zk1    | ZooKeeper JMX enabled by default</span><br><span class="line">zk2    | ZooKeeper JMX enabled by default</span><br><span class="line">zk2    | Using config: /conf/zoo.cfg</span><br><span class="line">zk3    | Using config: /conf/zoo.cfg</span><br><span class="line">zk1    | Using config: /conf/zoo.cfg</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><code>COMPOSE_PROJECT_NAME=docker-zk-cluster</code> 设置该环境变量是为当前的 compose 工程取的名字，与其他工程做区分。</p></blockquote><p>启动后，打开另一终端窗口，运行 <code>COMPOSE_PROJECT_NAME=docker-zk-cluster docker-compose ps</code>，查看服务运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  COMPOSE_PROJECT_NAME=docker-zk-cluster docker-compose ps</span><br><span class="line"></span><br><span class="line">Name              Command               State                Ports</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">zk1    /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp,</span><br><span class="line">                                                2888/tcp, 3888/tcp</span><br><span class="line">zk2    /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp,</span><br><span class="line">                                                2888/tcp, 3888/tcp</span><br><span class="line">zk3    /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp,</span><br><span class="line">                                                2888/tcp, 3888/tcp</span><br></pre></td></tr></table></figure><h3 id="使用-Docker-命令行客户端连接-ZK-集群"><a href="#使用-Docker-命令行客户端连接-ZK-集群" class="headerlink" title="使用 Docker 命令行客户端连接 ZK 集群"></a>使用 Docker 命令行客户端连接 ZK 集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --link zk1 --link zk2 --link zk3 --net docker-zk-cluster_default zookeeper zkCli.sh -server zk1:2181,zk2:2181,zk3:2181</span><br><span class="line">Connecting to zk1:2181,zk2:2181,zk3:2181</span><br></pre></td></tr></table></figure><blockquote><p><code>--net docker-zk-cluster_default</code> 其中 <code>docker-zk-cluster</code> 是 compose 工程名，不作这个配置会导致 <code>docker: Error response from daemon: Cannot link to /zk1, as it does not belong to the default network.</code> 异常。具体原因请看<a href="https://segmentfault.com/q/1010000008238334/a-1020000008253855" target="_blank" rel="noopener">这里</a>。</p></blockquote><h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3><p>通过 nc 命令连接到指定 Zookeeper 服务器，发送 stat 来查看状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ echo stat | nc localhost 2181</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /172.19.0.5:40210[1](queued=0,recved=31,sent=31)</span><br><span class="line"> /172.19.0.1:34682[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/2/76</span><br><span class="line">Received: 32</span><br><span class="line">Sent: 31</span><br><span class="line">Connections: 2</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x100000001</span><br><span class="line">Mode: follower</span><br><span class="line">Node count: 4</span><br><span class="line">➜  ~ echo stat | nc localhost 2182</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /172.19.0.1:37312[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/0</span><br><span class="line">Received: 1</span><br><span class="line">Sent: 0</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x100000001</span><br><span class="line">Mode: follower</span><br><span class="line">Node count: 4</span><br><span class="line">➜  ~ echo stat | nc localhost 2183</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /172.19.0.1:54278[0](queued=0,recved=1,sent=0)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/0</span><br><span class="line">Received: 1</span><br><span class="line">Sent: 0</span><br><span class="line">Connections: 1</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0x100000001</span><br><span class="line">Mode: leader</span><br><span class="line">Node count: 4</span><br><span class="line">Proposal sizes last/min/max: 36/36/36</span><br></pre></td></tr></table></figure><p>如上，我们发现 zk3（端口为 2183）为 leader，其他为 follower。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Zookeeper-基本使用&quot;&gt;&lt;a href=&quot;#1-Zookeeper-基本使用&quot; class=&quot;headerlink&quot; title=&quot;1. Zookeeper 基本使用&quot;&gt;&lt;/a&gt;1. Zookeeper 基本使用&lt;/h2&gt;&lt;h3 id=&quot;下载-zookeeper-镜像&quot;&gt;&lt;a href=&quot;#下载-zookeeper-镜像&quot; class=&quot;headerlink&quot; title=&quot;下载 zookeeper 镜像&quot;&gt;&lt;/a&gt;下载 zookeeper 镜像&lt;/h3&gt;&lt;p&gt;默认下载最新版本，指定版本可以在 zookeeper 后面添加 tag，如 &lt;code&gt;zookeeper:latest&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull zookeeper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;启动-zookeeper-镜像。&quot;&gt;&lt;a href=&quot;#启动-zookeeper-镜像。&quot; class=&quot;headerlink&quot; title=&quot;启动 zookeeper 镜像。&quot;&gt;&lt;/a&gt;启动 zookeeper 镜像。&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --name first-zk -d zookeeper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令会创建名为 first-zk 的 zookeeper 容器，在后台运行，并默认导出 2181 端口。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="分布式架构" scheme="http://linfuyan.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="zookeeper" scheme="http://linfuyan.com/tags/zookeeper/"/>
    
      <category term="docker" scheme="http://linfuyan.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>记某店面试题</title>
    <link href="http://linfuyan.com/interview-moudian/"/>
    <id>http://linfuyan.com/interview-moudian/</id>
    <published>2019-03-20T12:11:00.000Z</published>
    <updated>2019-03-20T13:16:23.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-有-n-个整数元素的数组，如何获取其中最大的-k-个数？"><a href="#1-有-n-个整数元素的数组，如何获取其中最大的-k-个数？" class="headerlink" title="1. 有 n 个整数元素的数组，如何获取其中最大的 k 个数？"></a>1. 有 n 个整数元素的数组，如何获取其中最大的 k 个数？</h4><p>a. 先对数组的元素进行排序，然后再取其中的 k 个数。时间复杂度主要在排序算法上，可以做到 nlog(n)</p><p>b. 循环 1 - k，每个循环内对数组做一次冒泡取最大值，则时间复杂度 kn</p><p>c. 先取 k 个元素，建立小顶堆，再遍历剩下的元素，如果元素比堆顶大，则放入堆中根据需要调整堆形态。最终堆中的元素就是最大的 k 个。</p><blockquote><p>面试时很自然想到了 a 方案；b 想过，不过现场没有描述清楚；c 是参考了网络上的答案。</p></blockquote><a id="more"></a><h4 id="2-有-n-级台阶，一次可以走-1-步或者-2-步，问有多少种走法？"><a href="#2-有-n-级台阶，一次可以走-1-步或者-2-步，问有多少种走法？" class="headerlink" title="2. 有 n 级台阶，一次可以走 1 步或者 2 步，问有多少种走法？"></a>2. 有 n 级台阶，一次可以走 1 步或者 2 步，问有多少种走法？</h4><p>分析：n=1 的时候，只有走 1 步的方案；n=2 的时候，有走 2 个 1 步或 1 个 2 步 2个方案；而 n 步可以归纳为走 n-1 步的所有方案和走 n-2 步的所有方案的和。</p><p>a. 递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> x = f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b. 迭代</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">1</span>, n2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> n3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        n3 = n1 + n2;</span><br><span class="line">        n1 = n2;</span><br><span class="line">        n2 = n3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>面试时最先想到的了 a 方案；b 方案脑海中一直没有想起来递归对应的迭代这个词。</p></blockquote><h4 id="3-Mysql-数据库中-一张-user-表，包含-id，name，reg-date（格式：yyyy-MM-dd，如2019-03-20）-字段，使用一条语句找出注册用户个数大于-100-的-reg-data"><a href="#3-Mysql-数据库中-一张-user-表，包含-id，name，reg-date（格式：yyyy-MM-dd，如2019-03-20）-字段，使用一条语句找出注册用户个数大于-100-的-reg-data" class="headerlink" title="3. Mysql 数据库中 一张 user 表，包含 id，name，reg_date（格式：yyyy-MM-dd，如2019-03-20） 字段，使用一条语句找出注册用户个数大于 100 的 reg_data"></a>3. Mysql 数据库中 一张 user 表，包含 id，name，reg_date（格式：yyyy-MM-dd，如2019-03-20） 字段，使用一条语句找出注册用户个数大于 100 的 reg_data</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    reg_date, total</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (select </span><br><span class="line">        reg_date, count(*) as total </span><br><span class="line">    <span class="keyword">from</span><span class="built_in"> user </span></span><br><span class="line">   <span class="built_in"> group </span>by reg_date) as tmp </span><br><span class="line">where total &gt; 100 </span><br><span class="line">order by total desc;</span><br></pre></td></tr></table></figure><blockquote><p>面试时没有给出这条语句，group by 与 order by 各想了一部分，没有拼成一条语句。回来后用实例测试了一下。平时在应用中基本走简单查询。</p></blockquote><h4 id="4-数据库事务相关，如下："><a href="#4-数据库事务相关，如下：" class="headerlink" title="4. 数据库事务相关，如下："></a>4. 数据库事务相关，如下：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">a</span> <span class="string">=</span> <span class="number">4</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">开启事务</span></span><br><span class="line"><span class="string">a</span> <span class="string">=</span> <span class="number">5</span><span class="string">;</span> <span class="bullet">----</span> <span class="string">①</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--②</span></span><br><span class="line"><span class="string">a</span> <span class="string">=</span> <span class="number">6</span><span class="string">;</span> <span class="meta">---</span> <span class="string">③</span></span><br><span class="line"><span class="string">//</span> <span class="string">提交事务</span></span><br></pre></td></tr></table></figure><p>问线程 A 运行到②时，线程 B 将读取到 a 的值是多少？</p><blockquote><p>面试时想到了数据库的事务隔离级别。未提交读、读已提交（不可重复读）、可重复读、串行化。<br>答曰：未提交读时结果是 5，读已提交时是 4。</p></blockquote><p>拓展：<a href="https://www.cnblogs.com/huanongying/p/7021555.html" target="_blank" rel="noopener">MySQL的四种事务隔离级别</a></p><h4 id="5-100-的阶乘的最终结果有多少个-0？"><a href="#5-100-的阶乘的最终结果有多少个-0？" class="headerlink" title="5. 100 的阶乘的最终结果有多少个 0？"></a>5. 100 的阶乘的最终结果有多少个 0？</h4><p>最终的结果是 24 个。</p><p>每个 5 和 10，会使结果多一个 0，其中 25，50，75，100 会多两个，所以 10 个 5 + 10 个 10 + 4 = 24 个。</p><blockquote><p>面试时给了 22 个的结果。未考虑到 25 和 75。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>题目 1，2，5 都是网上现成的题目，其实还是比较简单的。工作 10 年，很久没有参加面试了，也没有遇到面这些题目的。没有准备到，回答时只能根据自己临时的思路，回答的不尽如人意，比较遗憾。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-有-n-个整数元素的数组，如何获取其中最大的-k-个数？&quot;&gt;&lt;a href=&quot;#1-有-n-个整数元素的数组，如何获取其中最大的-k-个数？&quot; class=&quot;headerlink&quot; title=&quot;1. 有 n 个整数元素的数组，如何获取其中最大的 k 个数？&quot;&gt;&lt;/a&gt;1. 有 n 个整数元素的数组，如何获取其中最大的 k 个数？&lt;/h4&gt;&lt;p&gt;a. 先对数组的元素进行排序，然后再取其中的 k 个数。时间复杂度主要在排序算法上，可以做到 nlog(n)&lt;/p&gt;
&lt;p&gt;b. 循环 1 - k，每个循环内对数组做一次冒泡取最大值，则时间复杂度 kn&lt;/p&gt;
&lt;p&gt;c. 先取 k 个元素，建立小顶堆，再遍历剩下的元素，如果元素比堆顶大，则放入堆中根据需要调整堆形态。最终堆中的元素就是最大的 k 个。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试时很自然想到了 a 方案；b 想过，不过现场没有描述清楚；c 是参考了网络上的答案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="面试" scheme="http://linfuyan.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>env: bash \r: No such file or directory</title>
    <link href="http://linfuyan.com/env-bash-r-No-such-file-or-directory/"/>
    <id>http://linfuyan.com/env-bash-r-No-such-file-or-directory/</id>
    <published>2019-02-22T01:14:11.000Z</published>
    <updated>2019-02-22T01:39:09.140Z</updated>
    
    <content type="html"><![CDATA[<p>今天在 mac 下想打包一个 Android apk，执行 <code>./gradlew clean build</code>，报了如下提示：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">en</span><span class="variable">v:</span> bash \r: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br></pre></td></tr></table></figure><p>刚开始一头雾水，之前没有遇到过这个问题，而且这是提示没有什么可以跟踪的信息。在百思不得其解之际想到源码是朋友通过 windows 传给我的，随即想到 dos 下的换行与 unix 下换行不一致的特性。</p><p>所以通过 vi 打开 gradlew 文件，在命令模式下，执行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="builtin-name">set</span> <span class="attribute">fileformat</span>=unix</span><br></pre></td></tr></table></figure><p>来切换文件格式为unix格式，并保存退出。</p><p>继续在终端中执行 <code>./gradlew clean build</code>，问题就解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在 mac 下想打包一个 Android apk，执行 &lt;code&gt;./gradlew clean build&lt;/code&gt;，报了如下提示：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="FAQ" scheme="http://linfuyan.com/categories/FAQ/"/>
    
    
      <category term="fileformat" scheme="http://linfuyan.com/tags/fileformat/"/>
    
      <category term="\r\n" scheme="http://linfuyan.com/tags/r-n/"/>
    
      <category term="dos" scheme="http://linfuyan.com/tags/dos/"/>
    
      <category term="unix" scheme="http://linfuyan.com/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 打包成 war</title>
    <link href="http://linfuyan.com/springboot-package-to-war/"/>
    <id>http://linfuyan.com/springboot-package-to-war/</id>
    <published>2019-02-16T13:34:00.000Z</published>
    <updated>2019-02-22T01:40:12.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pom-xml-修改"><a href="#pom-xml-修改" class="headerlink" title="pom.xml 修改"></a>pom.xml 修改</h2><h3 id="将-jar-修改为-war"><a href="#将-jar-修改为-war" class="headerlink" title="将 jar 修改为 war"></a>将 jar 修改为 war</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Maven 创建 SpringBoot 项目，默认打包为 jar。</p><a id="more"></a><h3 id="在-spring-boot-starter-web-依赖中移除-tomcat-模块"><a href="#在-spring-boot-starter-web-依赖中移除-tomcat-模块" class="headerlink" title="在 spring-boot-starter-web 依赖中移除 tomcat 模块"></a>在 <code>spring-boot-starter-web</code> 依赖中移除 tomcat 模块</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot 自带 tomcat，需要移除</p><h3 id="添加-servlet-依赖"><a href="#添加-servlet-依赖" class="headerlink" title="添加 servlet 依赖"></a>添加 servlet 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-build-gt-节点中的-finalName-修改为-server-context-path-中的路径。"><a href="#lt-build-gt-节点中的-finalName-修改为-server-context-path-中的路径。" class="headerlink" title="&lt;build&gt; 节点中的 finalName 修改为 server.context-path 中的路径。"></a><code>&lt;build&gt;</code> 节点中的 <code>finalName</code> 修改为 server.context-path 中的路径。</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$</span><span class="template-variable">&#123;project.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="修改-SpringBoot-项目启动类，继承-SpringBootServletInitializer"><a href="#修改-SpringBoot-项目启动类，继承-SpringBootServletInitializer" class="headerlink" title="修改 SpringBoot 项目启动类，继承 SpringBootServletInitializer"></a>修改 SpringBoot 项目启动类，继承 <code>SpringBootServletInitializer</code></h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MySpringBootApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> builder) &#123;</span><br><span class="line">        <span class="comment">// 注意这里要指向原先用main方法执行的Application启动类</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(<span class="type">MySpringBootApplication</span>.<span class="keyword">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line"><span class="type">SpringApplication</span>.run(<span class="type">MySpringBootApplication</span>.<span class="keyword">class</span>, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-mvn-打包"><a href="#使用-mvn-打包" class="headerlink" title="使用 mvn 打包"></a>使用 <code>mvn</code> 打包</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven<span class="selector-class">.test</span><span class="selector-class">.skip</span>=true</span><br></pre></td></tr></table></figure><p>在项目的 target 目录下就可以看到 .war 文件</p><h2 id="将-war-文件部署到-tomcat-的-webapps-目录下"><a href="#将-war-文件部署到-tomcat-的-webapps-目录下" class="headerlink" title="将 .war 文件部署到 tomcat 的 webapps 目录下"></a>将 .war 文件部署到 tomcat 的 webapps 目录下</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pom-xml-修改&quot;&gt;&lt;a href=&quot;#pom-xml-修改&quot; class=&quot;headerlink&quot; title=&quot;pom.xml 修改&quot;&gt;&lt;/a&gt;pom.xml 修改&lt;/h2&gt;&lt;h3 id=&quot;将-jar-修改为-war&quot;&gt;&lt;a href=&quot;#将-jar-修改为-war&quot; class=&quot;headerlink&quot; title=&quot;将 jar 修改为 war&quot;&gt;&lt;/a&gt;将 jar 修改为 war&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;war&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 Maven 创建 SpringBoot 项目，默认打包为 jar。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="打包" scheme="http://linfuyan.com/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="springboot" scheme="http://linfuyan.com/tags/springboot/"/>
    
      <category term="maven" scheme="http://linfuyan.com/tags/maven/"/>
    
      <category term="war" scheme="http://linfuyan.com/tags/war/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 14.04 安装 jdk 1.8</title>
    <link href="http://linfuyan.com/ubuntu14.04-install-jdk-1.8/"/>
    <id>http://linfuyan.com/ubuntu14.04-install-jdk-1.8/</id>
    <published>2019-02-16T13:23:00.000Z</published>
    <updated>2019-02-22T01:41:06.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="删除低版本的-open-jdk"><a href="#删除低版本的-open-jdk" class="headerlink" title="删除低版本的 open jdk"></a>删除低版本的 open jdk</h2><p>ubuntu 14.04 默认的 java 版本为1.7，为了升级到 1.8并保持干净，我们先删除低版本的 open jdk。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> autoremove openjdk-7-jre</span><br></pre></td></tr></table></figure><p>执行完可以通过 <code>java -version</code> 来确认是否已经删除</p><a id="more"></a><h2 id="从-PPA-源安装-1-8-版本的-jdk"><a href="#从-PPA-源安装-1-8-版本的-jdk" class="headerlink" title="从 PPA 源安装 1.8 版本的 jdk"></a>从 PPA 源安装 1.8 版本的 jdk</h2><p>Oracle java 的 PPA 源： <a href="https://launchpad.net/~webupd8team/+archive/ubuntu/java" target="_blank" rel="noopener">https://launchpad.net/~webupd8team/+archive/ubuntu/java</a></p><p>在 shell 中执行如下命令：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:webupd8team/java</span><br><span class="line">// 更新 apt 源</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>执行上以上操作，同样可以输入 <code>java -version</code> 来确认是否新版 jdk 已经安装成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;删除低版本的-open-jdk&quot;&gt;&lt;a href=&quot;#删除低版本的-open-jdk&quot; class=&quot;headerlink&quot; title=&quot;删除低版本的 open jdk&quot;&gt;&lt;/a&gt;删除低版本的 open jdk&lt;/h2&gt;&lt;p&gt;ubuntu 14.04 默认的 java 版本为1.7，为了升级到 1.8并保持干净，我们先删除低版本的 open jdk。&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-&lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; autoremove openjdk-7-jre&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完可以通过 &lt;code&gt;java -version&lt;/code&gt; 来确认是否已经删除&lt;/p&gt;
    
    </summary>
    
      <category term="软件工具" scheme="http://linfuyan.com/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="ubuntu" scheme="http://linfuyan.com/tags/ubuntu/"/>
    
      <category term="jdk1.8" scheme="http://linfuyan.com/tags/jdk1-8/"/>
    
  </entry>
  
  <entry>
    <title>Laravel思维导图之Laravel入门指南</title>
    <link href="http://linfuyan.com/mindmap-laravel-start-guide/"/>
    <id>http://linfuyan.com/mindmap-laravel-start-guide/</id>
    <published>2017-08-06T12:48:00.000Z</published>
    <updated>2018-10-18T12:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.uprogrammer.cn/static/images/%e7%b2%be%e8%bf%9b%e8%84%91%e5%9b%be%e4%b9%8bLaravel%e5%85%a5%e9%97%a8%e6%8c%87%e5%8d%97.jpg" alt="精进脑图之Laravel入门指南"></p><blockquote><p>本系列思维导图整理自 Laravel 5.4 版本官方文档。</p><p>思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：<strong>up2048</strong>，并回复“<strong>精进脑图</strong>”来获取。</p></blockquote><p>今天我们就通过 4 张思维导图来快速看 Laravel 5.4 入门指南。</p><a id="more"></a><h2 id="Laravel-安装"><a href="#Laravel-安装" class="headerlink" title="Laravel 安装"></a>Laravel 安装</h2><p><img src="http://img.uprogrammer.cn/static/images/Laravel%e5%ae%89%e8%a3%85.png" alt="Laravel 安装"></p><h2 id="Laravel-配置信息"><a href="#Laravel-配置信息" class="headerlink" title="Laravel 配置信息"></a>Laravel 配置信息</h2><p><img src="http://img.uprogrammer.cn/static/images/Laravel%e9%85%8d%e7%bd%ae%e4%bf%a1%e6%81%af.png" alt="Laravel 配置信息"></p><h2 id="Laravel-文件夹结构"><a href="#Laravel-文件夹结构" class="headerlink" title="Laravel 文件夹结构"></a>Laravel 文件夹结构</h2><p><img src="http://img.uprogrammer.cn/static/images/Laravel%e6%96%87%e4%bb%b6%e5%a4%b9%e7%bb%93%e6%9e%84.png" alt="Laravel 结构"></p><h2 id="Laravel-请求生命周期"><a href="#Laravel-请求生命周期" class="headerlink" title="Laravel 请求生命周期"></a>Laravel 请求生命周期</h2><p><img src="http://img.uprogrammer.cn/static/images/Laravel%e8%af%b7%e6%b1%82%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f.png" alt="Laravel 请求生命周期"></p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>接下来，本人会继续对 Laravel 做比较系统的学习，会以思维导图的形式做梳理并于大家分享。这些文章都将首发在微信公众号：up2048 上。欢迎大家扫描下面的二维码，我们一起学习，分享，讨论，反思。</p><p>- EOF -</p><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzAxMTE5MzYzOA==&amp;mid=2649861276&amp;idx=1&amp;sn=61e039b1eb87a330b84d1a70dbe72c0a&amp;chksm=8341d0d5b43659c32a5ec6849c9fbfa17303bb7fd9f623e9d2b1cd4f1e82b9b61c92d48a5013#rd" target="_blank" rel="noopener">十五张思维导图带你快速学习PHP言语基础</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.uprogrammer.cn/static/images/%e7%b2%be%e8%bf%9b%e8%84%91%e5%9b%be%e4%b9%8bLaravel%e5%85%a5%e9%97%a8%e6%8c%87%e5%8d%97.jpg&quot; alt=&quot;精进脑图之Laravel入门指南&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本系列思维导图整理自 Laravel 5.4 版本官方文档。&lt;/p&gt;
&lt;p&gt;思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：&lt;strong&gt;up2048&lt;/strong&gt;，并回复“&lt;strong&gt;精进脑图&lt;/strong&gt;”来获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们就通过 4 张思维导图来快速看 Laravel 5.4 入门指南。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="http://linfuyan.com/tags/php/"/>
    
      <category term="laravel" scheme="http://linfuyan.com/tags/laravel/"/>
    
      <category term="思维导图" scheme="http://linfuyan.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>十五张思维导图带你快速学习PHP语言基础</title>
    <link href="http://linfuyan.com/mindmap-php-base/"/>
    <id>http://linfuyan.com/mindmap-php-base/</id>
    <published>2017-08-03T12:48:00.000Z</published>
    <updated>2018-10-18T12:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.uprogrammer.cn/static/images/精进脑图之PHP基础.png" alt="精进脑图之PHP基础"></p><blockquote><p>在打算系统的学习 Laravel 之前，我抽空看了 PHP 语言基础，并且绘制了各个部分的思维导图，以方便自己从一些图片就可以查看相关知识的全貌。</p><p>这部分思维导图整理自菜鸟教程的 PHP 教程。</p><p>思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：<strong>up2048</strong>，并回复“<strong>精进脑图</strong>”来获取。</p></blockquote><p>下面我们就通过 15 张思维导图来快速学习 PHP 语言基础。</p><a id="more"></a><h2 id="0x00-PHP-简介"><a href="#0x00-PHP-简介" class="headerlink" title="0x00 PHP 简介"></a>0x00 PHP 简介</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP简介.png" alt="PHP简介"></p><h2 id="0x01-PHP-安装"><a href="#0x01-PHP-安装" class="headerlink" title="0x01 PHP 安装"></a>0x01 PHP 安装</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP安装.png" alt="PHP安装"></p><h2 id="0x02-PHP-语法"><a href="#0x02-PHP-语法" class="headerlink" title="0x02 PHP 语法"></a>0x02 PHP 语法</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP语法.png" alt="PHP语法"></p><h2 id="0x03-PHP-数据类型"><a href="#0x03-PHP-数据类型" class="headerlink" title="0x03 PHP 数据类型"></a>0x03 PHP 数据类型</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP数据类型.png" alt="PHP数据类型"></p><h2 id="0x04-PHP-变量"><a href="#0x04-PHP-变量" class="headerlink" title="0x04 PHP 变量"></a>0x04 PHP 变量</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP变量.png" alt="PHP变量"></p><h2 id="0x05-PHP-数组"><a href="#0x05-PHP-数组" class="headerlink" title="0x05 PHP 数组"></a>0x05 PHP 数组</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP数组.png" alt="PHP数组"></p><h2 id="0x06-PHP-常量"><a href="#0x06-PHP-常量" class="headerlink" title="0x06 PHP 常量"></a>0x06 PHP 常量</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP常量.png" alt="PHP常量"></p><h2 id="0x07-PHP-超级全局变量"><a href="#0x07-PHP-超级全局变量" class="headerlink" title="0x07 PHP 超级全局变量"></a>0x07 PHP 超级全局变量</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP超级全局变量.png" alt="PHP超级全局变量"></p><h2 id="0x08-PHP-魔术变量"><a href="#0x08-PHP-魔术变量" class="headerlink" title="0x08 PHP 魔术变量"></a>0x08 PHP 魔术变量</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP魔术变量.png" alt="PHP魔术变量"></p><h2 id="0x09-PHP-运算符"><a href="#0x09-PHP-运算符" class="headerlink" title="0x09 PHP 运算符"></a>0x09 PHP 运算符</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP运算符.png" alt="PHP运算符"></p><h2 id="0x0A-PHP-流程语句"><a href="#0x0A-PHP-流程语句" class="headerlink" title="0x0A PHP 流程语句"></a>0x0A PHP 流程语句</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP流程语句.png" alt="PHP流程语句"></p><h2 id="0x0B-PHP-函数"><a href="#0x0B-PHP-函数" class="headerlink" title="0x0B PHP 函数"></a>0x0B PHP 函数</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP函数.png" alt="PHP函数"></p><h2 id="0x0C-PHP-命名空间"><a href="#0x0C-PHP-命名空间" class="headerlink" title="0x0C PHP 命名空间"></a>0x0C PHP 命名空间</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP命名空间.png" alt="PHP命名空间"></p><h2 id="0x0D-PHP-面向对象"><a href="#0x0D-PHP-面向对象" class="headerlink" title="0x0D PHP 面向对象"></a>0x0D PHP 面向对象</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP面向对象.png" alt="PHP面向对象"></p><h2 id="0x0E-PHP-错误与异常"><a href="#0x0E-PHP-错误与异常" class="headerlink" title="0x0E PHP 错误与异常"></a>0x0E PHP 错误与异常</h2><p><img src="http://img.uprogrammer.cn/static/images/PHP错误与异常.png" alt="PHP错误与异常"></p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>接下来，本人会对 Laravel 做比较系统的学习，会以思维导图的形式做梳理并于大家分享。这些文章都将首发在微信公众号：up2048 上。欢迎大家扫描下面的二维码，我们一起学习，分享，讨论，反思。</p><h2 id="EOF"><a href="#EOF" class="headerlink" title="- EOF -"></a>- EOF -</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.uprogrammer.cn/static/images/精进脑图之PHP基础.png&quot; alt=&quot;精进脑图之PHP基础&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在打算系统的学习 Laravel 之前，我抽空看了 PHP 语言基础，并且绘制了各个部分的思维导图，以方便自己从一些图片就可以查看相关知识的全貌。&lt;/p&gt;
&lt;p&gt;这部分思维导图整理自菜鸟教程的 PHP 教程。&lt;/p&gt;
&lt;p&gt;思维导图导出为图片时会导致其变模糊。需要高清的思维导图源文件，请关注微信公众号：&lt;strong&gt;up2048&lt;/strong&gt;，并回复“&lt;strong&gt;精进脑图&lt;/strong&gt;”来获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们就通过 15 张思维导图来快速学习 PHP 语言基础。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="后端" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="思维导图" scheme="http://linfuyan.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
      <category term="PHP" scheme="http://linfuyan.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>【小白必读】微信小程序 https 支持导致的问题及配置 https 支持的流程</title>
    <link href="http://linfuyan.com/weapp-https/"/>
    <id>http://linfuyan.com/weapp-https/</id>
    <published>2017-05-25T06:26:00.000Z</published>
    <updated>2019-02-22T01:42:04.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近泡在好几个微信小程序QQ群里，发现大家提的好多问题是由于微信小程序的 https 支持引起的，这篇文章里面对于微信小程序的 https 相关问题做一些说明。</p></blockquote><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><p>哪些情况可能是由于 https 的配置导致的？</p><p>1. 小程序页面出现白屏</p><p>大部分的小程序页面需要通过服务器接口返回的数据进行填充之后才能展示，由于 https 的配置错误，导致数据无法获取到，表现在小程序的界面上就是这个页面没有数据，看起来白屏。有的小伙伴儿在开发的时候是能拿到数据，显示没有问题的，而提交审核以后却因为没有显示数据而不通过，就是这个原因。</p><p>2. 应该显示图片的部分没有内容显示</p><p>这个的原因和第一个其实是一样的，返回的图片的地址是 <code>http://</code> 开头，或者返回图片路径不对。所有无法加载出来。</p><p>3. 调用 <code>wx.downloadFile/wx.uploadFile</code> 失败</p><p>出现上面这些问题时，终端上的调试信息差不多是这样：</p><p><img src="http://img.uprogrammer.cn/static/images/wxapp-https-debug.png" alt="微信https问题调试"></p><a id="more"></a><h2 id="问题缘起"><a href="#问题缘起" class="headerlink" title="问题缘起"></a>问题缘起</h2><p><strong>正式上线的微信小程序仅支持 https 的请求，包括 <code>wx.request</code>, <code>wx.uploadFile</code>, <code>wx.downloadFile</code> 等 API，以及其他支持网络资源的组件，如 <code>&lt;image&gt;</code></strong>。</p><p>具体可以参看相关的 API 说明。</p><p>很多小伙伴儿疑惑，我的小程序接口不是 https 的呀，网上获取到的很多实例代码也都不是，为什么在微信 web 开发者工具里面都可以正常的跑起来呢？有更多的人可能在疑惑，为啥很多实例代码跑起来以后白屏或者图片不显示呢？</p><p>上面提到一个限定：<strong>正式上线的微信小程序</strong>仅支持 https 请求。正式环境为了安全，那开发环境也按照正式环境的标准来要求，就会有很多的不方便了。所以在开发环境下，微信小程序是可以支持 http 请求的，这在微信 web 开发者工具中可以配置。</p><p><img src="http://img.uprogrammer.cn/static/images/wxapp-https-switch.png" alt="微信https开关"></p><p>如上图，勾选最后的选项，开发环境下，不需要 https 请求，也能够获取到网络请求的数据了。所以从网络上下载了实例代码的小伙伴儿，如果出现白屏或者图片不显示，检查一下请求的 url，检查一下这块的配置，再跑起来看看是不是已经可以了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>确定了问题是因为没有 https 支持导致的，那接下来该怎么解决呢？</p><p><strong>显然解决方案是为来自服务端的请求加上 https 支持，为 <code>wx.uploadFile</code> 等 API 的请求域名加上 https 支持。</strong></p><p>为微信小程序配置 https 支持的步骤如下：</p><ol><li>具有部署服务端代码的空间及访问服务的域名</li><li>根据需要申请到域名对应的 https 证书</li><li>配置 web 服务器，使其支持 https</li><li>微信小程序后台配置对应的域名</li><li>微信小程序代码上的请求链接修改为 https</li></ol><h3 id="空间和域名"><a href="#空间和域名" class="headerlink" title="空间和域名"></a>空间和域名</h3><p>你的服务端代码最终是要部署到空间或者云服务器上的。最终上线的微信小程序服务器必须有域名，IP 地址是不支持的。所以你还必须有个域名。</p><p>空间/云服务器，域名哪里来，怎么申请，就不说了。如果你在公司，应该有专门的人来搞这个，或者已经都有了。如果你是个人，以前没接触过，可能需要花时间了解一下。</p><h3 id="https-证书申请"><a href="#https-证书申请" class="headerlink" title="https 证书申请"></a>https 证书申请</h3><p>有了域名，就可以针对域名申请 https 证书了。支持 https 的证书有许多这种，现在网上可以申请到免费的 https 证书。阿里云、七牛、腾讯云、let’s encrypt 等都有。具体这里也不展开。</p><h3 id="web-服务器配置"><a href="#web-服务器配置" class="headerlink" title="web 服务器配置"></a>web 服务器配置</h3><p>一般服务部署以后，是通过 web 服务器才访问到的。由于使用的技术五花八门，而你可能只接触到了开发环境，对最后的上线不太了解。这里只大略提一下。</p><p>大部分的开发人员，如果是 Java 开发后台，可能开发测试是在 tomcat 上跑的，本地测试经常访问 <code>http://localhost:8080</code> 这样；如果是 php，可能用的 phpstorm，运行起来以后，也是直接带个本地地址访问；又或者是 nodejs 的，命令行启动以后，内置的服务器就跑起来可以访问了；总而言之，最后的部署环境和开发时是不一样的。</p><p>针对不同的技术，有其自己特有的 https 配置方案。如果你是这种情况，根据需要查找资料吧。但一般企业应用有更通用的做法。</p><p>最后部署时，一般有 nginx 或者 apache，做反向代理及负载均衡等，然后才访问到真正的服务端业务代码。</p><p>举个例子：我用 Java 开发了后台服务程序，并且跑在 tomcat 上。然后正式对外时，我用 nginx 做反向代理。那么这个看起来就像下面图所示。</p><p><img src="http://img.uprogrammer.cn/static/images/server-deploy-arch.png" alt="服务端部署架构"></p><p>这时，通常就是对 nginx 做支持 https 的配置，以及配置反向代理。</p><h3 id="小程序后台配置"><a href="#小程序后台配置" class="headerlink" title="小程序后台配置"></a>小程序后台配置</h3><p><img src="http://img.uprogrammer.cn/static/images/https-required.png" alt="小程序后台配置 https"></p><p>当服务器的 https 支持配置完成以后，需要在小程序后台中配置上合法的服务器域名。必须针对不同的 API 使用，配置对应的域名。</p><h3 id="修改小程序代码，用-https-访问"><a href="#修改小程序代码，用-https-访问" class="headerlink" title="修改小程序代码，用 https 访问"></a>修改小程序代码，用 https 访问</h3><p>一切准备就绪，接下来就是修改小程序上的请求代码，用 https 访问。再将开发工具上的 https 验证的开发打开。这时候应该程序正常响应了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是 https 配置导致的小程序问题，以及配置 https 支持需要的流程。每个部分都只粗略地提到，之所以没有具体说明，是因为每块都有挺多的内容可以讲。而针对小伙伴儿们不同的环境，又会有各种不同的方案。流程在这里了，每块具体内容大家自己查资料。后续我也可能针对具体内容写一些文章。欢迎到微信公众号“非典型程序员(up2048)”给我留言。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近泡在好几个微信小程序QQ群里，发现大家提的好多问题是由于微信小程序的 https 支持引起的，这篇文章里面对于微信小程序的 https 相关问题做一些说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题汇总&quot;&gt;&lt;a href=&quot;#问题汇总&quot; class=&quot;headerlink&quot; title=&quot;问题汇总&quot;&gt;&lt;/a&gt;问题汇总&lt;/h2&gt;&lt;p&gt;哪些情况可能是由于 https 的配置导致的？&lt;/p&gt;
&lt;p&gt;1. 小程序页面出现白屏&lt;/p&gt;
&lt;p&gt;大部分的小程序页面需要通过服务器接口返回的数据进行填充之后才能展示，由于 https 的配置错误，导致数据无法获取到，表现在小程序的界面上就是这个页面没有数据，看起来白屏。有的小伙伴儿在开发的时候是能拿到数据，显示没有问题的，而提交审核以后却因为没有显示数据而不通过，就是这个原因。&lt;/p&gt;
&lt;p&gt;2. 应该显示图片的部分没有内容显示&lt;/p&gt;
&lt;p&gt;这个的原因和第一个其实是一样的，返回的图片的地址是 &lt;code&gt;http://&lt;/code&gt; 开头，或者返回图片路径不对。所有无法加载出来。&lt;/p&gt;
&lt;p&gt;3. 调用 &lt;code&gt;wx.downloadFile/wx.uploadFile&lt;/code&gt; 失败&lt;/p&gt;
&lt;p&gt;出现上面这些问题时，终端上的调试信息差不多是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.uprogrammer.cn/static/images/wxapp-https-debug.png&quot; alt=&quot;微信https问题调试&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="微信" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="微信" scheme="http://linfuyan.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="小程序" scheme="http://linfuyan.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="https" scheme="http://linfuyan.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>在 Android 上开始使用 Kotlin</title>
    <link href="http://linfuyan.com/android-kotlin-get-started/"/>
    <id>http://linfuyan.com/android-kotlin-get-started/</id>
    <published>2017-05-18T04:00:00.000Z</published>
    <updated>2019-02-22T01:43:10.293Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文翻译自：<a href="https://developer.android.com/kotlin/get-started.html" target="_blank" rel="noopener">https://developer.android.com/kotlin/get-started.html</a></p></blockquote><p>Android Studio 3.0 完整的支持 Kotlin，因此下面的这些操作都很方便。包括通过 Kotlin 文件创建新的项目，添加新的 Kotlin 文件到已有项目中，或者将 Java 语言代码转为 Kotlin。同时，你也可以针对 Kotlin 代码来使用所有 Android Studio已有的工具，如自动补全，lint 检查，重构，调试等。</p><p>这篇文章将介绍如何再 Android Studio 中开始使用 Kotlin。</p><a id="more"></a><h2 id="创建新项目来使用-Kotlin"><a href="#创建新项目来使用-Kotlin" class="headerlink" title="创建新项目来使用 Kotlin"></a>创建新项目来使用 Kotlin</h2><p>在新项目中使用 Kotlin，仅需要在新项目向导中一个额外的点击：</p><ol><li>在 Android Studio 中，点击<strong>文件(File) &gt; 新建(New) &gt; 新项目(New Project)</strong>。或者你刚刚打开 Android Studio，看到了 Android Studio 的欢迎窗口，那么点击<strong>开始一个新的 Android Studio 项目</strong>。</li><li>在第一个屏幕，选中<strong>包含 Kotlin 支持(Include Kotlin Support)</strong>。就只有这一个唯一的区别。</li><li>点击<strong>下一步(Next)</strong>并继续后面的向导直到结束。</li></ol><p><img src="http://img.uprogrammer.cn/static/images/kotlin-new-project_2x.png" alt="kotlin-new-project"></p><p>当你选择了一个 Activity 模板，它将以 Kotlin 代码提供。现在，至于一些<strong>手机和平板</strong>的模板提供了惯用的 Kotlin 代码。其他的则是从 Java 模板自动转化为 Kotlin。你仍然得到的是 Kotlin 代码，但是某些代码没有使用 Kotlin 最佳的语言特性。</p><p>与 Java 文件一样，Kotlin 文件被保存在 <code>src/main/java/</code> 目录下。</p><h2 id="在现有项目中添加-Kotlin"><a href="#在现有项目中添加-Kotlin" class="headerlink" title="在现有项目中添加 Kotlin"></a>在现有项目中添加 Kotlin</h2><p>如果你想要添加 Kotlin 代码到现有的项目中，简单点击<strong>文件(File) &gt; 新建(New)</strong>，并从中选择一个 Android 模板。如果你没有在菜单中看到模板列表，需要先打开<strong>项目(Project)</strong>窗口，并选择你的 App 模块。</p><p><img src="http://img.uprogrammer.cn/static/images/new-template-menu_2x.png" alt="new-template-menu"></p><p>在展示的向导中，为<strong>源代码(Source Language)</strong>选择 Kotlin。</p><p><img src="http://img.uprogrammer.cn/static/images/kotlin-new-activity_2x.png" alt="kotlin-new-activity"></p><p>继续后面的向导，直到结束。</p><p>此外，你可以点击<strong>文件(File) &gt; 新建(New) &gt; Kotlin文件/类(Kotlin File/Class)</strong>来创建基础文件。<strong>新建Kotlin文件/类</strong>窗口提供了不同文件类型的选择，但不用太在意你选择了那种文件。因为当你以后改变了声明方式， Kotlin 会自动切换文件类型。</p><p>默认情况下，新的 Kotlin 文件会被保存在 <code>src/main/java/</code> 中。你会发现 Kotlin 和 Java 文件在一个位置。如果你更喜欢将 Kotlin 文件与 Java 文件分开，你可以把 Kotlin 文件放到 <code>src/main/kotlin/</code> 目录下。这样做，你需要修改 sourceSets 的配置来包含该目录。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">   sourceSets &#123;</span><br><span class="line">       main<span class="selector-class">.java</span><span class="selector-class">.srcDirs</span> += <span class="string">'src/main/kotlin'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换现有的-Java-代码为-Kotlin-代码"><a href="#转换现有的-Java-代码为-Kotlin-代码" class="headerlink" title="转换现有的 Java 代码为 Kotlin 代码"></a>转换现有的 Java 代码为 Kotlin 代码</h2><p>在 Android Studio 3.0 中，打开 Java 文件，并且选择<strong>代码(Code) &gt; 转换 Java 文件为 Kotlin 文件</strong>。</p><p>或者创建新的 Kotlin 文件(<strong>File &gt; New &gt; Kotlin File/Class</strong>)，然后粘贴 Java 代码到该文件里，当弹出提示时，点击<strong>是</strong>来转换代码到 Kotlin。你可以选中<strong>下次不再显示该对话框</strong>来取消同样操作时的提示。</p><p><img src="http://img.uprogrammer.cn/static/images/kotlin-convert_2x.png" alt="kotlin-convert"></p><h2 id="Kotlin-如何来使用-Android-API"><a href="#Kotlin-如何来使用-Android-API" class="headerlink" title="Kotlin 如何来使用 Android API"></a>Kotlin 如何来使用 Android API</h2><p>Kotlin 提供了与 Java 语言完整的互操作性，所以调用 Android API 看起来与 Java 代码几乎一样。此外，你还可以将这些方法调用与Kotlin的语法特征相结合。</p><p>下面是一些如何在 Kotlin 中调用 Android API 的例子，同时对比 Java 的相同代码。</p><p><strong>在 Kotlin 中声明 Activity</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    setContentView(R.layout.activity)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 Java 中声明 Activity</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(<span class="type">R</span>.layout.activity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Kotlin 中的 On-click listener</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val fab = findViewById(R<span class="selector-class">.id</span><span class="selector-class">.fab</span>) as FloatingActionButton</span><br><span class="line">fab<span class="selector-class">.setOnClickListener</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 中的 On-click listener</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</span><br><span class="line">fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Kotlin 中的 Item click listener</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private val mOnNavigationItemSelectedListener</span><br><span class="line">    = BottomNavigationView<span class="selector-class">.OnNavigationItemSelectedListener</span> &#123; item -&gt;</span><br><span class="line">  when (item.itemId) &#123;</span><br><span class="line">    R<span class="selector-class">.id</span><span class="selector-class">.navigation_home</span> -&gt; &#123;</span><br><span class="line">      mTextMessage.setText(R<span class="selector-class">.string</span><span class="selector-class">.title_home</span>)</span><br><span class="line">      return@OnNavigationItemSelectedListener true</span><br><span class="line">    &#125;</span><br><span class="line">    R<span class="selector-class">.id</span><span class="selector-class">.navigation_dashboard</span> -&gt; &#123;</span><br><span class="line">      mTextMessage.setText(R<span class="selector-class">.string</span><span class="selector-class">.title_dashboard</span>)</span><br><span class="line">      return@OnNavigationItemSelectedListener true</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 中的 Item click listener</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener</span><br><span class="line">    = <span class="keyword">new</span> BottomNavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> onNavigationItemSelected(<span class="meta">@NonNull</span> MenuItem item) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">      <span class="keyword">case</span> R.id.<span class="string">navigation_home:</span></span><br><span class="line">        mTextMessage.setText(R.string.title_home);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">case</span> R.id.<span class="string">navigation_dashboard:</span></span><br><span class="line">        mTextMessage.setText(R.string.title_dashboard);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>如果你还没有入坑，那我告诉你，是时候学习 Kotlin 了。</p><p><a href="http://uprogrammer.cn/kotlin-in-chinese/index.html" target="_blank" rel="noopener">Kotlin 中文文档</a></p><p><a href="http://uprogrammer.cn/kotlin-for-android-developers-zh/index.html" target="_blank" rel="noopener">写给 Android 开发者的 Kotlin 教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;https://developer.android.com/kotlin/get-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.android.com/kotlin/get-started.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android Studio 3.0 完整的支持 Kotlin，因此下面的这些操作都很方便。包括通过 Kotlin 文件创建新的项目，添加新的 Kotlin 文件到已有项目中，或者将 Java 语言代码转为 Kotlin。同时，你也可以针对 Kotlin 代码来使用所有 Android Studio已有的工具，如自动补全，lint 检查，重构，调试等。&lt;/p&gt;
&lt;p&gt;这篇文章将介绍如何再 Android Studio 中开始使用 Kotlin。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Kotlin" scheme="http://linfuyan.com/tags/Kotlin/"/>
    
      <category term="Android O" scheme="http://linfuyan.com/tags/Android-O/"/>
    
      <category term="Google IO 2017" scheme="http://linfuyan.com/tags/Google-IO-2017/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 成为 Android 官方语言，看看官方怎么说？</title>
    <link href="http://linfuyan.com/android-kotlin/"/>
    <id>http://linfuyan.com/android-kotlin/</id>
    <published>2017-05-18T03:21:00.000Z</published>
    <updated>2017-05-18T10:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文翻译自：<a href="https://developer.android.com/kotlin/index.html" target="_blank" rel="noopener">https://developer.android.com/kotlin/index.html</a></p></blockquote><p>伴随着开发者持续增长的兴趣，我们发现多年来 Android 开发中 Kotlin 被越来越多地采用。 Kotlin 具有很好的表现力，简洁，容易扩展，强大，并有优雅的可读写性。在可空性和不变性的处理上，有非常精彩的安全特性。这与我们想要让 Android 应用更加健壮和高效方面的投入相吻合。最重要的是，它与现有的 Android 语言及运行时可以相互操作。所以我们很高兴地让 Kotlin 成为 Android 上的官方语言。</p><a id="more"></a><p>如果你对使用 Kotlin 感兴趣，那么这将很容易开始。因为它可以与 Android 和 Android 平台上的 Java 和 C++ 搭配使用。所以你可以保持原有的代码，继续使用不同的 Android 库，并添加 Kotlin 代码到你的项目中。与其他多数语言不同， Kotlin 是可以双向使用的替代品。你可以从 Kotlin 调用 Java 语言，也可以从 Java 调用 Kotlin。</p><p>当然， IDE 的支持也是至关重要的，并且我们也已经拥有它。 Android Studio 是基于 JetBrains 开发的 IDE 产品 IntelliJ IDEA 来构建的。而正是这家公司发明了 Kotlin 语言。 JetBrains 的团队已经为能够让 Kotlin 在 IntelliJ IDEA 完美运行工作了很多年。所以我们将继承他们的辛勤工作。从 Android Studio 3.0 开始，对 Kotlin 的支持工具将直接集成在 Android Studio 中。</p><p>我们认为 Kotlin 非常适合 Android，不仅因为它为开发者提供了他们想要的，而且还因为它符合 Android 的精神。与 Android 一样， Kotlin 一直是 Apache 2 下开放源代码项目。它涉及整个社区，而不仅仅是一家公司。我们正在与 JetBrains 合作，把 Kotlin 转为一个非盈利的机构。</p><p>对于选择 Kotlin，正是我们对于“随着 Android 平台的不断发展和壮大，我们致力于开放开发者生态”的理念的重申。 Kotlin 语言的发展让我们感到兴奋。</p><hr><p>如果你还没有入坑，那我告诉你，是时候学习 Kotlin 了。</p><p><a href="http://uprogrammer.cn/kotlin-in-chinese/index.html" target="_blank" rel="noopener">Kotlin 中文文档</a></p><p><a href="http://uprogrammer.cn/kotlin-for-android-developers-zh/index.html" target="_blank" rel="noopener">写给 Android 开发者的 Kotlin 教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;https://developer.android.com/kotlin/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.android.com/kotlin/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;伴随着开发者持续增长的兴趣，我们发现多年来 Android 开发中 Kotlin 被越来越多地采用。 Kotlin 具有很好的表现力，简洁，容易扩展，强大，并有优雅的可读写性。在可空性和不变性的处理上，有非常精彩的安全特性。这与我们想要让 Android 应用更加健壮和高效方面的投入相吻合。最重要的是，它与现有的 Android 语言及运行时可以相互操作。所以我们很高兴地让 Kotlin 成为 Android 上的官方语言。&lt;/p&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Kotlin" scheme="http://linfuyan.com/tags/Kotlin/"/>
    
      <category term="Android O" scheme="http://linfuyan.com/tags/Android-O/"/>
    
      <category term="Google IO 2017" scheme="http://linfuyan.com/tags/Google-IO-2017/"/>
    
  </entry>
  
  <entry>
    <title>Java Swing 代码打包成 Windows 上的 exe 文件</title>
    <link href="http://linfuyan.com/java-swing-drag-jar-exe/"/>
    <id>http://linfuyan.com/java-swing-drag-jar-exe/</id>
    <published>2017-03-16T05:30:00.000Z</published>
    <updated>2018-10-18T12:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>年前抽空给朋友做了个小东西。具体功能就不说了。对于他的最终需求，概括的说就是：需要一个满足功能的在 windows 上的 .exe 文件。桌面开发我不熟，后来基于 Java Swing 给实现了。在实现过程中，几个关键点记下来做备忘。</p><ol><li>拖拽文件到界面的输入框中，后续对文件进行处理。简化一下，拖拽文件到输入框，并获取文件路径。</li><li>项目的依赖是用 Gradle 来管理的，功能实现依赖第三方 jar，最终需要打包成一个可执行 jar。</li><li>将制作好的 jar 打包成 .exe 文件。</li></ol><a id="more"></a><h2 id="1-实现拖拽文件到指定控件，并获取文件路径"><a href="#1-实现拖拽文件到指定控件，并获取文件路径" class="headerlink" title="1. 实现拖拽文件到指定控件，并获取文件路径"></a>1. 实现拖拽文件到指定控件，并获取文件路径</h2><p>直接上核心代码，具体看注释。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.datatransfer.DataFlavor;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DnDConstants;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DropTarget;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DropTargetAdapter;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.awt.dnd.DropTargetDropEvent;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拖拽文件到控件,并处理</span></span><br><span class="line"><span class="comment">     * @param component 要接受拖拽的控件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> drag(Component component) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> DropTarget(component, DnDConstants.ACTION_COPY_OR_MOVE, <span class="keyword">new</span> DropTargetAdapter() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写适配器的drop方法,实现自己需要的逻辑</span></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> drop(DropTargetDropEvent event) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果拖入的文件格式受支持</span></span><br><span class="line">                    <span class="keyword">if</span> (event.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) &#123;</span><br><span class="line">                        <span class="comment">// 接收拖拽来的数据</span></span><br><span class="line">                        event.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);</span><br><span class="line">                        <span class="comment">// 读取传递过来的数据</span></span><br><span class="line">                        java.util.List&lt;File&gt; list = (java.util.List&lt;File&gt;) (event.getTransferable().getTransferData(DataFlavor.javaFileListFlavor));</span><br><span class="line">                        <span class="comment">// 对传递过来的数据做处理</span></span><br><span class="line">                        <span class="comment">// do what you want to do</span></span><br><span class="line">                        event.dropComplete(<span class="literal">true</span>); <span class="comment">// 指示拖拽操作已完成</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        event.rejectDrop(); <span class="comment">// 否则拒绝拖拽来的数据</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-通过-Gradle-制作可执行的-jar-文件"><a href="#2-通过-Gradle-制作可执行的-jar-文件" class="headerlink" title="2. 通过 Gradle 制作可执行的 jar 文件"></a>2. 通过 Gradle 制作可执行的 jar 文件</h2><p>参考这里：<a href="http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle" target="_blank" rel="noopener">Creating runnable JAR with Gradle</a></p><p>里面提到了两种方案，一种是直接使用 application 插件，另一种是 shadowJar 插件。</p><p>我最终采用了 shadowJar 的方式实现，核心代码如下：</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    <span class="attribute">repositories &#123;</span></span><br><span class="line"><span class="attribute">        maven &#123;</span></span><br><span class="line"><span class="attribute">            url "https</span>://plugins<span class="variable">.gradle</span><span class="variable">.org</span>/m2/"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath "com<span class="variable">.github</span><span class="variable">.jengelman</span><span class="variable">.gradle</span><span class="variable">.plugins</span>:shadow:1.2.4"</span><br><span class="line">        classpath 'gradle<span class="variable">.plugin</span><span class="variable">.edu</span><span class="variable">.sc</span><span class="variable">.seis</span><span class="variable">.gradle</span>:launch4j:2.3.0'</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: 'java'</span><br><span class="line">apply plugin: 'com<span class="variable">.github</span><span class="variable">.johnrengelman</span><span class="variable">.shadow</span>'</span><br><span class="line"></span><br><span class="line">mainClassName = "your<span class="variable">.main</span><span class="variable">.ClassName</span>"</span><br><span class="line"></span><br><span class="line">shadowJar &#123;</span><br><span class="line">    baseName = 'your_jar_name'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包的命令行如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./gradlew</span> shadowJar</span><br></pre></td></tr></table></figure><p>完成后，就可以在 build/libs 目录下找到 <code>*-all.jar</code>。</p><p>使用 <code>java -jar your-app-all.jar</code> 运行，看下你的程序已经跑起来了。</p><h2 id="3-将-jar-制作成-windows-下的-exe-文件"><a href="#3-将-jar-制作成-windows-下的-exe-文件" class="headerlink" title="3. 将 jar 制作成 windows 下的 exe 文件"></a>3. 将 jar 制作成 windows 下的 exe 文件</h2><p>网上找了很多这方面的工具，最终我发现 launch4j 真是个好用的东西。</p><p>我使用的是 launch4j 的 mac 版。这东西是跨平台的。</p><p>由于 java 的运行离不开 jre 环境，而除了开发人员，正常用户电脑上基本没有环境。所以我们打包的时候，需要把 jre 一起打包。</p><p>mac 上用 launch4j 来将 jar 打包成在 windows 上运行的 exe，还有一点需要注意，就是用于打包的 jre 必须是 windows 下的。</p><p>最简单的 launch4j 配置只需两步，就可以把 jar 打包成 exe了。</p><p><img src="http://img.uprogrammer.cn/static/images/jar2exe-1.png" alt="launch4j 基础配置"></p><p><img src="http://img.uprogrammer.cn/static/images/jar2exe-2.png" alt="launch4j jre 配置"></p><p><strong>jre</strong> 要放置在最终打包的 exe 的同级目录下。这边主要是因为打包后的 exe 是通过相对路径来寻找依赖的 jre。如果配置错误，将导致后面的 exe 文件无法运行。</p><p>到这里，最终打包的 exe 是可以运行了。不过 jre 包和 exe 文件是分开的。可以把这些东西，放在一个文件夹下再压缩，最后分发给用户。</p><p>还可以把  jre 一起打包到 exe 中。以后有时间我在处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年前抽空给朋友做了个小东西。具体功能就不说了。对于他的最终需求，概括的说就是：需要一个满足功能的在 windows 上的 .exe 文件。桌面开发我不熟，后来基于 Java Swing 给实现了。在实现过程中，几个关键点记下来做备忘。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拖拽文件到界面的输入框中，后续对文件进行处理。简化一下，拖拽文件到输入框，并获取文件路径。&lt;/li&gt;
&lt;li&gt;项目的依赖是用 Gradle 来管理的，功能实现依赖第三方 jar，最终需要打包成一个可执行 jar。&lt;/li&gt;
&lt;li&gt;将制作好的 jar 打包成 .exe 文件。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="开发技术" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
      <category term="经验实践" scheme="http://linfuyan.com/categories/%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/%E7%BB%8F%E9%AA%8C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="swing" scheme="http://linfuyan.com/tags/swing/"/>
    
      <category term="shadowJar" scheme="http://linfuyan.com/tags/shadowJar/"/>
    
      <category term="launch4j" scheme="http://linfuyan.com/tags/launch4j/"/>
    
  </entry>
  
</feed>
